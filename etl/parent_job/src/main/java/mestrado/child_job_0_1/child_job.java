// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package mestrado.child_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.UserHelper;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: child_job Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class child_job implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cadastro_file != null){
				
					this.setProperty("cadastro_file", cadastro_file.toString());
				
			}
			
			if(remuneracao_file != null){
				
					this.setProperty("remuneracao_file", remuneracao_file.toString());
				
			}
			
			if(afastamento_file != null){
				
					this.setProperty("afastamento_file", afastamento_file.toString());
				
			}
			
			if(host != null){
				
					this.setProperty("host", host.toString());
				
			}
			
			if(port != null){
				
					this.setProperty("port", port.toString());
				
			}
			
			if(database != null){
				
					this.setProperty("database", database.toString());
				
			}
			
			if(user != null){
				
					this.setProperty("user", user.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(if_id != null){
				
					this.setProperty("if_id", if_id.toString());
				
			}
			
		}

public String cadastro_file;
public String getCadastro_file(){
	return this.cadastro_file;
}
public String remuneracao_file;
public String getRemuneracao_file(){
	return this.remuneracao_file;
}
public String afastamento_file;
public String getAfastamento_file(){
	return this.afastamento_file;
}
public String host;
public String getHost(){
	return this.host;
}
public String port;
public String getPort(){
	return this.port;
}
public String database;
public String getDatabase(){
	return this.database;
}
public String user;
public String getUser(){
	return this.user;
}
public String password;
public String getPassword(){
	return this.password;
}
public String if_id;
public String getIf_id(){
	return this.if_id;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "child_job";
	private final String projectName = "MESTRADO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				child_job.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(child_job.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputTextFlat_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlCommit_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlCommit_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputTextFlat_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputTextFlat_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputTextFlat_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputTextFlat_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlCommit_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputTextFlat_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputTextFlat_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tMysqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMysqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlConnection_1", false);
		start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlConnection_1";

	
		int tos_count_tMysqlConnection_1 = 0;
		
    	class BytesLimit65535_tMysqlConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlConnection_1().limitLog4jByte();
	

	
		String properties_tMysqlConnection_1 = "noDatetimeStringSync=true";
		if (properties_tMysqlConnection_1 == null || properties_tMysqlConnection_1.trim().length() == 0) {
			properties_tMysqlConnection_1 += "rewriteBatchedStatements=true";
		}else if (properties_tMysqlConnection_1 != null && !properties_tMysqlConnection_1.contains("rewriteBatchedStatements")) {
			properties_tMysqlConnection_1 += "&rewriteBatchedStatements=true";
		}
		
		String url_tMysqlConnection_1 = "jdbc:mysql://" + context.host + ":" + context.port + "/" + context.database + "?" + properties_tMysqlConnection_1;

	String dbUser_tMysqlConnection_1 = context.user;
	
	
		
	final String decryptedPassword_tMysqlConnection_1 = context.password; 
		String dbPwd_tMysqlConnection_1 = decryptedPassword_tMysqlConnection_1;
	

	java.sql.Connection conn_tMysqlConnection_1 = null;
	
	
			String sharedConnectionName_tMysqlConnection_1 = "mysql_conection";
			conn_tMysqlConnection_1 = SharedDBConnection.getDBConnection("org.gjt.mm.mysql.Driver",url_tMysqlConnection_1,dbUser_tMysqlConnection_1 , dbPwd_tMysqlConnection_1 , sharedConnectionName_tMysqlConnection_1);
	if (null != conn_tMysqlConnection_1) {
		
			conn_tMysqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("conn_tMysqlConnection_1",conn_tMysqlConnection_1);

	globalMap.put("db_tMysqlConnection_1",context.database);
 



/**
 * [tMysqlConnection_1 begin ] stop
 */
	
	/**
	 * [tMysqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 


	tos_count_tMysqlConnection_1++;

/**
 * [tMysqlConnection_1 main ] stop
 */
	
	/**
	 * [tMysqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 

ok_Hash.put("tMysqlConnection_1", true);
end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());




/**
 * [tMysqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tFileInputTextFlat_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 



/**
 * [tMysqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputTextFlat_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputTextFlat_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_4 = 0;
		
    	class BytesLimit65535_tHashOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_4().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_child_job_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
				mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
				tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			}
        int nb_line_tHashOutput_4 = 0;
 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputTextFlat_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputTextFlat_1", false);
		start_Hash.put("tFileInputTextFlat_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputTextFlat_1";

	
		int tos_count_tFileInputTextFlat_1 = 0;
		
    	class BytesLimit65535_tFileInputTextFlat_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputTextFlat_1().limitLog4jByte();

    // row2 , 
	de.jlo.talendcomp.flatfileimport.Importer tFileInputTextFlat_1 = new de.jlo.talendcomp.flatfileimport.Importer();
	tFileInputTextFlat_1.setDebug(false);
	tFileInputTextFlat_1.setImportFile(context.cadastro_file);
	globalMap.put("tFileInputTextFlat_1_FILENAME", tFileInputTextFlat_1.getImportFile()); 
	tFileInputTextFlat_1.skipBOM(true);
	tFileInputTextFlat_1.setSkipEmptyLines(true);
	tFileInputTextFlat_1.setHasHeaderRow(true);
	tFileInputTextFlat_1.setIgnoreNotNullConstraints(false);
    tFileInputTextFlat_1.setRowsToSkip(0);
	tFileInputTextFlat_1.setDelimiter("\t");
	tFileInputTextFlat_1.setFileCharset("Windows-1252");
	// helper to configure fields and get values
	final class ImportHelper_tFileInputTextFlat_1 {
	
		public void configureFields(de.jlo.talendcomp.flatfileimport.Importer importer) {
		
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"Id_SERVIDOR_PORTAL", // columnName
				"Integer", // type
				true, // nullable 
				0, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"NOME", // columnName
				"String", // type
				true, // nullable 
				1, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"CPF", // columnName
				"String", // type
				true, // nullable 
				2, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"MATRICULA", // columnName
				"String", // type
				true, // nullable 
				3, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DESCRICAO_CARGO", // columnName
				"String", // type
				true, // nullable 
				4, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"CLASSE_CARGO", // columnName
				"String", // type
				true, // nullable 
				5, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"REFERENCIA_CARGO", // columnName
				"String", // type
				true, // nullable 
				6, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"PADRAO_CARGO", // columnName
				"String", // type
				true, // nullable 
				7, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"NIVEL_CARGO", // columnName
				"String", // type
				true, // nullable 
				8, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"SIGLA_FUNCAO", // columnName
				"String", // type
				true, // nullable 
				9, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"NIVEL_FUNCAO", // columnName
				"String", // type
				true, // nullable 
				10, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"FUNCAO", // columnName
				"String", // type
				true, // nullable 
				11, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"CODIGO_ATIVIDADE", // columnName
				"String", // type
				true, // nullable 
				12, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ATIVIDADE", // columnName
				"String", // type
				true, // nullable 
				13, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"COD_ORG_LOTACAO", // columnName
				"Integer", // type
				true, // nullable 
				14, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ORG_LOTACAO", // columnName
				"String", // type
				true, // nullable 
				15, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"COD_ORG_EXERCICIO", // columnName
				"Integer", // type
				true, // nullable 
				16, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"TIPO_VINCULO", // columnName
				"Integer", // type
				true, // nullable 
				17, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"SITUACAO_VINCULO", // columnName
				"String", // type
				true, // nullable 
				18, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_INICIO_AFASTAMENTO", // columnName
				"String", // type
				true, // nullable 
				19, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_TERMINO_AFASTAMENTO", // columnName
				"String", // type
				true, // nullable 
				20, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"REGIME_JURIDICO", // columnName
				"String", // type
				true, // nullable 
				21, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"JORNADA_DE_TRABALHO", // columnName
				"String", // type
				true, // nullable 
				22, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_INGRESSO_CARGOFUNCAO", // columnName
				"String", // type
				true, // nullable 
				23, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_INGRESSO_ORGAO", // columnName
				"String", // type
				true, // nullable 
				24, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative    
		} // end of configureFields
		
		public void fillOutputFlow(de.jlo.talendcomp.flatfileimport.Importer importer, row2Struct flow) throws Exception {
				flow.Id_SERVIDOR_PORTAL = importer.getIntegerAt(0, true); 	
				flow.NOME = importer.getStringAt(1, true); 	
				flow.CPF = importer.getStringAt(2, true); 	
				flow.MATRICULA = importer.getStringAt(3, true); 	
				flow.DESCRICAO_CARGO = importer.getStringAt(4, true); 	
				flow.CLASSE_CARGO = importer.getStringAt(5, true); 	
				flow.REFERENCIA_CARGO = importer.getStringAt(6, true); 	
				flow.PADRAO_CARGO = importer.getStringAt(7, true); 	
				flow.NIVEL_CARGO = importer.getStringAt(8, true); 	
				flow.SIGLA_FUNCAO = importer.getStringAt(9, true); 	
				flow.NIVEL_FUNCAO = importer.getStringAt(10, true); 	
				flow.FUNCAO = importer.getStringAt(11, true); 	
				flow.CODIGO_ATIVIDADE = importer.getStringAt(12, true); 	
				flow.ATIVIDADE = importer.getStringAt(13, true); 	
				flow.COD_ORG_LOTACAO = importer.getIntegerAt(14, true); 	
				flow.ORG_LOTACAO = importer.getStringAt(15, true); 	
				flow.COD_ORG_EXERCICIO = importer.getIntegerAt(16, true); 	
				flow.TIPO_VINCULO = importer.getIntegerAt(17, true); 	
				flow.SITUACAO_VINCULO = importer.getStringAt(18, true); 	
				flow.DATA_INICIO_AFASTAMENTO = importer.getStringAt(19, true); 	
				flow.DATA_TERMINO_AFASTAMENTO = importer.getStringAt(20, true); 	
				flow.REGIME_JURIDICO = importer.getStringAt(21, true); 	
				flow.JORNADA_DE_TRABALHO = importer.getStringAt(22, true); 	
				flow.DATA_INGRESSO_CARGOFUNCAO = importer.getStringAt(23, true); 	
				flow.DATA_INGRESSO_ORGAO = importer.getStringAt(24, true); 	
		} // end of fillOutputFlow
	
	}
	final ImportHelper_tFileInputTextFlat_1 helper_tFileInputTextFlat_1 = new ImportHelper_tFileInputTextFlat_1();
	try {
		helper_tFileInputTextFlat_1.configureFields(tFileInputTextFlat_1);
		globalMap.put("tFileInputTextFlat_1_HEADER_CONFIG_ERROR", false);
	} catch (Exception e) {
		globalMap.put("tFileInputTextFlat_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
    try {
    	tFileInputTextFlat_1.initialize();
        tFileInputTextFlat_1.skipTopRows();
		tFileInputTextFlat_1.skipHeaderRow();
		try {
			// reconfigure fields, will fail if no header line is set
			tFileInputTextFlat_1.setFindHeaderPosByRegex(false);
			tFileInputTextFlat_1.reconfigureFieldDescriptionByHeaderLine();
		} catch (Exception e) {
			globalMap.put("tFileInputTextFlat_1_HEADER_CONFIG_ERROR", true);
			throw e;		
		}
	} catch (Exception e) {
		tFileInputTextFlat_1.close(); // close file handle in case of errors
		globalMap.put("tFileInputTextFlat_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	int countLinesDelivered_tFileInputTextFlat_1 = 0;
	int lineNumber_tFileInputTextFlat_1 = -1;
	int countRejects_tFileInputTextFlat_1 = 0;
	try {
		while (true) { // main loop will be closed in end section
			// retrieve next data set
			lineNumber_tFileInputTextFlat_1++;
			row2 = new row2Struct();
			try {
				if (tFileInputTextFlat_1.nextDataRow() == false) {
					break;
				}
			} catch (Exception e) {
				String message = "nextDataRow failed in line " + countLinesDelivered_tFileInputTextFlat_1 + ":" + e.getMessage();
				globalMap.put("tFileInputTextFlat_1_ERROR_MESSAGE", message);
				row2 = null;
			}
			if (row2 != null) {
				// retrieve values
				try {
					helper_tFileInputTextFlat_1.fillOutputFlow(tFileInputTextFlat_1, row2);
				} catch (Exception e) {
					String message = "fillOutputFlow failed in line " + countLinesDelivered_tFileInputTextFlat_1 + ":" + e.getMessage();
					globalMap.put("tFileInputTextFlat_1_ERROR_MESSAGE", message);
					continue;
				}
			}
			countLinesDelivered_tFileInputTextFlat_1++;
			
 



/**
 * [tFileInputTextFlat_1 begin ] stop
 */
	
	/**
	 * [tFileInputTextFlat_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_1";

	

 


	tos_count_tFileInputTextFlat_1++;

/**
 * [tFileInputTextFlat_1 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

          row13 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
      ope_tFilterRow_2.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
routines.UserHelper.inStringArray(String.valueOf(row2.COD_ORG_LOTACAO)) || routines.UserHelper.inStringArray(String.valueOf(row2.COD_ORG_EXERCICIO))), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row13 == null){ 
                row13 = new row13Struct();
              }
               row13.Id_SERVIDOR_PORTAL = row2.Id_SERVIDOR_PORTAL;
               row13.NOME = row2.NOME;
               row13.CPF = row2.CPF;
               row13.MATRICULA = row2.MATRICULA;
               row13.DESCRICAO_CARGO = row2.DESCRICAO_CARGO;
               row13.CLASSE_CARGO = row2.CLASSE_CARGO;
               row13.REFERENCIA_CARGO = row2.REFERENCIA_CARGO;
               row13.PADRAO_CARGO = row2.PADRAO_CARGO;
               row13.NIVEL_CARGO = row2.NIVEL_CARGO;
               row13.SIGLA_FUNCAO = row2.SIGLA_FUNCAO;
               row13.NIVEL_FUNCAO = row2.NIVEL_FUNCAO;
               row13.FUNCAO = row2.FUNCAO;
               row13.CODIGO_ATIVIDADE = row2.CODIGO_ATIVIDADE;
               row13.ATIVIDADE = row2.ATIVIDADE;
               row13.COD_ORG_LOTACAO = row2.COD_ORG_LOTACAO;
               row13.ORG_LOTACAO = row2.ORG_LOTACAO;
               row13.COD_ORG_EXERCICIO = row2.COD_ORG_EXERCICIO;
               row13.TIPO_VINCULO = row2.TIPO_VINCULO;
               row13.SITUACAO_VINCULO = row2.SITUACAO_VINCULO;
               row13.DATA_INICIO_AFASTAMENTO = row2.DATA_INICIO_AFASTAMENTO;
               row13.DATA_TERMINO_AFASTAMENTO = row2.DATA_TERMINO_AFASTAMENTO;
               row13.REGIME_JURIDICO = row2.REGIME_JURIDICO;
               row13.JORNADA_DE_TRABALHO = row2.JORNADA_DE_TRABALHO;
               row13.DATA_INGRESSO_CARGOFUNCAO = row2.DATA_INGRESSO_CARGOFUNCAO;
               row13.DATA_INGRESSO_ORGAO = row2.DATA_INGRESSO_ORGAO;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		



    
		row13Struct oneRow_tHashOutput_4 = new row13Struct();
				
					oneRow_tHashOutput_4.Id_SERVIDOR_PORTAL = row13.Id_SERVIDOR_PORTAL;
					oneRow_tHashOutput_4.NOME = row13.NOME;
					oneRow_tHashOutput_4.CPF = row13.CPF;
					oneRow_tHashOutput_4.MATRICULA = row13.MATRICULA;
					oneRow_tHashOutput_4.DESCRICAO_CARGO = row13.DESCRICAO_CARGO;
					oneRow_tHashOutput_4.CLASSE_CARGO = row13.CLASSE_CARGO;
					oneRow_tHashOutput_4.REFERENCIA_CARGO = row13.REFERENCIA_CARGO;
					oneRow_tHashOutput_4.PADRAO_CARGO = row13.PADRAO_CARGO;
					oneRow_tHashOutput_4.NIVEL_CARGO = row13.NIVEL_CARGO;
					oneRow_tHashOutput_4.SIGLA_FUNCAO = row13.SIGLA_FUNCAO;
					oneRow_tHashOutput_4.NIVEL_FUNCAO = row13.NIVEL_FUNCAO;
					oneRow_tHashOutput_4.FUNCAO = row13.FUNCAO;
					oneRow_tHashOutput_4.CODIGO_ATIVIDADE = row13.CODIGO_ATIVIDADE;
					oneRow_tHashOutput_4.ATIVIDADE = row13.ATIVIDADE;
					oneRow_tHashOutput_4.COD_ORG_LOTACAO = row13.COD_ORG_LOTACAO;
					oneRow_tHashOutput_4.ORG_LOTACAO = row13.ORG_LOTACAO;
					oneRow_tHashOutput_4.COD_ORG_EXERCICIO = row13.COD_ORG_EXERCICIO;
					oneRow_tHashOutput_4.TIPO_VINCULO = row13.TIPO_VINCULO;
					oneRow_tHashOutput_4.SITUACAO_VINCULO = row13.SITUACAO_VINCULO;
					oneRow_tHashOutput_4.DATA_INICIO_AFASTAMENTO = row13.DATA_INICIO_AFASTAMENTO;
					oneRow_tHashOutput_4.DATA_TERMINO_AFASTAMENTO = row13.DATA_TERMINO_AFASTAMENTO;
					oneRow_tHashOutput_4.REGIME_JURIDICO = row13.REGIME_JURIDICO;
					oneRow_tHashOutput_4.JORNADA_DE_TRABALHO = row13.JORNADA_DE_TRABALHO;
					oneRow_tHashOutput_4.DATA_INGRESSO_CARGOFUNCAO = row13.DATA_INGRESSO_CARGOFUNCAO;
					oneRow_tHashOutput_4.DATA_INGRESSO_ORGAO = row13.DATA_INGRESSO_ORGAO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;
 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */

} // End of branch "row13"





} // End of branch "row2"




	
	/**
	 * [tFileInputTextFlat_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_1";

	

		} // end of while of tFileInputTextFlat_1
	} finally { // finally from try of tFileInputTextFlat_1
		tFileInputTextFlat_1.close(); // close file handle
	}
	globalMap.put("tFileInputTextFlat_1_NB_LINE", countLinesDelivered_tFileInputTextFlat_1); 
	globalMap.put("tFileInputTextFlat_1_NB_REJECTED", countRejects_tFileInputTextFlat_1); 	
	
 

ok_Hash.put("tFileInputTextFlat_1", true);
end_Hash.put("tFileInputTextFlat_1", System.currentTimeMillis());




/**
 * [tFileInputTextFlat_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_8Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk3", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk4", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tFileExist_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk5", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tMysqlInput_6Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputTextFlat_1:OnSubjobOk6", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputTextFlat_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_1";

	

 



/**
 * [tFileInputTextFlat_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputTextFlat_1_SUBPROCESS_STATE", 1);
	}
	


public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String jornada_trabalho;

				public String getJornada_trabalho () {
					return this.jornada_trabalho;
				}
				
			    public String regime_juridico;

				public String getRegime_juridico () {
					return this.regime_juridico;
				}
				
			    public java.util.Date data_ingresso_cargo;

				public java.util.Date getData_ingresso_cargo () {
					return this.data_ingresso_cargo;
				}
				
			    public java.util.Date data_ingresso_orgao;

				public java.util.Date getData_ingresso_orgao () {
					return this.data_ingresso_orgao;
				}
				
			    public java.util.Date data_saida;

				public java.util.Date getData_saida () {
					return this.data_saida;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String carreira;

				public String getCarreira () {
					return this.carreira;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
							result = prime * result + (int) this.id_org;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out9Struct other = (out9Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					

		return true;
    }

	public void copyDataTo(out9Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_cargo = this.id_cargo;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_org = this.id_org;
	            other.jornada_trabalho = this.jornada_trabalho;
	            other.regime_juridico = this.regime_juridico;
	            other.data_ingresso_cargo = this.data_ingresso_cargo;
	            other.data_ingresso_orgao = this.data_ingresso_orgao;
	            other.data_saida = this.data_saida;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.carreira = this.carreira;
	            
	}

	public void copyKeysDataTo(out9Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_cargo = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.jornada_trabalho = readString(dis);
					
					this.regime_juridico = readString(dis);
					
					this.data_ingresso_cargo = readDate(dis);
					
					this.data_ingresso_orgao = readDate(dis);
					
					this.data_saida = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.carreira = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.jornada_trabalho,dos);
					
					// String
				
						writeString(this.regime_juridico,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_cargo,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_orgao,dos);
					
					// java.util.Date
				
						writeDate(this.data_saida,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.carreira,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",jornada_trabalho="+jornada_trabalho);
		sb.append(",regime_juridico="+regime_juridico);
		sb.append(",data_ingresso_cargo="+String.valueOf(data_ingresso_cargo));
		sb.append(",data_ingresso_orgao="+String.valueOf(data_ingresso_orgao));
		sb.append(",data_saida="+String.valueOf(data_saida));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",carreira="+carreira);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				
			    public String cpf_reduzido;

				public String getCpf_reduzido () {
					return this.cpf_reduzido;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out11Struct other = (out11Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out11Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.nome = this.nome;
	            other.cpf_reduzido = this.cpf_reduzido;
	            
	}

	public void copyKeysDataTo(out11Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.nome = readString(dis);
					
					this.cpf_reduzido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.nome,dos);
					
					// String
				
						writeString(this.cpf_reduzido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",nome="+nome);
		sb.append(",cpf_reduzido="+cpf_reduzido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String descricao;

				public String getDescricao () {
					return this.descricao;
				}
				
			    public String classe;

				public String getClasse () {
					return this.classe;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_cargo == null) ? 0 : this.id_cargo.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out6Struct other = (out6Struct) obj;
		
						if (this.id_cargo == null) {
							if (other.id_cargo != null)
								return false;
						
						} else if (!this.id_cargo.equals(other.id_cargo))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out6Struct other) {

		other.id_cargo = this.id_cargo;
	            other.descricao = this.descricao;
	            other.classe = this.classe;
	            
	}

	public void copyKeysDataTo(out6Struct other) {

		other.id_cargo = this.id_cargo;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_cargo = readString(dis);
					
					this.descricao = readString(dis);
					
					this.classe = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.descricao,dos);
					
					// String
				
						writeString(this.classe,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_cargo="+id_cargo);
		sb.append(",descricao="+descricao);
		sb.append(",classe="+classe);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_cargo, other.id_cargo);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_org;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out7Struct other = (out7Struct) obj;
		
						if (this.id_org != other.id_org)
							return false;
					

		return true;
    }

	public void copyDataTo(out7Struct other) {

		other.id_org = this.id_org;
	            other.nome = this.nome;
	            
	}

	public void copyKeysDataTo(out7Struct other) {

		other.id_org = this.id_org;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
			        this.id_org = dis.readInt();
					
					this.nome = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.nome,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_org="+String.valueOf(id_org));
		sb.append(",nome="+nome);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out14Struct implements routines.system.IPersistableRow<out14Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_termino;

				public java.util.Date getData_termino () {
					return this.data_termino;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
						result = prime * result + ((this.id_org == null) ? 0 : this.id_org.hashCode());
					
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
						result = prime * result + ((this.data_termino == null) ? 0 : this.data_termino.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out14Struct other = (out14Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org == null) {
							if (other.id_org != null)
								return false;
						
						} else if (!this.id_org.equals(other.id_org))
						
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					
						if (this.data_termino == null) {
							if (other.data_termino != null)
								return false;
						
						} else if (!this.data_termino.equals(other.data_termino))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out14Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_cargo = this.id_cargo;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_termino = this.data_termino;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(out14Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	other.data_termino = this.data_termino;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
					this.id_cargo = readString(dis);
					
						this.id_org = readInteger(dis);
					
					this.data_inicio = readDate(dis);
					
					this.data_termino = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_termino="+String.valueOf(data_termino));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_termino, other.data_termino);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
out9Struct out9 = new out9Struct();
out11Struct out11 = new out11Struct();
out6Struct out6 = new out6Struct();
out7Struct out7 = new out7Struct();
out14Struct out14 = new out14Struct();






	
	/**
	 * [tMysqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_5", false);
		start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_5 = 0;
		
    	class BytesLimit65535_tMysqlOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_5().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_5 = 3;
        if(updateKeyCount_tMysqlOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_5 = 0;
int nb_line_update_tMysqlOutput_5 = 0;
int nb_line_inserted_tMysqlOutput_5 = 0;
int nb_line_deleted_tMysqlOutput_5 = 0;
int nb_line_rejected_tMysqlOutput_5 = 0;

int deletedCount_tMysqlOutput_5=0;
int updatedCount_tMysqlOutput_5=0;
int insertedCount_tMysqlOutput_5=0;

int rejectedCount_tMysqlOutput_5=0;

String tableName_tMysqlOutput_5 = "cadastro_servidor_lotacao";
boolean whetherReject_tMysqlOutput_5 = false;

java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
long date_tMysqlOutput_5;

java.sql.Connection conn_tMysqlOutput_5 = null;
	conn_tMysqlOutput_5 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_5=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_5 = conn_tMysqlOutput_5.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_5 = dbMetaData_tMysqlOutput_5.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_5 = false;
                                while(rsTable_tMysqlOutput_5.next()) {
                                    String table_tMysqlOutput_5 = rsTable_tMysqlOutput_5.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_5.equalsIgnoreCase("cadastro_servidor_lotacao")) {
                                        whetherExist_tMysqlOutput_5 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_5.close();
                                if(!whetherExist_tMysqlOutput_5) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_5 = conn_tMysqlOutput_5.createStatement();
                                        stmtCreate_tMysqlOutput_5.execute("CREATE TABLE `" + tableName_tMysqlOutput_5 + "`(`id_pessoa` VARCHAR(255)   not null ,`id_cargo` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)   not null ,`id_org` INT(10)   not null ,`jornada_trabalho` VARCHAR(255)  ,`regime_juridico` VARCHAR(255)  ,`data_ingresso_cargo` DATE ,`data_ingresso_orgao` DATE ,`data_saida` DATE ,`data_arquivo` DATE ,`id_intervalo` VARCHAR(255)  ,`carreira` VARCHAR(255)  ,primary key(`id_pessoa`,`matricula_reduzida`,`id_org`))");
                                    stmtCreate_tMysqlOutput_5.close();
                                }
	    java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement("SELECT COUNT(1) FROM `" + "cadastro_servidor_lotacao" + "` WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ?");
	    String insert_tMysqlOutput_5 = "INSERT INTO `" + "cadastro_servidor_lotacao" + "` (`id_pessoa`,`id_cargo`,`matricula_reduzida`,`id_org`,`jornada_trabalho`,`regime_juridico`,`data_ingresso_cargo`,`data_ingresso_orgao`,`data_saida`,`data_arquivo`,`carreira`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement(insert_tMysqlOutput_5);
	    String update_tMysqlOutput_5 = "UPDATE `" + "cadastro_servidor_lotacao" + "` SET `id_pessoa` = ?,`id_cargo` = ?,`matricula_reduzida` = ?,`id_org` = ?,`jornada_trabalho` = ?,`regime_juridico` = ?,`data_arquivo` = ? WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement(update_tMysqlOutput_5);
	    

 



/**
 * [tMysqlOutput_5 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_3", false);
		start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_3 = 0;
		
    	class BytesLimit65535_tMysqlOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_3().limitLog4jByte();






int nb_line_tMysqlOutput_3 = 0;
int nb_line_update_tMysqlOutput_3 = 0;
int nb_line_inserted_tMysqlOutput_3 = 0;
int nb_line_deleted_tMysqlOutput_3 = 0;
int nb_line_rejected_tMysqlOutput_3 = 0;

int deletedCount_tMysqlOutput_3=0;
int updatedCount_tMysqlOutput_3=0;
int insertedCount_tMysqlOutput_3=0;

int rejectedCount_tMysqlOutput_3=0;

String tableName_tMysqlOutput_3 = "cadastro_pessoa";
boolean whetherReject_tMysqlOutput_3 = false;

java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
long date_tMysqlOutput_3;

java.sql.Connection conn_tMysqlOutput_3 = null;
	conn_tMysqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_3=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_3 = conn_tMysqlOutput_3.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_3 = dbMetaData_tMysqlOutput_3.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_3 = false;
                                while(rsTable_tMysqlOutput_3.next()) {
                                    String table_tMysqlOutput_3 = rsTable_tMysqlOutput_3.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_3.equalsIgnoreCase("cadastro_pessoa")) {
                                        whetherExist_tMysqlOutput_3 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_3.close();
                                if(!whetherExist_tMysqlOutput_3) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_3 = conn_tMysqlOutput_3.createStatement();
                                        stmtCreate_tMysqlOutput_3.execute("CREATE TABLE `" + tableName_tMysqlOutput_3 + "`(`id_pessoa` VARCHAR(255)   not null ,`nome` VARCHAR(255)  ,`cpf_reduzido` VARCHAR(255)  ,primary key(`id_pessoa`))");
                                    stmtCreate_tMysqlOutput_3.close();
                                }
	    String insertIgnore_tMysqlOutput_3 = "INSERT IGNORE INTO `" + "cadastro_pessoa" + "` (`id_pessoa`,`nome`,`cpf_reduzido`) VALUES (?,?,?) ON DUPLICATE KEY UPDATE `nome` = ?,`cpf_reduzido` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3.prepareStatement(insertIgnore_tMysqlOutput_3);
	    

 



/**
 * [tMysqlOutput_3 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_4", false);
		start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_4 = 0;
		
    	class BytesLimit65535_tMysqlOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_4().limitLog4jByte();






int nb_line_tMysqlOutput_4 = 0;
int nb_line_update_tMysqlOutput_4 = 0;
int nb_line_inserted_tMysqlOutput_4 = 0;
int nb_line_deleted_tMysqlOutput_4 = 0;
int nb_line_rejected_tMysqlOutput_4 = 0;

int deletedCount_tMysqlOutput_4=0;
int updatedCount_tMysqlOutput_4=0;
int insertedCount_tMysqlOutput_4=0;

int rejectedCount_tMysqlOutput_4=0;

String tableName_tMysqlOutput_4 = "cadastro_cargo";
boolean whetherReject_tMysqlOutput_4 = false;

java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
long date_tMysqlOutput_4;

java.sql.Connection conn_tMysqlOutput_4 = null;
	conn_tMysqlOutput_4 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_4=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_4 = conn_tMysqlOutput_4.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_4 = dbMetaData_tMysqlOutput_4.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_4 = false;
                                while(rsTable_tMysqlOutput_4.next()) {
                                    String table_tMysqlOutput_4 = rsTable_tMysqlOutput_4.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_4.equalsIgnoreCase("cadastro_cargo")) {
                                        whetherExist_tMysqlOutput_4 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_4.close();
                                if(!whetherExist_tMysqlOutput_4) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_4 = conn_tMysqlOutput_4.createStatement();
                                        stmtCreate_tMysqlOutput_4.execute("CREATE TABLE `" + tableName_tMysqlOutput_4 + "`(`id_cargo` VARCHAR(255)   not null ,`descricao` VARCHAR(255)  ,`classe` VARCHAR(255)  ,primary key(`id_cargo`))");
                                    stmtCreate_tMysqlOutput_4.close();
                                }
	    String insertIgnore_tMysqlOutput_4 = "INSERT IGNORE INTO `" + "cadastro_cargo" + "` (`id_cargo`,`descricao`,`classe`) VALUES (?,?,?) ON DUPLICATE KEY UPDATE `descricao` = ?,`classe` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement(insertIgnore_tMysqlOutput_4);
	    

 



/**
 * [tMysqlOutput_4 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_10", false);
		start_Hash.put("tMysqlOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_10 = 0;
		
    	class BytesLimit65535_tMysqlOutput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_10().limitLog4jByte();






int nb_line_tMysqlOutput_10 = 0;
int nb_line_update_tMysqlOutput_10 = 0;
int nb_line_inserted_tMysqlOutput_10 = 0;
int nb_line_deleted_tMysqlOutput_10 = 0;
int nb_line_rejected_tMysqlOutput_10 = 0;

int deletedCount_tMysqlOutput_10=0;
int updatedCount_tMysqlOutput_10=0;
int insertedCount_tMysqlOutput_10=0;

int rejectedCount_tMysqlOutput_10=0;

String tableName_tMysqlOutput_10 = "cadastro_org";
boolean whetherReject_tMysqlOutput_10 = false;

java.util.Calendar calendar_tMysqlOutput_10 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_10.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_10 = calendar_tMysqlOutput_10.getTime().getTime();
calendar_tMysqlOutput_10.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_10 = calendar_tMysqlOutput_10.getTime().getTime();
long date_tMysqlOutput_10;

java.sql.Connection conn_tMysqlOutput_10 = null;
	conn_tMysqlOutput_10 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_10=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_10 = conn_tMysqlOutput_10.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_10 = dbMetaData_tMysqlOutput_10.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_10 = false;
                                while(rsTable_tMysqlOutput_10.next()) {
                                    String table_tMysqlOutput_10 = rsTable_tMysqlOutput_10.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_10.equalsIgnoreCase("cadastro_org")) {
                                        whetherExist_tMysqlOutput_10 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_10.close();
                                if(!whetherExist_tMysqlOutput_10) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_10 = conn_tMysqlOutput_10.createStatement();
                                        stmtCreate_tMysqlOutput_10.execute("CREATE TABLE `" + tableName_tMysqlOutput_10 + "`(`id_org` INT(10)   not null ,`nome` VARCHAR(255)  ,primary key(`id_org`))");
                                    stmtCreate_tMysqlOutput_10.close();
                                }
	    String insertIgnore_tMysqlOutput_10 = "INSERT IGNORE INTO `" + "cadastro_org" + "` (`id_org`,`nome`) VALUES (?,?) ON DUPLICATE KEY UPDATE `nome` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_10 = conn_tMysqlOutput_10.prepareStatement(insertIgnore_tMysqlOutput_10);
	    

 



/**
 * [tMysqlOutput_10 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_15", false);
		start_Hash.put("tMysqlOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_15 = 0;
		
    	class BytesLimit65535_tMysqlOutput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_15().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_15 = 5;
        if(updateKeyCount_tMysqlOutput_15 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_15 = 0;
int nb_line_update_tMysqlOutput_15 = 0;
int nb_line_inserted_tMysqlOutput_15 = 0;
int nb_line_deleted_tMysqlOutput_15 = 0;
int nb_line_rejected_tMysqlOutput_15 = 0;

int deletedCount_tMysqlOutput_15=0;
int updatedCount_tMysqlOutput_15=0;
int insertedCount_tMysqlOutput_15=0;

int rejectedCount_tMysqlOutput_15=0;

String tableName_tMysqlOutput_15 = "cadastro_afastamento";
boolean whetherReject_tMysqlOutput_15 = false;

java.util.Calendar calendar_tMysqlOutput_15 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_15.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_15 = calendar_tMysqlOutput_15.getTime().getTime();
calendar_tMysqlOutput_15.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_15 = calendar_tMysqlOutput_15.getTime().getTime();
long date_tMysqlOutput_15;

java.sql.Connection conn_tMysqlOutput_15 = null;
	conn_tMysqlOutput_15 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_15=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_15 = conn_tMysqlOutput_15.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_15 = dbMetaData_tMysqlOutput_15.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_15 = false;
                                while(rsTable_tMysqlOutput_15.next()) {
                                    String table_tMysqlOutput_15 = rsTable_tMysqlOutput_15.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_15.equalsIgnoreCase("cadastro_afastamento")) {
                                        whetherExist_tMysqlOutput_15 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_15.close();
                                if(!whetherExist_tMysqlOutput_15) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_15 = conn_tMysqlOutput_15.createStatement();
                                        stmtCreate_tMysqlOutput_15.execute("CREATE TABLE `" + tableName_tMysqlOutput_15 + "`(`id_pessoa` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)  ,`id_cargo` VARCHAR(255)  ,`id_org` INT(10)  ,`data_inicio` DATETIME  not null ,`data_termino` DATETIME  not null ,`id_intervalo` VARCHAR(255)  ,`id_lotacao` VARCHAR(255)  ,primary key(`id_pessoa`,`matricula_reduzida`,`id_org`,`data_inicio`,`data_termino`))");
                                    stmtCreate_tMysqlOutput_15.close();
                                }
	    java.sql.PreparedStatement pstmt_tMysqlOutput_15 = conn_tMysqlOutput_15.prepareStatement("SELECT COUNT(1) FROM `" + "cadastro_afastamento" + "` WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ? AND `data_inicio` = ? AND `data_termino` = ?");
	    String insert_tMysqlOutput_15 = "INSERT INTO `" + "cadastro_afastamento" + "` (`id_pessoa`,`matricula_reduzida`,`id_cargo`,`id_org`,`data_inicio`,`data_termino`,`id_intervalo`,`id_lotacao`) VALUES (?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_15 = conn_tMysqlOutput_15.prepareStatement(insert_tMysqlOutput_15);
	    String update_tMysqlOutput_15 = "UPDATE `" + "cadastro_afastamento" + "` SET `id_pessoa` = ?,`matricula_reduzida` = ?,`id_cargo` = ?,`id_org` = ?,`data_inicio` = ?,`data_termino` = ? WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ? AND `data_inicio` = ? AND `data_termino` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_15 = conn_tMysqlOutput_15.prepareStatement(update_tMysqlOutput_15);
	    

 



/**
 * [tMysqlOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		
    	class BytesLimit65535_tMap_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_8().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	String id_pessoa;
	String id_cargo;
	String matricula_reduzida;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
out11Struct out11_tmp = new out11Struct();
out6Struct out6_tmp = new out6Struct();
out7Struct out7_tmp = new out7Struct();
out14Struct out14_tmp = new out14Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";

	
		int tos_count_tHashInput_6 = 0;
		
    	class BytesLimit65535_tHashInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_6().limitLog4jByte();


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_child_job_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row13Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row13Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row1.Id_SERVIDOR_PORTAL = next_tHashInput_6.Id_SERVIDOR_PORTAL;
	row1.NOME = next_tHashInput_6.NOME;
	row1.CPF = next_tHashInput_6.CPF;
	row1.MATRICULA = next_tHashInput_6.MATRICULA;
	row1.DESCRICAO_CARGO = next_tHashInput_6.DESCRICAO_CARGO;
	row1.CLASSE_CARGO = next_tHashInput_6.CLASSE_CARGO;
	row1.REFERENCIA_CARGO = next_tHashInput_6.REFERENCIA_CARGO;
	row1.PADRAO_CARGO = next_tHashInput_6.PADRAO_CARGO;
	row1.NIVEL_CARGO = next_tHashInput_6.NIVEL_CARGO;
	row1.SIGLA_FUNCAO = next_tHashInput_6.SIGLA_FUNCAO;
	row1.NIVEL_FUNCAO = next_tHashInput_6.NIVEL_FUNCAO;
	row1.FUNCAO = next_tHashInput_6.FUNCAO;
	row1.CODIGO_ATIVIDADE = next_tHashInput_6.CODIGO_ATIVIDADE;
	row1.ATIVIDADE = next_tHashInput_6.ATIVIDADE;
	row1.COD_ORG_LOTACAO = next_tHashInput_6.COD_ORG_LOTACAO;
	row1.ORG_LOTACAO = next_tHashInput_6.ORG_LOTACAO;
	row1.COD_ORG_EXERCICIO = next_tHashInput_6.COD_ORG_EXERCICIO;
	row1.TIPO_VINCULO = next_tHashInput_6.TIPO_VINCULO;
	row1.SITUACAO_VINCULO = next_tHashInput_6.SITUACAO_VINCULO;
	row1.DATA_INICIO_AFASTAMENTO = next_tHashInput_6.DATA_INICIO_AFASTAMENTO;
	row1.DATA_TERMINO_AFASTAMENTO = next_tHashInput_6.DATA_TERMINO_AFASTAMENTO;
	row1.REGIME_JURIDICO = next_tHashInput_6.REGIME_JURIDICO;
	row1.JORNADA_DE_TRABALHO = next_tHashInput_6.JORNADA_DE_TRABALHO;
	row1.DATA_INGRESSO_CARGOFUNCAO = next_tHashInput_6.DATA_INGRESSO_CARGOFUNCAO;
	row1.DATA_INGRESSO_ORGAO = next_tHashInput_6.DATA_INGRESSO_ORGAO;
 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

          row3 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row1.TIPO_VINCULO == null? false : row1.TIPO_VINCULO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(2))) == 0)
                           , "TIPO_VINCULO.compareTo(2) == 0 failed");
		 	
      ope_tFilterRow_1.matches((// code sample : use row1 to define the condition.
// row1.columnName1.equals("foo") ||!(row1.columnName2.equals("bar"))
// replace the following expression by your own filter condition
(row1.SITUACAO_VINCULO.equals("CONT.PROF.SUBSTITUTO") || row1.SITUACAO_VINCULO.equals("ATIVO PERMANENTE")) && row1.COD_ORG_LOTACAO.equals(row1.COD_ORG_EXERCICIO)
), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row3 == null){ 
                row3 = new row3Struct();
              }
               row3.Id_SERVIDOR_PORTAL = row1.Id_SERVIDOR_PORTAL;
               row3.NOME = row1.NOME;
               row3.CPF = row1.CPF;
               row3.MATRICULA = row1.MATRICULA;
               row3.DESCRICAO_CARGO = row1.DESCRICAO_CARGO;
               row3.CLASSE_CARGO = row1.CLASSE_CARGO;
               row3.REFERENCIA_CARGO = row1.REFERENCIA_CARGO;
               row3.PADRAO_CARGO = row1.PADRAO_CARGO;
               row3.NIVEL_CARGO = row1.NIVEL_CARGO;
               row3.SIGLA_FUNCAO = row1.SIGLA_FUNCAO;
               row3.NIVEL_FUNCAO = row1.NIVEL_FUNCAO;
               row3.FUNCAO = row1.FUNCAO;
               row3.CODIGO_ATIVIDADE = row1.CODIGO_ATIVIDADE;
               row3.ATIVIDADE = row1.ATIVIDADE;
               row3.COD_ORG_LOTACAO = row1.COD_ORG_LOTACAO;
               row3.ORG_LOTACAO = row1.ORG_LOTACAO;
               row3.COD_ORG_EXERCICIO = row1.COD_ORG_EXERCICIO;
               row3.TIPO_VINCULO = row1.TIPO_VINCULO;
               row3.SITUACAO_VINCULO = row1.SITUACAO_VINCULO;
               row3.DATA_INICIO_AFASTAMENTO = row1.DATA_INICIO_AFASTAMENTO;
               row3.DATA_TERMINO_AFASTAMENTO = row1.DATA_TERMINO_AFASTAMENTO;
               row3.REGIME_JURIDICO = row1.REGIME_JURIDICO;
               row3.JORNADA_DE_TRABALHO = row1.JORNADA_DE_TRABALHO;
               row3.DATA_INGRESSO_CARGOFUNCAO = row1.DATA_INGRESSO_CARGOFUNCAO;
               row3.DATA_INGRESSO_ORGAO = row1.DATA_INGRESSO_ORGAO;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.id_pessoa = row3.CPF.substring(4, 11) + "-" + row3.NOME ;
Var.id_cargo = row3.DESCRICAO_CARGO+"-"+row3.CLASSE_CARGO ;
Var.matricula_reduzida = row3.MATRICULA.substring(0, 3) ;// ###############################
        // ###############################
        // # Output tables

out9 = null;
out11 = null;
out6 = null;
out7 = null;
out14 = null;


// # Output table : 'out9'
out9_tmp.id_pessoa = Var.id_pessoa ;
out9_tmp.id_cargo = Var.id_cargo ;
out9_tmp.matricula_reduzida = Var.matricula_reduzida ;
out9_tmp.id_org = row3.COD_ORG_LOTACAO ;
out9_tmp.jornada_trabalho = row3.JORNADA_DE_TRABALHO ;
out9_tmp.regime_juridico = row3.REGIME_JURIDICO ;
out9_tmp.data_ingresso_cargo = (row3.DATA_INGRESSO_CARGOFUNCAO == null || row3.DATA_INGRESSO_CARGOFUNCAO.isEmpty())?null:
new SimpleDateFormat("dd/MM/yyyy").parse(
row3.DATA_INGRESSO_CARGOFUNCAO) ;
out9_tmp.data_ingresso_orgao = (row3.DATA_INGRESSO_ORGAO == null || row3.DATA_INGRESSO_ORGAO.isEmpty())?null:
new SimpleDateFormat("dd/MM/yyyy").parse(
row3.DATA_INGRESSO_ORGAO) ;
out9_tmp.data_saida = null;
out9_tmp.data_arquivo = new SimpleDateFormat("yyyyMMdd").parse(
((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).substring(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).lastIndexOf("/") + 1).substring(0, 8)) ;
out9_tmp.id_intervalo = null;
out9_tmp.carreira = (row3.PADRAO_CARGO==null || row3.PADRAO_CARGO.trim().equals(""))?"DOCENTE":"TAE" ;
out9 = out9_tmp;

// # Output table : 'out11'
out11_tmp.id_pessoa = Var.id_pessoa ;
out11_tmp.nome = row3.NOME ;
out11_tmp.cpf_reduzido = row3.CPF.substring(4, 11);
out11 = out11_tmp;

// # Output table : 'out6'
out6_tmp.id_cargo = Var.id_cargo ;
out6_tmp.descricao = row3.DESCRICAO_CARGO ;
out6_tmp.classe = row3.CLASSE_CARGO ;
out6 = out6_tmp;

// # Output table : 'out7'
out7_tmp.id_org = row3.COD_ORG_LOTACAO ;
out7_tmp.nome = row3.ORG_LOTACAO ;
out7 = out7_tmp;

// # Output table : 'out14'
// # Filter conditions 
if( 

!(row3.DATA_TERMINO_AFASTAMENTO.equals("Não informada") || row3.DATA_INICIO_AFASTAMENTO.equals("Não informada"))

 ) {
out14_tmp.id_pessoa = Var.id_pessoa ;
out14_tmp.matricula_reduzida = Var.matricula_reduzida ;
out14_tmp.id_cargo = Var.id_cargo ;
out14_tmp.id_org = row3.COD_ORG_LOTACAO ;
out14_tmp.data_inicio = TalendDate.parseDate("dd/MM/yyyy",row3.DATA_INICIO_AFASTAMENTO) ;
out14_tmp.data_termino = TalendDate.parseDate("dd/MM/yyyy",row3.DATA_TERMINO_AFASTAMENTO) ;
out14_tmp.id_intervalo = null;
out14_tmp.id_lotacao = Var.id_pessoa +"-"+  Var.matricula_reduzida + "-" + row3.COD_ORG_LOTACAO ;
out14 = out14_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tMysqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

			//out9
			//out9


			
				if(execStat){
					runStat.updateStatOnConnection("out9"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_5 = false;
                    if(out9.id_pessoa == null) {
pstmt_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_5.setString(1, out9.id_pessoa);
}

                    if(out9.matricula_reduzida == null) {
pstmt_tMysqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_5.setString(2, out9.matricula_reduzida);
}

                    pstmt_tMysqlOutput_5.setInt(3, out9.id_org);


            java.sql.ResultSet rs_tMysqlOutput_5 = pstmt_tMysqlOutput_5.executeQuery();
            int checkCount_tMysqlOutput_5 = -1;
            while(rs_tMysqlOutput_5.next()) {
                checkCount_tMysqlOutput_5 = rs_tMysqlOutput_5.getInt(1);
            }
            if(checkCount_tMysqlOutput_5 > 0) {
                        if(out9.id_pessoa == null) {
pstmtUpdate_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(1, out9.id_pessoa);
}

                        if(out9.id_cargo == null) {
pstmtUpdate_tMysqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(2, out9.id_cargo);
}

                        if(out9.matricula_reduzida == null) {
pstmtUpdate_tMysqlOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(3, out9.matricula_reduzida);
}

                        pstmtUpdate_tMysqlOutput_5.setInt(4, out9.id_org);

                        if(out9.jornada_trabalho == null) {
pstmtUpdate_tMysqlOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(5, out9.jornada_trabalho);
}

                        if(out9.regime_juridico == null) {
pstmtUpdate_tMysqlOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(6, out9.regime_juridico);
}

                        if(out9.data_arquivo != null) {
date_tMysqlOutput_5 = out9.data_arquivo.getTime();
if(date_tMysqlOutput_5 < year1_tMysqlOutput_5 || date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
pstmtUpdate_tMysqlOutput_5.setString(7, "0000-00-00 00:00:00");
} else {pstmtUpdate_tMysqlOutput_5.setTimestamp(7, new java.sql.Timestamp(date_tMysqlOutput_5));
}
} else {
pstmtUpdate_tMysqlOutput_5.setNull(7, java.sql.Types.DATE);
}

                        if(out9.id_pessoa == null) {
pstmtUpdate_tMysqlOutput_5.setNull(8 + count_tMysqlOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(8 + count_tMysqlOutput_5, out9.id_pessoa);
}

                        if(out9.matricula_reduzida == null) {
pstmtUpdate_tMysqlOutput_5.setNull(9 + count_tMysqlOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(9 + count_tMysqlOutput_5, out9.matricula_reduzida);
}

                        pstmtUpdate_tMysqlOutput_5.setInt(10 + count_tMysqlOutput_5, out9.id_org);

                try {
                    updatedCount_tMysqlOutput_5 = updatedCount_tMysqlOutput_5 + pstmtUpdate_tMysqlOutput_5.executeUpdate();
                    nb_line_tMysqlOutput_5++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_5 = true;
                        nb_line_tMysqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(out9.id_pessoa == null) {
pstmtInsert_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(1, out9.id_pessoa);
}

                        if(out9.id_cargo == null) {
pstmtInsert_tMysqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(2, out9.id_cargo);
}

                        if(out9.matricula_reduzida == null) {
pstmtInsert_tMysqlOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(3, out9.matricula_reduzida);
}

                        pstmtInsert_tMysqlOutput_5.setInt(4, out9.id_org);

                        if(out9.jornada_trabalho == null) {
pstmtInsert_tMysqlOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(5, out9.jornada_trabalho);
}

                        if(out9.regime_juridico == null) {
pstmtInsert_tMysqlOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(6, out9.regime_juridico);
}

                        if(out9.data_ingresso_cargo != null) {
date_tMysqlOutput_5 = out9.data_ingresso_cargo.getTime();
if(date_tMysqlOutput_5 < year1_tMysqlOutput_5 || date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
pstmtInsert_tMysqlOutput_5.setString(7, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_5.setTimestamp(7, new java.sql.Timestamp(date_tMysqlOutput_5));
}
} else {
pstmtInsert_tMysqlOutput_5.setNull(7, java.sql.Types.DATE);
}

                        if(out9.data_ingresso_orgao != null) {
date_tMysqlOutput_5 = out9.data_ingresso_orgao.getTime();
if(date_tMysqlOutput_5 < year1_tMysqlOutput_5 || date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
pstmtInsert_tMysqlOutput_5.setString(8, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_5.setTimestamp(8, new java.sql.Timestamp(date_tMysqlOutput_5));
}
} else {
pstmtInsert_tMysqlOutput_5.setNull(8, java.sql.Types.DATE);
}

                        if(out9.data_saida != null) {
date_tMysqlOutput_5 = out9.data_saida.getTime();
if(date_tMysqlOutput_5 < year1_tMysqlOutput_5 || date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
pstmtInsert_tMysqlOutput_5.setString(9, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_5.setTimestamp(9, new java.sql.Timestamp(date_tMysqlOutput_5));
}
} else {
pstmtInsert_tMysqlOutput_5.setNull(9, java.sql.Types.DATE);
}

                        if(out9.data_arquivo != null) {
date_tMysqlOutput_5 = out9.data_arquivo.getTime();
if(date_tMysqlOutput_5 < year1_tMysqlOutput_5 || date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
pstmtInsert_tMysqlOutput_5.setString(10, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_5.setTimestamp(10, new java.sql.Timestamp(date_tMysqlOutput_5));
}
} else {
pstmtInsert_tMysqlOutput_5.setNull(10, java.sql.Types.DATE);
}

                        if(out9.carreira == null) {
pstmtInsert_tMysqlOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(11, out9.carreira);
}

                try {
                    insertedCount_tMysqlOutput_5 = insertedCount_tMysqlOutput_5 + pstmtInsert_tMysqlOutput_5.executeUpdate();
                    nb_line_tMysqlOutput_5++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_5 = true;
                        nb_line_tMysqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tMysqlOutput_5++;

/**
 * [tMysqlOutput_5 main ] stop
 */

} // End of branch "out9"




// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tMysqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

			//out11
			//out11


			
				if(execStat){
					runStat.updateStatOnConnection("out11"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_3 = false;
                    if(out11.id_pessoa == null) {
pstmt_tMysqlOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(1, out11.id_pessoa);
}

                    if(out11.nome == null) {
pstmt_tMysqlOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(2, out11.nome);
}

                    if(out11.cpf_reduzido == null) {
pstmt_tMysqlOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(3, out11.cpf_reduzido);
}

                    if(out11.nome == null) {
pstmt_tMysqlOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(4, out11.nome);
}

                    if(out11.cpf_reduzido == null) {
pstmt_tMysqlOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(5, out11.cpf_reduzido);
}

            int count_on_duplicate_key_tMysqlOutput_3 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_3 = pstmt_tMysqlOutput_3.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_3 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_3 == 1) {
                insertedCount_tMysqlOutput_3 += count_on_duplicate_key_tMysqlOutput_3;
            } else {
                insertedCount_tMysqlOutput_3 += 1;
                updatedCount_tMysqlOutput_3 += count_on_duplicate_key_tMysqlOutput_3 - 1;
            }

 


	tos_count_tMysqlOutput_3++;

/**
 * [tMysqlOutput_3 main ] stop
 */

} // End of branch "out11"




// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tMysqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

			//out6
			//out6


			
				if(execStat){
					runStat.updateStatOnConnection("out6"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_4 = false;
                    if(out6.id_cargo == null) {
pstmt_tMysqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(1, out6.id_cargo);
}

                    if(out6.descricao == null) {
pstmt_tMysqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(2, out6.descricao);
}

                    if(out6.classe == null) {
pstmt_tMysqlOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(3, out6.classe);
}

                    if(out6.descricao == null) {
pstmt_tMysqlOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(4, out6.descricao);
}

                    if(out6.classe == null) {
pstmt_tMysqlOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(5, out6.classe);
}

            int count_on_duplicate_key_tMysqlOutput_4 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_4 = pstmt_tMysqlOutput_4.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_4 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_4 == 1) {
                insertedCount_tMysqlOutput_4 += count_on_duplicate_key_tMysqlOutput_4;
            } else {
                insertedCount_tMysqlOutput_4 += 1;
                updatedCount_tMysqlOutput_4 += count_on_duplicate_key_tMysqlOutput_4 - 1;
            }

 


	tos_count_tMysqlOutput_4++;

/**
 * [tMysqlOutput_4 main ] stop
 */

} // End of branch "out6"




// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tMysqlOutput_10 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_10";

	

			//out7
			//out7


			
				if(execStat){
					runStat.updateStatOnConnection("out7"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_10 = false;
                    pstmt_tMysqlOutput_10.setInt(1, out7.id_org);

                    if(out7.nome == null) {
pstmt_tMysqlOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_10.setString(2, out7.nome);
}

                    if(out7.nome == null) {
pstmt_tMysqlOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_10.setString(3, out7.nome);
}

            int count_on_duplicate_key_tMysqlOutput_10 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_10 = pstmt_tMysqlOutput_10.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_10 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_10 == 1) {
                insertedCount_tMysqlOutput_10 += count_on_duplicate_key_tMysqlOutput_10;
            } else {
                insertedCount_tMysqlOutput_10 += 1;
                updatedCount_tMysqlOutput_10 += count_on_duplicate_key_tMysqlOutput_10 - 1;
            }

 


	tos_count_tMysqlOutput_10++;

/**
 * [tMysqlOutput_10 main ] stop
 */

} // End of branch "out7"




// Start of branch "out14"
if(out14 != null) { 



	
	/**
	 * [tMysqlOutput_15 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_15";

	

			//out14
			//out14


			
				if(execStat){
					runStat.updateStatOnConnection("out14"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_15 = false;
                    if(out14.id_pessoa == null) {
pstmt_tMysqlOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_15.setString(1, out14.id_pessoa);
}

                    if(out14.matricula_reduzida == null) {
pstmt_tMysqlOutput_15.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_15.setString(2, out14.matricula_reduzida);
}

                    if(out14.id_org == null) {
pstmt_tMysqlOutput_15.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_15.setInt(3, out14.id_org);
}

                    if(out14.data_inicio != null) {
date_tMysqlOutput_15 = out14.data_inicio.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmt_tMysqlOutput_15.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_15.setTimestamp(4, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmt_tMysqlOutput_15.setNull(4, java.sql.Types.DATE);
}

                    if(out14.data_termino != null) {
date_tMysqlOutput_15 = out14.data_termino.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmt_tMysqlOutput_15.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_15.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmt_tMysqlOutput_15.setNull(5, java.sql.Types.DATE);
}


            java.sql.ResultSet rs_tMysqlOutput_15 = pstmt_tMysqlOutput_15.executeQuery();
            int checkCount_tMysqlOutput_15 = -1;
            while(rs_tMysqlOutput_15.next()) {
                checkCount_tMysqlOutput_15 = rs_tMysqlOutput_15.getInt(1);
            }
            if(checkCount_tMysqlOutput_15 > 0) {
                        if(out14.id_pessoa == null) {
pstmtUpdate_tMysqlOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_15.setString(1, out14.id_pessoa);
}

                        if(out14.matricula_reduzida == null) {
pstmtUpdate_tMysqlOutput_15.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_15.setString(2, out14.matricula_reduzida);
}

                        if(out14.id_cargo == null) {
pstmtUpdate_tMysqlOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_15.setString(3, out14.id_cargo);
}

                        if(out14.id_org == null) {
pstmtUpdate_tMysqlOutput_15.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_15.setInt(4, out14.id_org);
}

                        if(out14.data_inicio != null) {
date_tMysqlOutput_15 = out14.data_inicio.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmtUpdate_tMysqlOutput_15.setString(5, "0000-00-00 00:00:00");
} else {pstmtUpdate_tMysqlOutput_15.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmtUpdate_tMysqlOutput_15.setNull(5, java.sql.Types.DATE);
}

                        if(out14.data_termino != null) {
date_tMysqlOutput_15 = out14.data_termino.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmtUpdate_tMysqlOutput_15.setString(6, "0000-00-00 00:00:00");
} else {pstmtUpdate_tMysqlOutput_15.setTimestamp(6, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmtUpdate_tMysqlOutput_15.setNull(6, java.sql.Types.DATE);
}

                        if(out14.id_pessoa == null) {
pstmtUpdate_tMysqlOutput_15.setNull(7 + count_tMysqlOutput_15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_15.setString(7 + count_tMysqlOutput_15, out14.id_pessoa);
}

                        if(out14.matricula_reduzida == null) {
pstmtUpdate_tMysqlOutput_15.setNull(8 + count_tMysqlOutput_15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_15.setString(8 + count_tMysqlOutput_15, out14.matricula_reduzida);
}

                        if(out14.id_org == null) {
pstmtUpdate_tMysqlOutput_15.setNull(9 + count_tMysqlOutput_15, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_15.setInt(9 + count_tMysqlOutput_15, out14.id_org);
}

                        if(out14.data_inicio != null) {
pstmtUpdate_tMysqlOutput_15.setTimestamp(10 + count_tMysqlOutput_15, new java.sql.Timestamp(out14.data_inicio.getTime()));
} else {
pstmtUpdate_tMysqlOutput_15.setNull(10 + count_tMysqlOutput_15, java.sql.Types.TIMESTAMP);
}

                        if(out14.data_termino != null) {
pstmtUpdate_tMysqlOutput_15.setTimestamp(11 + count_tMysqlOutput_15, new java.sql.Timestamp(out14.data_termino.getTime()));
} else {
pstmtUpdate_tMysqlOutput_15.setNull(11 + count_tMysqlOutput_15, java.sql.Types.TIMESTAMP);
}

                try {
                    updatedCount_tMysqlOutput_15 = updatedCount_tMysqlOutput_15 + pstmtUpdate_tMysqlOutput_15.executeUpdate();
                    nb_line_tMysqlOutput_15++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_15 = true;
                        nb_line_tMysqlOutput_15++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(out14.id_pessoa == null) {
pstmtInsert_tMysqlOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_15.setString(1, out14.id_pessoa);
}

                        if(out14.matricula_reduzida == null) {
pstmtInsert_tMysqlOutput_15.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_15.setString(2, out14.matricula_reduzida);
}

                        if(out14.id_cargo == null) {
pstmtInsert_tMysqlOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_15.setString(3, out14.id_cargo);
}

                        if(out14.id_org == null) {
pstmtInsert_tMysqlOutput_15.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_15.setInt(4, out14.id_org);
}

                        if(out14.data_inicio != null) {
date_tMysqlOutput_15 = out14.data_inicio.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmtInsert_tMysqlOutput_15.setString(5, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_15.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmtInsert_tMysqlOutput_15.setNull(5, java.sql.Types.DATE);
}

                        if(out14.data_termino != null) {
date_tMysqlOutput_15 = out14.data_termino.getTime();
if(date_tMysqlOutput_15 < year1_tMysqlOutput_15 || date_tMysqlOutput_15 >= year10000_tMysqlOutput_15) {
pstmtInsert_tMysqlOutput_15.setString(6, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_15.setTimestamp(6, new java.sql.Timestamp(date_tMysqlOutput_15));
}
} else {
pstmtInsert_tMysqlOutput_15.setNull(6, java.sql.Types.DATE);
}

                        if(out14.id_intervalo == null) {
pstmtInsert_tMysqlOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_15.setString(7, out14.id_intervalo);
}

                        if(out14.id_lotacao == null) {
pstmtInsert_tMysqlOutput_15.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_15.setString(8, out14.id_lotacao);
}

                try {
                    insertedCount_tMysqlOutput_15 = insertedCount_tMysqlOutput_15 + pstmtInsert_tMysqlOutput_15.executeUpdate();
                    nb_line_tMysqlOutput_15++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_15 = true;
                        nb_line_tMysqlOutput_15++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tMysqlOutput_15++;

/**
 * [tMysqlOutput_15 main ] stop
 */

} // End of branch "out14"





} // End of branch "row3"







	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_child_job_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMysqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



        if(pstmtUpdate_tMysqlOutput_5 != null){

            pstmtUpdate_tMysqlOutput_5.close();

        }
        if(pstmtInsert_tMysqlOutput_5 != null){

            pstmtInsert_tMysqlOutput_5.close();

        }
        if(pstmt_tMysqlOutput_5 != null) {

            pstmt_tMysqlOutput_5.close();

        }


	nb_line_deleted_tMysqlOutput_5=nb_line_deleted_tMysqlOutput_5+ deletedCount_tMysqlOutput_5;
	nb_line_update_tMysqlOutput_5=nb_line_update_tMysqlOutput_5 + updatedCount_tMysqlOutput_5;
	nb_line_inserted_tMysqlOutput_5=nb_line_inserted_tMysqlOutput_5 + insertedCount_tMysqlOutput_5;
	nb_line_rejected_tMysqlOutput_5=nb_line_rejected_tMysqlOutput_5 + rejectedCount_tMysqlOutput_5;
	
        globalMap.put("tMysqlOutput_5_NB_LINE",nb_line_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_5);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_5", true);
end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());




/**
 * [tMysqlOutput_5 end ] stop
 */




	
	/**
	 * [tMysqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



	

        if(pstmt_tMysqlOutput_3 != null) {
			
				pstmt_tMysqlOutput_3.close();
			
        }


	nb_line_deleted_tMysqlOutput_3=nb_line_deleted_tMysqlOutput_3+ deletedCount_tMysqlOutput_3;
	nb_line_update_tMysqlOutput_3=nb_line_update_tMysqlOutput_3 + updatedCount_tMysqlOutput_3;
	nb_line_inserted_tMysqlOutput_3=nb_line_inserted_tMysqlOutput_3 + insertedCount_tMysqlOutput_3;
	nb_line_rejected_tMysqlOutput_3=nb_line_rejected_tMysqlOutput_3 + rejectedCount_tMysqlOutput_3;
	
        globalMap.put("tMysqlOutput_3_NB_LINE",nb_line_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_3);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_3", true);
end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());




/**
 * [tMysqlOutput_3 end ] stop
 */




	
	/**
	 * [tMysqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



	

        if(pstmt_tMysqlOutput_4 != null) {
			
				pstmt_tMysqlOutput_4.close();
			
        }


	nb_line_deleted_tMysqlOutput_4=nb_line_deleted_tMysqlOutput_4+ deletedCount_tMysqlOutput_4;
	nb_line_update_tMysqlOutput_4=nb_line_update_tMysqlOutput_4 + updatedCount_tMysqlOutput_4;
	nb_line_inserted_tMysqlOutput_4=nb_line_inserted_tMysqlOutput_4 + insertedCount_tMysqlOutput_4;
	nb_line_rejected_tMysqlOutput_4=nb_line_rejected_tMysqlOutput_4 + rejectedCount_tMysqlOutput_4;
	
        globalMap.put("tMysqlOutput_4_NB_LINE",nb_line_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_4);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_4", true);
end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());




/**
 * [tMysqlOutput_4 end ] stop
 */




	
	/**
	 * [tMysqlOutput_10 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_10";

	



	

        if(pstmt_tMysqlOutput_10 != null) {
			
				pstmt_tMysqlOutput_10.close();
			
        }


	nb_line_deleted_tMysqlOutput_10=nb_line_deleted_tMysqlOutput_10+ deletedCount_tMysqlOutput_10;
	nb_line_update_tMysqlOutput_10=nb_line_update_tMysqlOutput_10 + updatedCount_tMysqlOutput_10;
	nb_line_inserted_tMysqlOutput_10=nb_line_inserted_tMysqlOutput_10 + insertedCount_tMysqlOutput_10;
	nb_line_rejected_tMysqlOutput_10=nb_line_rejected_tMysqlOutput_10 + rejectedCount_tMysqlOutput_10;
	
        globalMap.put("tMysqlOutput_10_NB_LINE",nb_line_tMysqlOutput_10);
        globalMap.put("tMysqlOutput_10_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_10);
        globalMap.put("tMysqlOutput_10_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_10);
        globalMap.put("tMysqlOutput_10_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_10);
        globalMap.put("tMysqlOutput_10_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_10);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_10", true);
end_Hash.put("tMysqlOutput_10", System.currentTimeMillis());




/**
 * [tMysqlOutput_10 end ] stop
 */




	
	/**
	 * [tMysqlOutput_15 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_15";

	



        if(pstmtUpdate_tMysqlOutput_15 != null){

            pstmtUpdate_tMysqlOutput_15.close();

        }
        if(pstmtInsert_tMysqlOutput_15 != null){

            pstmtInsert_tMysqlOutput_15.close();

        }
        if(pstmt_tMysqlOutput_15 != null) {

            pstmt_tMysqlOutput_15.close();

        }


	nb_line_deleted_tMysqlOutput_15=nb_line_deleted_tMysqlOutput_15+ deletedCount_tMysqlOutput_15;
	nb_line_update_tMysqlOutput_15=nb_line_update_tMysqlOutput_15 + updatedCount_tMysqlOutput_15;
	nb_line_inserted_tMysqlOutput_15=nb_line_inserted_tMysqlOutput_15 + insertedCount_tMysqlOutput_15;
	nb_line_rejected_tMysqlOutput_15=nb_line_rejected_tMysqlOutput_15 + rejectedCount_tMysqlOutput_15;
	
        globalMap.put("tMysqlOutput_15_NB_LINE",nb_line_tMysqlOutput_15);
        globalMap.put("tMysqlOutput_15_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_15);
        globalMap.put("tMysqlOutput_15_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_15);
        globalMap.put("tMysqlOutput_15_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_15);
        globalMap.put("tMysqlOutput_15_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_15);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_15", true);
end_Hash.put("tMysqlOutput_15", System.currentTimeMillis());




/**
 * [tMysqlOutput_15 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tMysqlCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



	

 



/**
 * [tMysqlOutput_5 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



	

 



/**
 * [tMysqlOutput_3 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



	

 



/**
 * [tMysqlOutput_4 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_10";

	



	

 



/**
 * [tMysqlOutput_10 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_15";

	



	

 



/**
 * [tMysqlOutput_15 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMysqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_1", false);
		start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_1";

	
		int tos_count_tMysqlCommit_1 = 0;
		
    	class BytesLimit65535_tMysqlCommit_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_1().limitLog4jByte();

 



/**
 * [tMysqlCommit_1 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_1";

	

	java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
	
			
			conn_tMysqlCommit_1.commit();
			
	
}

 


	tos_count_tMysqlCommit_1++;

/**
 * [tMysqlCommit_1 main ] stop
 */
	
	/**
	 * [tMysqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_1";

	

 

ok_Hash.put("tMysqlCommit_1", true);
end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());




/**
 * [tMysqlCommit_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlCommit_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tMysqlInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_1";

	

 



/**
 * [tMysqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String jornada_trabalho;

				public String getJornada_trabalho () {
					return this.jornada_trabalho;
				}
				
			    public String regime_juridico;

				public String getRegime_juridico () {
					return this.regime_juridico;
				}
				
			    public java.util.Date data_ingresso_cargo;

				public java.util.Date getData_ingresso_cargo () {
					return this.data_ingresso_cargo;
				}
				
			    public java.util.Date data_ingresso_orgao;

				public java.util.Date getData_ingresso_orgao () {
					return this.data_ingresso_orgao;
				}
				
			    public java.util.Date data_saida;

				public java.util.Date getData_saida () {
					return this.data_saida;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String carreira;

				public String getCarreira () {
					return this.carreira;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
							result = prime * result + (int) this.id_org;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_cargo = this.id_cargo;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_org = this.id_org;
	            other.jornada_trabalho = this.jornada_trabalho;
	            other.regime_juridico = this.regime_juridico;
	            other.data_ingresso_cargo = this.data_ingresso_cargo;
	            other.data_ingresso_orgao = this.data_ingresso_orgao;
	            other.data_saida = this.data_saida;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.carreira = this.carreira;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_cargo = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.jornada_trabalho = readString(dis);
					
					this.regime_juridico = readString(dis);
					
					this.data_ingresso_cargo = readDate(dis);
					
					this.data_ingresso_orgao = readDate(dis);
					
					this.data_saida = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.carreira = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.jornada_trabalho,dos);
					
					// String
				
						writeString(this.regime_juridico,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_cargo,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_orgao,dos);
					
					// java.util.Date
				
						writeDate(this.data_saida,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.carreira,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",jornada_trabalho="+jornada_trabalho);
		sb.append(",regime_juridico="+regime_juridico);
		sb.append(",data_ingresso_cargo="+String.valueOf(data_ingresso_cargo));
		sb.append(",data_ingresso_orgao="+String.valueOf(data_ingresso_orgao));
		sb.append(",data_saida="+String.valueOf(data_saida));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",carreira="+carreira);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String jornada_trabalho;

				public String getJornada_trabalho () {
					return this.jornada_trabalho;
				}
				
			    public String regime_juridico;

				public String getRegime_juridico () {
					return this.regime_juridico;
				}
				
			    public java.util.Date data_ingresso_cargo;

				public java.util.Date getData_ingresso_cargo () {
					return this.data_ingresso_cargo;
				}
				
			    public java.util.Date data_ingresso_orgao;

				public java.util.Date getData_ingresso_orgao () {
					return this.data_ingresso_orgao;
				}
				
			    public java.util.Date data_saida;

				public java.util.Date getData_saida () {
					return this.data_saida;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String carreira;

				public String getCarreira () {
					return this.carreira;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_cargo = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.jornada_trabalho = readString(dis);
					
					this.regime_juridico = readString(dis);
					
					this.data_ingresso_cargo = readDate(dis);
					
					this.data_ingresso_orgao = readDate(dis);
					
					this.data_saida = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.carreira = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.jornada_trabalho,dos);
					
					// String
				
						writeString(this.regime_juridico,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_cargo,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_orgao,dos);
					
					// java.util.Date
				
						writeDate(this.data_saida,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.carreira,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",jornada_trabalho="+jornada_trabalho);
		sb.append(",regime_juridico="+regime_juridico);
		sb.append(",data_ingresso_cargo="+String.valueOf(data_ingresso_cargo));
		sb.append(",data_ingresso_orgao="+String.valueOf(data_ingresso_orgao));
		sb.append(",data_saida="+String.valueOf(data_saida));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",carreira="+carreira);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tMysqlOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_8", false);
		start_Hash.put("tMysqlOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_8 = 0;
		
    	class BytesLimit65535_tMysqlOutput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_8().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_8 = 3;
        if(updateKeyCount_tMysqlOutput_8 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_8 = 0;
int nb_line_update_tMysqlOutput_8 = 0;
int nb_line_inserted_tMysqlOutput_8 = 0;
int nb_line_deleted_tMysqlOutput_8 = 0;
int nb_line_rejected_tMysqlOutput_8 = 0;

int deletedCount_tMysqlOutput_8=0;
int updatedCount_tMysqlOutput_8=0;
int insertedCount_tMysqlOutput_8=0;

int rejectedCount_tMysqlOutput_8=0;

String tableName_tMysqlOutput_8 = "cadastro_servidor_lotacao";
boolean whetherReject_tMysqlOutput_8 = false;

java.util.Calendar calendar_tMysqlOutput_8 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_8.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_8 = calendar_tMysqlOutput_8.getTime().getTime();
calendar_tMysqlOutput_8.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_8 = calendar_tMysqlOutput_8.getTime().getTime();
long date_tMysqlOutput_8;

java.sql.Connection conn_tMysqlOutput_8 = null;
	conn_tMysqlOutput_8 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	
   int batchSize_tMysqlOutput_8 = 10000;
   int batchSizeCounter_tMysqlOutput_8=0;

int count_tMysqlOutput_8=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_8 = conn_tMysqlOutput_8.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_8 = dbMetaData_tMysqlOutput_8.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_8 = false;
                                while(rsTable_tMysqlOutput_8.next()) {
                                    String table_tMysqlOutput_8 = rsTable_tMysqlOutput_8.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_8.equalsIgnoreCase("cadastro_servidor_lotacao")) {
                                        whetherExist_tMysqlOutput_8 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_8.close();
                                if(!whetherExist_tMysqlOutput_8) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_8 = conn_tMysqlOutput_8.createStatement();
                                        stmtCreate_tMysqlOutput_8.execute("CREATE TABLE `" + tableName_tMysqlOutput_8 + "`(`id_pessoa` VARCHAR(255)   not null ,`id_cargo` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)   not null ,`id_org` INT(10)   not null ,`jornada_trabalho` VARCHAR(255)  ,`regime_juridico` VARCHAR(255)  ,`data_ingresso_cargo` DATE ,`data_ingresso_orgao` DATE ,`data_saida` DATE ,`data_arquivo` DATE ,`id_intervalo` VARCHAR(255)  ,`carreira` VARCHAR(255)  ,primary key(`id_pessoa`,`matricula_reduzida`,`id_org`))");
                                    stmtCreate_tMysqlOutput_8.close();
                                }
	    String update_tMysqlOutput_8 = "UPDATE `" + "cadastro_servidor_lotacao" + "` SET `id_pessoa` = ?,`matricula_reduzida` = ?,`id_org` = ?,`data_saida` = ? WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_8 = conn_tMysqlOutput_8.prepareStatement(update_tMysqlOutput_8);
	    

 



/**
 * [tMysqlOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
		        conn_tMysqlInput_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n  `cadastro_servidor_lotacao`.`id_pessoa`, \n  `cadastro_servidor_lotacao`.`id_cargo`, \n  `cadastro_servidor_lotacao`.`matricula_reduzida`, \n  `cadastro_servidor_lotacao`.`id_org`, \n  `cadastro_servidor_lotacao`.`jornada_trabalho`, \n  `cadastro_servidor_lotacao`.`regime_juridico`, \n  `cadastro_servidor_lotacao`.`data_ingresso_cargo`, \n  `cadastro_servidor_lotacao`.`data_ingresso_orgao`, \n  `cadastro_servidor_lotacao`.`data_saida`, \n  `cadastro_servidor_lotacao`.`data_arquivo`, \n  `cadastro_servidor_lotacao`.`id_intervalo`, \n  `cadastro_servidor_lotacao`.`carreira`\nFROM `cadastro_servidor_lotacao`\nWHERE `cadastro_servidor_lotacao`.`data_saida` IS NULL";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row11.id_pessoa = null;
							} else {
	                         		
        	row11.id_pessoa = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row11.id_cargo = null;
							} else {
	                         		
        	row11.id_cargo = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row11.matricula_reduzida = null;
							} else {
	                         		
        	row11.matricula_reduzida = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row11.id_org = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(4) != null) {
                row11.id_org = rs_tMysqlInput_1.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row11.jornada_trabalho = null;
							} else {
	                         		
        	row11.jornada_trabalho = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row11.regime_juridico = null;
							} else {
	                         		
        	row11.regime_juridico = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row11.data_ingresso_cargo = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(7) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row11.data_ingresso_cargo = rs_tMysqlInput_1.getTimestamp(7);
	            } else {
	                row11.data_ingresso_cargo = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row11.data_ingresso_cargo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row11.data_ingresso_orgao = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(8) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(8);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row11.data_ingresso_orgao = rs_tMysqlInput_1.getTimestamp(8);
	            } else {
	                row11.data_ingresso_orgao = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row11.data_ingresso_orgao =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row11.data_saida = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(9) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row11.data_saida = rs_tMysqlInput_1.getTimestamp(9);
	            } else {
	                row11.data_saida = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row11.data_saida =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row11.data_arquivo = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(10) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(10);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row11.data_arquivo = rs_tMysqlInput_1.getTimestamp(10);
	            } else {
	                row11.data_arquivo = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row11.data_arquivo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row11.id_intervalo = null;
							} else {
	                         		
        	row11.id_intervalo = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 12) {
								row11.carreira = null;
							} else {
	                         		
        	row11.carreira = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 12, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
// # Filter conditions 
if( 

TalendDate.compareDate(row11.data_arquivo,new SimpleDateFormat("yyyyMMdd").parse(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).substring(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).lastIndexOf("/") + 1).substring(0, 8)))==-1

 ) {
out1_tmp.id_pessoa = row11.id_pessoa ;
out1_tmp.id_cargo = row11.id_cargo ;
out1_tmp.matricula_reduzida = row11.matricula_reduzida ;
out1_tmp.id_org = row11.id_org ;
out1_tmp.jornada_trabalho = row11.jornada_trabalho ;
out1_tmp.regime_juridico = row11.regime_juridico ;
out1_tmp.data_ingresso_cargo = row11.data_ingresso_cargo ;
out1_tmp.data_ingresso_orgao = row11.data_ingresso_orgao ;
out1_tmp.data_saida = row11.data_arquivo ;
out1_tmp.data_arquivo = row11.data_arquivo ;
out1_tmp.id_intervalo = null;
out1_tmp.carreira = null;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMysqlOutput_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_8 = false;
                    if(out1.id_pessoa == null) {
pstmt_tMysqlOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_8.setString(1, out1.id_pessoa);
}

                    if(out1.matricula_reduzida == null) {
pstmt_tMysqlOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_8.setString(2, out1.matricula_reduzida);
}

                    pstmt_tMysqlOutput_8.setInt(3, out1.id_org);

                    if(out1.data_saida != null) {
date_tMysqlOutput_8 = out1.data_saida.getTime();
if(date_tMysqlOutput_8 < year1_tMysqlOutput_8 || date_tMysqlOutput_8 >= year10000_tMysqlOutput_8) {
pstmt_tMysqlOutput_8.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_8.setTimestamp(4, new java.sql.Timestamp(date_tMysqlOutput_8));
}
} else {
pstmt_tMysqlOutput_8.setNull(4, java.sql.Types.DATE);
}


                    if(out1.id_pessoa == null) {
pstmt_tMysqlOutput_8.setNull(5 + count_tMysqlOutput_8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_8.setString(5 + count_tMysqlOutput_8, out1.id_pessoa);
}


                    if(out1.matricula_reduzida == null) {
pstmt_tMysqlOutput_8.setNull(6 + count_tMysqlOutput_8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_8.setString(6 + count_tMysqlOutput_8, out1.matricula_reduzida);
}


                    pstmt_tMysqlOutput_8.setInt(7 + count_tMysqlOutput_8, out1.id_org);


            pstmt_tMysqlOutput_8.addBatch();
            nb_line_tMysqlOutput_8++;

              batchSizeCounter_tMysqlOutput_8++;
                if ( batchSize_tMysqlOutput_8 <= batchSizeCounter_tMysqlOutput_8) {
                try {
                        int countSum_tMysqlOutput_8 = 0;
                        for(int countEach_tMysqlOutput_8: pstmt_tMysqlOutput_8.executeBatch()) {
                            countSum_tMysqlOutput_8 += (countEach_tMysqlOutput_8 < 0 ? 0 : countEach_tMysqlOutput_8);
                        }
                        updatedCount_tMysqlOutput_8 += countSum_tMysqlOutput_8;
                        batchSizeCounter_tMysqlOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_8 = 0;
                    for(int countEach_tMysqlOutput_8: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_8 += (countEach_tMysqlOutput_8 < 0 ? 0 : countEach_tMysqlOutput_8);
                    }
                    updatedCount_tMysqlOutput_8 += countSum_tMysqlOutput_8;
                    System.err.println(e.getMessage());
                }



                }

 


	tos_count_tMysqlOutput_8++;

/**
 * [tMysqlOutput_8 main ] stop
 */

} // End of branch "out1"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	



	
    try {
    	if(pstmt_tMysqlOutput_8 != null){
			int countSum_tMysqlOutput_8 = 0;
			
			for(int countEach_tMysqlOutput_8: pstmt_tMysqlOutput_8.executeBatch()) {
				countSum_tMysqlOutput_8 += (countEach_tMysqlOutput_8 < 0 ? 0 : countEach_tMysqlOutput_8);
			}
			
	    	
	    		updatedCount_tMysqlOutput_8 += countSum_tMysqlOutput_8;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_8 = 0;
		for(int countEach_tMysqlOutput_8: e.getUpdateCounts()) {
			countSum_tMysqlOutput_8 += (countEach_tMysqlOutput_8 < 0 ? 0 : countEach_tMysqlOutput_8);
		}
		
    	updatedCount_tMysqlOutput_8 += countSum_tMysqlOutput_8;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_8 != null) {
			
				pstmt_tMysqlOutput_8.close();
			
        }


	nb_line_deleted_tMysqlOutput_8=nb_line_deleted_tMysqlOutput_8+ deletedCount_tMysqlOutput_8;
	nb_line_update_tMysqlOutput_8=nb_line_update_tMysqlOutput_8 + updatedCount_tMysqlOutput_8;
	nb_line_inserted_tMysqlOutput_8=nb_line_inserted_tMysqlOutput_8 + insertedCount_tMysqlOutput_8;
	nb_line_rejected_tMysqlOutput_8=nb_line_rejected_tMysqlOutput_8 + rejectedCount_tMysqlOutput_8;
	
        globalMap.put("tMysqlOutput_8_NB_LINE",nb_line_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_8);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_8", true);
end_Hash.put("tMysqlOutput_8", System.currentTimeMillis());




/**
 * [tMysqlOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tMysqlCommit_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	



	

 



/**
 * [tMysqlOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMysqlCommit_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_5", false);
		start_Hash.put("tMysqlCommit_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_5";

	
		int tos_count_tMysqlCommit_5 = 0;
		
    	class BytesLimit65535_tMysqlCommit_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_5().limitLog4jByte();

 



/**
 * [tMysqlCommit_5 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_5";

	

	java.sql.Connection conn_tMysqlCommit_5 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_5 != null && !conn_tMysqlCommit_5.isClosed()) {
	
			
			conn_tMysqlCommit_5.commit();
			
	
}

 


	tos_count_tMysqlCommit_5++;

/**
 * [tMysqlCommit_5 main ] stop
 */
	
	/**
	 * [tMysqlCommit_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_5";

	

 

ok_Hash.put("tMysqlCommit_5", true);
end_Hash.put("tMysqlCommit_5", System.currentTimeMillis());




/**
 * [tMysqlCommit_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlCommit_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tMysqlInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_5";

	

 



/**
 * [tMysqlCommit_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_5_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public java.util.Date inicio;

				public java.util.Date getInicio () {
					return this.inicio;
				}
				
			    public java.util.Date fim;

				public java.util.Date getFim () {
					return this.fim;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_intervalo == null) ? 0 : this.id_intervalo.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.id_intervalo == null) {
							if (other.id_intervalo != null)
								return false;
						
						} else if (!this.id_intervalo.equals(other.id_intervalo))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.id_intervalo = this.id_intervalo;
	            other.inicio = this.inicio;
	            other.fim = this.fim;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.id_intervalo = this.id_intervalo;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_intervalo = readString(dis);
					
					this.inicio = readDate(dis);
					
					this.fim = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_intervalo,dos);
					
					// java.util.Date
				
						writeDate(this.inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fim,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_intervalo="+id_intervalo);
		sb.append(",inicio="+String.valueOf(inicio));
		sb.append(",fim="+String.valueOf(fim));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_intervalo, other.id_intervalo);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out13Struct implements routines.system.IPersistableRow<out13Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String jornada_trabalho;

				public String getJornada_trabalho () {
					return this.jornada_trabalho;
				}
				
			    public String regime_juridico;

				public String getRegime_juridico () {
					return this.regime_juridico;
				}
				
			    public java.util.Date data_ingresso_cargo;

				public java.util.Date getData_ingresso_cargo () {
					return this.data_ingresso_cargo;
				}
				
			    public java.util.Date data_ingresso_orgao;

				public java.util.Date getData_ingresso_orgao () {
					return this.data_ingresso_orgao;
				}
				
			    public java.util.Date data_saida;

				public java.util.Date getData_saida () {
					return this.data_saida;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String carreira;

				public String getCarreira () {
					return this.carreira;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
							result = prime * result + (int) this.id_org;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out13Struct other = (out13Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					

		return true;
    }

	public void copyDataTo(out13Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_cargo = this.id_cargo;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_org = this.id_org;
	            other.jornada_trabalho = this.jornada_trabalho;
	            other.regime_juridico = this.regime_juridico;
	            other.data_ingresso_cargo = this.data_ingresso_cargo;
	            other.data_ingresso_orgao = this.data_ingresso_orgao;
	            other.data_saida = this.data_saida;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.carreira = this.carreira;
	            
	}

	public void copyKeysDataTo(out13Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_cargo = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.jornada_trabalho = readString(dis);
					
					this.regime_juridico = readString(dis);
					
					this.data_ingresso_cargo = readDate(dis);
					
					this.data_ingresso_orgao = readDate(dis);
					
					this.data_saida = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.carreira = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.jornada_trabalho,dos);
					
					// String
				
						writeString(this.regime_juridico,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_cargo,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_orgao,dos);
					
					// java.util.Date
				
						writeDate(this.data_saida,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.carreira,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",jornada_trabalho="+jornada_trabalho);
		sb.append(",regime_juridico="+regime_juridico);
		sb.append(",data_ingresso_cargo="+String.valueOf(data_ingresso_cargo));
		sb.append(",data_ingresso_orgao="+String.valueOf(data_ingresso_orgao));
		sb.append(",data_saida="+String.valueOf(data_saida));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",carreira="+carreira);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public String jornada_trabalho;

				public String getJornada_trabalho () {
					return this.jornada_trabalho;
				}
				
			    public String regime_juridico;

				public String getRegime_juridico () {
					return this.regime_juridico;
				}
				
			    public java.util.Date data_ingresso_cargo;

				public java.util.Date getData_ingresso_cargo () {
					return this.data_ingresso_cargo;
				}
				
			    public java.util.Date data_ingresso_orgao;

				public java.util.Date getData_ingresso_orgao () {
					return this.data_ingresso_orgao;
				}
				
			    public java.util.Date data_saida;

				public java.util.Date getData_saida () {
					return this.data_saida;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String carreira;

				public String getCarreira () {
					return this.carreira;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_cargo = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.jornada_trabalho = readString(dis);
					
					this.regime_juridico = readString(dis);
					
					this.data_ingresso_cargo = readDate(dis);
					
					this.data_ingresso_orgao = readDate(dis);
					
					this.data_saida = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.carreira = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// String
				
						writeString(this.jornada_trabalho,dos);
					
					// String
				
						writeString(this.regime_juridico,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_cargo,dos);
					
					// java.util.Date
				
						writeDate(this.data_ingresso_orgao,dos);
					
					// java.util.Date
				
						writeDate(this.data_saida,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.carreira,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",jornada_trabalho="+jornada_trabalho);
		sb.append(",regime_juridico="+regime_juridico);
		sb.append(",data_ingresso_cargo="+String.valueOf(data_ingresso_cargo));
		sb.append(",data_ingresso_orgao="+String.valueOf(data_ingresso_orgao));
		sb.append(",data_saida="+String.valueOf(data_saida));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",carreira="+carreira);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out3Struct out3 = new out3Struct();
out13Struct out13 = new out13Struct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "cadastro_intervalo";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
	conn_tMysqlOutput_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_1 = false;
                                while(rsTable_tMysqlOutput_1.next()) {
                                    String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_1.equalsIgnoreCase("cadastro_intervalo")) {
                                        whetherExist_tMysqlOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_1.close();
                                if(!whetherExist_tMysqlOutput_1) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
                                        stmtCreate_tMysqlOutput_1.execute("CREATE TABLE `" + tableName_tMysqlOutput_1 + "`(`id_intervalo` VARCHAR(255)   not null ,`inicio` DATETIME ,`fim` DATETIME ,primary key(`id_intervalo`))");
                                    stmtCreate_tMysqlOutput_1.close();
                                }
	    String insert_tMysqlOutput_1 = "INSERT IGNORE INTO `" + "cadastro_intervalo" + "` (`id_intervalo`,`inicio`,`fim`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);
	    

 



/**
 * [tMysqlOutput_1 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_11", false);
		start_Hash.put("tMysqlOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_11 = 0;
		
    	class BytesLimit65535_tMysqlOutput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_11().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_11 = 3;
        if(updateKeyCount_tMysqlOutput_11 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_11 = 0;
int nb_line_update_tMysqlOutput_11 = 0;
int nb_line_inserted_tMysqlOutput_11 = 0;
int nb_line_deleted_tMysqlOutput_11 = 0;
int nb_line_rejected_tMysqlOutput_11 = 0;

int deletedCount_tMysqlOutput_11=0;
int updatedCount_tMysqlOutput_11=0;
int insertedCount_tMysqlOutput_11=0;

int rejectedCount_tMysqlOutput_11=0;

String tableName_tMysqlOutput_11 = "cadastro_servidor_lotacao";
boolean whetherReject_tMysqlOutput_11 = false;

java.util.Calendar calendar_tMysqlOutput_11 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_11.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_11 = calendar_tMysqlOutput_11.getTime().getTime();
calendar_tMysqlOutput_11.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_11 = calendar_tMysqlOutput_11.getTime().getTime();
long date_tMysqlOutput_11;

java.sql.Connection conn_tMysqlOutput_11 = null;
	conn_tMysqlOutput_11 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	
   int batchSize_tMysqlOutput_11 = 10000;
   int batchSizeCounter_tMysqlOutput_11=0;

int count_tMysqlOutput_11=0;
    	
	    String update_tMysqlOutput_11 = "UPDATE `" + "cadastro_servidor_lotacao" + "` SET `id_intervalo` = ? WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_11 = conn_tMysqlOutput_11.prepareStatement(update_tMysqlOutput_11);
	    

 



/**
 * [tMysqlOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
out13Struct out13_tmp = new out13Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMysqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_4", false);
		start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_4";

	
		int tos_count_tMysqlInput_4 = 0;
		
    	class BytesLimit65535_tMysqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_4().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
		    int nb_line_tMysqlInput_4 = 0;
		    java.sql.Connection conn_tMysqlInput_4 = null;
		        conn_tMysqlInput_4 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

		    String dbquery_tMysqlInput_4 = "SELECT \n  `cadastro_servidor_lotacao`.`id_pessoa`, \n  `cadastro_servidor_lotacao`.`id_cargo`, \n  `cadastro_servidor_lotacao`.`matricula_reduzida`, \n  `cadastro_servidor_lotacao`.`id_org`, \n  `cadastro_servidor_lotacao`.`jornada_trabalho`, \n  `cadastro_servidor_lotacao`.`regime_juridico`, \n  `cadastro_servidor_lotacao`.`data_ingresso_cargo`, \n  `cadastro_servidor_lotacao`.`data_ingresso_orgao`, \n  `cadastro_servidor_lotacao`.`data_saida`, \n  `cadastro_servidor_lotacao`.`data_arquivo`, \n  `cadastro_servidor_lotacao`.`id_intervalo`, \n  `cadastro_servidor_lotacao`.`carreira`\nFROM `cadastro_servidor_lotacao`";
			

                       globalMap.put("tMysqlInput_4_QUERY",dbquery_tMysqlInput_4);

		    java.sql.ResultSet rs_tMysqlInput_4 = null;
		try{
		    rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
		    int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

		    String tmpContent_tMysqlInput_4 = null;
		    
		    
		    while (rs_tMysqlInput_4.next()) {
		        nb_line_tMysqlInput_4++;
		        
							if(colQtyInRs_tMysqlInput_4 < 1) {
								row4.id_pessoa = null;
							} else {
	                         		
        	row4.id_pessoa = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 2) {
								row4.id_cargo = null;
							} else {
	                         		
        	row4.id_cargo = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 3) {
								row4.matricula_reduzida = null;
							} else {
	                         		
        	row4.matricula_reduzida = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 4) {
								row4.id_org = 0;
							} else {
		                          
            if(rs_tMysqlInput_4.getObject(4) != null) {
                row4.id_org = rs_tMysqlInput_4.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_4 < 5) {
								row4.jornada_trabalho = null;
							} else {
	                         		
        	row4.jornada_trabalho = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 6) {
								row4.regime_juridico = null;
							} else {
	                         		
        	row4.regime_juridico = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 7) {
								row4.data_ingresso_cargo = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(7) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.data_ingresso_cargo = rs_tMysqlInput_4.getTimestamp(7);
	            } else {
	                row4.data_ingresso_cargo = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.data_ingresso_cargo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 8) {
								row4.data_ingresso_orgao = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(8) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(8);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.data_ingresso_orgao = rs_tMysqlInput_4.getTimestamp(8);
	            } else {
	                row4.data_ingresso_orgao = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.data_ingresso_orgao =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 9) {
								row4.data_saida = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(9) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.data_saida = rs_tMysqlInput_4.getTimestamp(9);
	            } else {
	                row4.data_saida = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.data_saida =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 10) {
								row4.data_arquivo = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(10) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(10);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.data_arquivo = rs_tMysqlInput_4.getTimestamp(10);
	            } else {
	                row4.data_arquivo = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.data_arquivo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 11) {
								row4.id_intervalo = null;
							} else {
	                         		
        	row4.id_intervalo = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 12) {
								row4.carreira = null;
							} else {
	                         		
        	row4.carreira = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 12, false);
		                    }
					

 



/**
 * [tMysqlInput_4 begin ] stop
 */
	
	/**
	 * [tMysqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 


	tos_count_tMysqlInput_4++;

/**
 * [tMysqlInput_4 main ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out13 = null;


// # Output table : 'out3'
out3_tmp.id_intervalo = ((row4.data_ingresso_orgao == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row4.data_ingresso_orgao)) + "-" + ((row4.data_saida == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row4.data_saida)) ;
out3_tmp.inicio = (row4.data_ingresso_orgao == null) ? null : row4.data_ingresso_orgao ;
out3_tmp.fim = (row4.data_saida == null) ? null : row4.data_saida ;
out3 = out3_tmp;

// # Output table : 'out13'
out13_tmp.id_pessoa = row4.id_pessoa ;
out13_tmp.id_cargo = null;
out13_tmp.matricula_reduzida = row4.matricula_reduzida ;
out13_tmp.id_org = row4.id_org ;
out13_tmp.jornada_trabalho = null;
out13_tmp.regime_juridico = null;
out13_tmp.data_ingresso_cargo = null;
out13_tmp.data_ingresso_orgao = null;
out13_tmp.data_saida = null;
out13_tmp.data_arquivo = null;
out13_tmp.id_intervalo = ((row4.data_ingresso_orgao == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row4.data_ingresso_orgao)) + "-" + ((row4.data_saida == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row4.data_saida)) ;
out13_tmp.carreira = null;
out13 = out13_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                        if(out3.id_intervalo == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, out3.id_intervalo);
}

                        if(out3.inicio != null) {
date_tMysqlOutput_1 = out3.inicio.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(2, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(out3.fim != null) {
date_tMysqlOutput_1 = out3.fim.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.DATE);
}

                try {
                    nb_line_tMysqlOutput_1++;
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmt_tMysqlOutput_1.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                            System.err.print(e.getMessage());
                }

 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "out3"




// Start of branch "out13"
if(out13 != null) { 



	
	/**
	 * [tMysqlOutput_11 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_11";

	

			//out13
			//out13


			
				if(execStat){
					runStat.updateStatOnConnection("out13"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_11 = false;
                    if(out13.id_intervalo == null) {
pstmt_tMysqlOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_11.setString(1, out13.id_intervalo);
}


                    if(out13.id_pessoa == null) {
pstmt_tMysqlOutput_11.setNull(2 + count_tMysqlOutput_11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_11.setString(2 + count_tMysqlOutput_11, out13.id_pessoa);
}


                    if(out13.matricula_reduzida == null) {
pstmt_tMysqlOutput_11.setNull(3 + count_tMysqlOutput_11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_11.setString(3 + count_tMysqlOutput_11, out13.matricula_reduzida);
}


                    pstmt_tMysqlOutput_11.setInt(4 + count_tMysqlOutput_11, out13.id_org);


            pstmt_tMysqlOutput_11.addBatch();
            nb_line_tMysqlOutput_11++;

              batchSizeCounter_tMysqlOutput_11++;
                if ( batchSize_tMysqlOutput_11 <= batchSizeCounter_tMysqlOutput_11) {
                try {
                        int countSum_tMysqlOutput_11 = 0;
                        for(int countEach_tMysqlOutput_11: pstmt_tMysqlOutput_11.executeBatch()) {
                            countSum_tMysqlOutput_11 += (countEach_tMysqlOutput_11 < 0 ? 0 : countEach_tMysqlOutput_11);
                        }
                        updatedCount_tMysqlOutput_11 += countSum_tMysqlOutput_11;
                        batchSizeCounter_tMysqlOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_11 = 0;
                    for(int countEach_tMysqlOutput_11: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_11 += (countEach_tMysqlOutput_11 < 0 ? 0 : countEach_tMysqlOutput_11);
                    }
                    updatedCount_tMysqlOutput_11 += countSum_tMysqlOutput_11;
                    System.err.println(e.getMessage());
                }



                }

 


	tos_count_tMysqlOutput_11++;

/**
 * [tMysqlOutput_11 main ] stop
 */

} // End of branch "out13"







	
	/**
	 * [tMysqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

	}
}finally{
	if(rs_tMysqlInput_4 !=null){
		rs_tMysqlInput_4.close();
	}
	stmt_tMysqlInput_4.close();
}

		   globalMap.put("tMysqlInput_4_NB_LINE",nb_line_tMysqlInput_4);
		


 

ok_Hash.put("tMysqlInput_4", true);
end_Hash.put("tMysqlInput_4", System.currentTimeMillis());




/**
 * [tMysqlInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }


	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */




	
	/**
	 * [tMysqlOutput_11 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_11";

	



	
    try {
    	if(pstmt_tMysqlOutput_11 != null){
			int countSum_tMysqlOutput_11 = 0;
			
			for(int countEach_tMysqlOutput_11: pstmt_tMysqlOutput_11.executeBatch()) {
				countSum_tMysqlOutput_11 += (countEach_tMysqlOutput_11 < 0 ? 0 : countEach_tMysqlOutput_11);
			}
			
	    	
	    		updatedCount_tMysqlOutput_11 += countSum_tMysqlOutput_11;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_11 = 0;
		for(int countEach_tMysqlOutput_11: e.getUpdateCounts()) {
			countSum_tMysqlOutput_11 += (countEach_tMysqlOutput_11 < 0 ? 0 : countEach_tMysqlOutput_11);
		}
		
    	updatedCount_tMysqlOutput_11 += countSum_tMysqlOutput_11;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_11 != null) {
			
				pstmt_tMysqlOutput_11.close();
			
        }


	nb_line_deleted_tMysqlOutput_11=nb_line_deleted_tMysqlOutput_11+ deletedCount_tMysqlOutput_11;
	nb_line_update_tMysqlOutput_11=nb_line_update_tMysqlOutput_11 + updatedCount_tMysqlOutput_11;
	nb_line_inserted_tMysqlOutput_11=nb_line_inserted_tMysqlOutput_11 + insertedCount_tMysqlOutput_11;
	nb_line_rejected_tMysqlOutput_11=nb_line_rejected_tMysqlOutput_11 + rejectedCount_tMysqlOutput_11;
	
        globalMap.put("tMysqlOutput_11_NB_LINE",nb_line_tMysqlOutput_11);
        globalMap.put("tMysqlOutput_11_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_11);
        globalMap.put("tMysqlOutput_11_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_11);
        globalMap.put("tMysqlOutput_11_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_11);
        globalMap.put("tMysqlOutput_11_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_11);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_11", true);
end_Hash.put("tMysqlOutput_11", System.currentTimeMillis());




/**
 * [tMysqlOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tMysqlCommit_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_11";

	



	

 



/**
 * [tMysqlOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlCommit_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_4", false);
		start_Hash.put("tMysqlCommit_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_4";

	
		int tos_count_tMysqlCommit_4 = 0;
		
    	class BytesLimit65535_tMysqlCommit_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_4().limitLog4jByte();

 



/**
 * [tMysqlCommit_4 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_4";

	

	java.sql.Connection conn_tMysqlCommit_4 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_4 != null && !conn_tMysqlCommit_4.isClosed()) {
	
			
			conn_tMysqlCommit_4.commit();
			
	
}

 


	tos_count_tMysqlCommit_4++;

/**
 * [tMysqlCommit_4 main ] stop
 */
	
	/**
	 * [tMysqlCommit_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_4";

	

 

ok_Hash.put("tMysqlCommit_4", true);
end_Hash.put("tMysqlCommit_4", System.currentTimeMillis());




/**
 * [tMysqlCommit_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_4";

	

 



/**
 * [tMysqlCommit_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_4_SUBPROCESS_STATE", 1);
	}
	


public static class servidor_funcaoStruct implements routines.system.IPersistableRow<servidor_funcaoStruct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_fim;

				public java.util.Date getData_fim () {
					return this.data_fim;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.id_funcao == null) ? 0 : this.id_funcao.hashCode());
					
						result = prime * result + ((this.id_atividade == null) ? 0 : this.id_atividade.hashCode());
					
							result = prime * result + (int) this.id_org;
						
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final servidor_funcaoStruct other = (servidor_funcaoStruct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.id_funcao == null) {
							if (other.id_funcao != null)
								return false;
						
						} else if (!this.id_funcao.equals(other.id_funcao))
						
							return false;
					
						if (this.id_atividade == null) {
							if (other.id_atividade != null)
								return false;
						
						} else if (!this.id_atividade.equals(other.id_atividade))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(servidor_funcaoStruct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_funcao = this.id_funcao;
	            other.id_atividade = this.id_atividade;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_fim = this.data_fim;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(servidor_funcaoStruct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.id_funcao = this.id_funcao;
	            	other.id_atividade = this.id_atividade;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_funcao = readString(dis);
					
					this.id_atividade = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.data_inicio = readDate(dis);
					
					this.data_fim = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.id_atividade,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_fim,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_funcao="+id_funcao);
		sb.append(",id_atividade="+id_atividade);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_fim="+String.valueOf(data_fim));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(servidor_funcaoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_funcao, other.id_funcao);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_atividade, other.id_atividade);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class funcaoStruct implements routines.system.IPersistableRow<funcaoStruct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String descricao;

				public String getDescricao () {
					return this.descricao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_funcao == null) ? 0 : this.id_funcao.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final funcaoStruct other = (funcaoStruct) obj;
		
						if (this.id_funcao == null) {
							if (other.id_funcao != null)
								return false;
						
						} else if (!this.id_funcao.equals(other.id_funcao))
						
							return false;
					

		return true;
    }

	public void copyDataTo(funcaoStruct other) {

		other.id_funcao = this.id_funcao;
	            other.descricao = this.descricao;
	            
	}

	public void copyKeysDataTo(funcaoStruct other) {

		other.id_funcao = this.id_funcao;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_funcao = readString(dis);
					
					this.descricao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.descricao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_funcao="+id_funcao);
		sb.append(",descricao="+descricao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(funcaoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_funcao, other.id_funcao);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class atividadeStruct implements routines.system.IPersistableRow<atividadeStruct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public String descricao;

				public String getDescricao () {
					return this.descricao;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_atividade == null) ? 0 : this.id_atividade.hashCode());
					
						result = prime * result + ((this.id_org == null) ? 0 : this.id_org.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final atividadeStruct other = (atividadeStruct) obj;
		
						if (this.id_atividade == null) {
							if (other.id_atividade != null)
								return false;
						
						} else if (!this.id_atividade.equals(other.id_atividade))
						
							return false;
					
						if (this.id_org == null) {
							if (other.id_org != null)
								return false;
						
						} else if (!this.id_org.equals(other.id_org))
						
							return false;
					

		return true;
    }

	public void copyDataTo(atividadeStruct other) {

		other.id_atividade = this.id_atividade;
	            other.descricao = this.descricao;
	            other.id_org = this.id_org;
	            
	}

	public void copyKeysDataTo(atividadeStruct other) {

		other.id_atividade = this.id_atividade;
	            	other.id_org = this.id_org;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_atividade = readString(dis);
					
					this.descricao = readString(dis);
					
						this.id_org = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_atividade,dos);
					
					// String
				
						writeString(this.descricao,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_atividade="+id_atividade);
		sb.append(",descricao="+descricao);
		sb.append(",id_org="+String.valueOf(id_org));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(atividadeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_atividade, other.id_atividade);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
row23Struct row23 = new row23Struct();
servidor_funcaoStruct servidor_funcao = new servidor_funcaoStruct();
funcaoStruct funcao = new funcaoStruct();
atividadeStruct atividade = new atividadeStruct();






	
	/**
	 * [tMysqlOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_9", false);
		start_Hash.put("tMysqlOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("servidor_funcao" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_9 = 0;
		
    	class BytesLimit65535_tMysqlOutput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_9().limitLog4jByte();






int nb_line_tMysqlOutput_9 = 0;
int nb_line_update_tMysqlOutput_9 = 0;
int nb_line_inserted_tMysqlOutput_9 = 0;
int nb_line_deleted_tMysqlOutput_9 = 0;
int nb_line_rejected_tMysqlOutput_9 = 0;

int deletedCount_tMysqlOutput_9=0;
int updatedCount_tMysqlOutput_9=0;
int insertedCount_tMysqlOutput_9=0;

int rejectedCount_tMysqlOutput_9=0;

String tableName_tMysqlOutput_9 = "cadastro_servidor_funcao";
boolean whetherReject_tMysqlOutput_9 = false;

java.util.Calendar calendar_tMysqlOutput_9 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_9.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_9 = calendar_tMysqlOutput_9.getTime().getTime();
calendar_tMysqlOutput_9.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_9 = calendar_tMysqlOutput_9.getTime().getTime();
long date_tMysqlOutput_9;

java.sql.Connection conn_tMysqlOutput_9 = null;
	conn_tMysqlOutput_9 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_9=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_9 = conn_tMysqlOutput_9.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_9 = dbMetaData_tMysqlOutput_9.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_9 = false;
                                while(rsTable_tMysqlOutput_9.next()) {
                                    String table_tMysqlOutput_9 = rsTable_tMysqlOutput_9.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_9.equalsIgnoreCase("cadastro_servidor_funcao")) {
                                        whetherExist_tMysqlOutput_9 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_9.close();
                                if(!whetherExist_tMysqlOutput_9) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_9 = conn_tMysqlOutput_9.createStatement();
                                        stmtCreate_tMysqlOutput_9.execute("CREATE TABLE `" + tableName_tMysqlOutput_9 + "`(`id_pessoa` VARCHAR(255)   not null ,`id_funcao` VARCHAR(255)   not null ,`id_atividade` VARCHAR(255)   not null ,`id_org` INT(10)   not null ,`data_inicio` DATE  not null ,`data_fim` DATE ,`data_arquivo` DATE ,`id_intervalo` VARCHAR(255)  ,`id_lotacao` VARCHAR(255)  ,primary key(`id_pessoa`,`id_funcao`,`id_atividade`,`id_org`,`data_inicio`))");
                                    stmtCreate_tMysqlOutput_9.close();
                                }
	    String insertIgnore_tMysqlOutput_9 = "INSERT IGNORE INTO `" + "cadastro_servidor_funcao" + "` (`id_pessoa`,`id_funcao`,`id_atividade`,`id_org`,`data_inicio`,`data_fim`,`data_arquivo`,`id_intervalo`,`id_lotacao`) VALUES (?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `data_fim` = ?,`data_arquivo` = ?,`id_intervalo` = ?,`id_lotacao` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_9 = conn_tMysqlOutput_9.prepareStatement(insertIgnore_tMysqlOutput_9);
	    

 



/**
 * [tMysqlOutput_9 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_6", false);
		start_Hash.put("tMysqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("funcao" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_6 = 0;
		
    	class BytesLimit65535_tMysqlOutput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_6().limitLog4jByte();






int nb_line_tMysqlOutput_6 = 0;
int nb_line_update_tMysqlOutput_6 = 0;
int nb_line_inserted_tMysqlOutput_6 = 0;
int nb_line_deleted_tMysqlOutput_6 = 0;
int nb_line_rejected_tMysqlOutput_6 = 0;

int deletedCount_tMysqlOutput_6=0;
int updatedCount_tMysqlOutput_6=0;
int insertedCount_tMysqlOutput_6=0;

int rejectedCount_tMysqlOutput_6=0;

String tableName_tMysqlOutput_6 = "cadastro_funcao";
boolean whetherReject_tMysqlOutput_6 = false;

java.util.Calendar calendar_tMysqlOutput_6 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
calendar_tMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
long date_tMysqlOutput_6;

java.sql.Connection conn_tMysqlOutput_6 = null;
	conn_tMysqlOutput_6 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_6=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_6 = conn_tMysqlOutput_6.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_6 = dbMetaData_tMysqlOutput_6.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_6 = false;
                                while(rsTable_tMysqlOutput_6.next()) {
                                    String table_tMysqlOutput_6 = rsTable_tMysqlOutput_6.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_6.equalsIgnoreCase("cadastro_funcao")) {
                                        whetherExist_tMysqlOutput_6 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_6.close();
                                if(!whetherExist_tMysqlOutput_6) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_6 = conn_tMysqlOutput_6.createStatement();
                                        stmtCreate_tMysqlOutput_6.execute("CREATE TABLE `" + tableName_tMysqlOutput_6 + "`(`id_funcao` VARCHAR(255)   not null ,`descricao` VARCHAR(255)  ,primary key(`id_funcao`))");
                                    stmtCreate_tMysqlOutput_6.close();
                                }
	    String insertIgnore_tMysqlOutput_6 = "INSERT IGNORE INTO `" + "cadastro_funcao" + "` (`id_funcao`,`descricao`) VALUES (?,?) ON DUPLICATE KEY UPDATE `descricao` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_6 = conn_tMysqlOutput_6.prepareStatement(insertIgnore_tMysqlOutput_6);
	    

 



/**
 * [tMysqlOutput_6 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_7", false);
		start_Hash.put("tMysqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("atividade" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_7 = 0;
		
    	class BytesLimit65535_tMysqlOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_7().limitLog4jByte();






int nb_line_tMysqlOutput_7 = 0;
int nb_line_update_tMysqlOutput_7 = 0;
int nb_line_inserted_tMysqlOutput_7 = 0;
int nb_line_deleted_tMysqlOutput_7 = 0;
int nb_line_rejected_tMysqlOutput_7 = 0;

int deletedCount_tMysqlOutput_7=0;
int updatedCount_tMysqlOutput_7=0;
int insertedCount_tMysqlOutput_7=0;

int rejectedCount_tMysqlOutput_7=0;

String tableName_tMysqlOutput_7 = "cadastro_atividade";
boolean whetherReject_tMysqlOutput_7 = false;

java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
long date_tMysqlOutput_7;

java.sql.Connection conn_tMysqlOutput_7 = null;
	conn_tMysqlOutput_7 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_7=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_7 = conn_tMysqlOutput_7.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_7 = dbMetaData_tMysqlOutput_7.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_7 = false;
                                while(rsTable_tMysqlOutput_7.next()) {
                                    String table_tMysqlOutput_7 = rsTable_tMysqlOutput_7.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_7.equalsIgnoreCase("cadastro_atividade")) {
                                        whetherExist_tMysqlOutput_7 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_7.close();
                                if(!whetherExist_tMysqlOutput_7) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_7 = conn_tMysqlOutput_7.createStatement();
                                        stmtCreate_tMysqlOutput_7.execute("CREATE TABLE `" + tableName_tMysqlOutput_7 + "`(`id_atividade` VARCHAR(255)   not null ,`descricao` VARCHAR(255)  ,`id_org` INT(20)  ,primary key(`id_atividade`,`id_org`))");
                                    stmtCreate_tMysqlOutput_7.close();
                                }
	    String insertIgnore_tMysqlOutput_7 = "INSERT IGNORE INTO `" + "cadastro_atividade" + "` (`id_atividade`,`descricao`,`id_org`) VALUES (?,?,?) ON DUPLICATE KEY UPDATE `descricao` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7.prepareStatement(insertIgnore_tMysqlOutput_7);
	    

 



/**
 * [tMysqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_10 = 0;
		
    	class BytesLimit65535_tMap_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_10().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	String id_pessoa;
	String id_funcao;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
servidor_funcaoStruct servidor_funcao_tmp = new servidor_funcaoStruct();
funcaoStruct funcao_tmp = new funcaoStruct();
atividadeStruct atividade_tmp = new atividadeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_4 = 0;
		
    	class BytesLimit65535_tFilterRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_4().limitLog4jByte();
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";

	
		int tos_count_tHashInput_8 = 0;
		
    	class BytesLimit65535_tHashInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_8().limitLog4jByte();


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_child_job_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row13Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row13Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row15.Id_SERVIDOR_PORTAL = next_tHashInput_8.Id_SERVIDOR_PORTAL;
	row15.NOME = next_tHashInput_8.NOME;
	row15.CPF = next_tHashInput_8.CPF;
	row15.MATRICULA = next_tHashInput_8.MATRICULA;
	row15.DESCRICAO_CARGO = next_tHashInput_8.DESCRICAO_CARGO;
	row15.CLASSE_CARGO = next_tHashInput_8.CLASSE_CARGO;
	row15.REFERENCIA_CARGO = next_tHashInput_8.REFERENCIA_CARGO;
	row15.PADRAO_CARGO = next_tHashInput_8.PADRAO_CARGO;
	row15.NIVEL_CARGO = next_tHashInput_8.NIVEL_CARGO;
	row15.SIGLA_FUNCAO = next_tHashInput_8.SIGLA_FUNCAO;
	row15.NIVEL_FUNCAO = next_tHashInput_8.NIVEL_FUNCAO;
	row15.FUNCAO = next_tHashInput_8.FUNCAO;
	row15.CODIGO_ATIVIDADE = next_tHashInput_8.CODIGO_ATIVIDADE;
	row15.ATIVIDADE = next_tHashInput_8.ATIVIDADE;
	row15.COD_ORG_LOTACAO = next_tHashInput_8.COD_ORG_LOTACAO;
	row15.ORG_LOTACAO = next_tHashInput_8.ORG_LOTACAO;
	row15.COD_ORG_EXERCICIO = next_tHashInput_8.COD_ORG_EXERCICIO;
	row15.TIPO_VINCULO = next_tHashInput_8.TIPO_VINCULO;
	row15.SITUACAO_VINCULO = next_tHashInput_8.SITUACAO_VINCULO;
	row15.DATA_INICIO_AFASTAMENTO = next_tHashInput_8.DATA_INICIO_AFASTAMENTO;
	row15.DATA_TERMINO_AFASTAMENTO = next_tHashInput_8.DATA_TERMINO_AFASTAMENTO;
	row15.REGIME_JURIDICO = next_tHashInput_8.REGIME_JURIDICO;
	row15.JORNADA_DE_TRABALHO = next_tHashInput_8.JORNADA_DE_TRABALHO;
	row15.DATA_INGRESSO_CARGOFUNCAO = next_tHashInput_8.DATA_INGRESSO_CARGOFUNCAO;
	row15.DATA_INGRESSO_ORGAO = next_tHashInput_8.DATA_INGRESSO_ORGAO;
 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */

	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		

          row23 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((row15.TIPO_VINCULO == null? false : row15.TIPO_VINCULO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(1))) == 0)
                           , "TIPO_VINCULO.compareTo(1) == 0 failed");
		 	
      ope_tFilterRow_4.matches((// code sample : use row15 to define the condition.
// row15.columnName1.equals("foo") ||!(row15.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
row15.COD_ORG_LOTACAO.equals(row15.COD_ORG_EXERCICIO)
			), "advanced condition failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row23 == null){ 
                row23 = new row23Struct();
              }
               row23.Id_SERVIDOR_PORTAL = row15.Id_SERVIDOR_PORTAL;
               row23.NOME = row15.NOME;
               row23.CPF = row15.CPF;
               row23.MATRICULA = row15.MATRICULA;
               row23.DESCRICAO_CARGO = row15.DESCRICAO_CARGO;
               row23.CLASSE_CARGO = row15.CLASSE_CARGO;
               row23.REFERENCIA_CARGO = row15.REFERENCIA_CARGO;
               row23.PADRAO_CARGO = row15.PADRAO_CARGO;
               row23.NIVEL_CARGO = row15.NIVEL_CARGO;
               row23.SIGLA_FUNCAO = row15.SIGLA_FUNCAO;
               row23.NIVEL_FUNCAO = row15.NIVEL_FUNCAO;
               row23.FUNCAO = row15.FUNCAO;
               row23.CODIGO_ATIVIDADE = row15.CODIGO_ATIVIDADE;
               row23.ATIVIDADE = row15.ATIVIDADE;
               row23.COD_ORG_LOTACAO = row15.COD_ORG_LOTACAO;
               row23.ORG_LOTACAO = row15.ORG_LOTACAO;
               row23.COD_ORG_EXERCICIO = row15.COD_ORG_EXERCICIO;
               row23.TIPO_VINCULO = row15.TIPO_VINCULO;
               row23.SITUACAO_VINCULO = row15.SITUACAO_VINCULO;
               row23.DATA_INICIO_AFASTAMENTO = row15.DATA_INICIO_AFASTAMENTO;
               row23.DATA_TERMINO_AFASTAMENTO = row15.DATA_TERMINO_AFASTAMENTO;
               row23.REGIME_JURIDICO = row15.REGIME_JURIDICO;
               row23.JORNADA_DE_TRABALHO = row15.JORNADA_DE_TRABALHO;
               row23.DATA_INGRESSO_CARGOFUNCAO = row15.DATA_INGRESSO_CARGOFUNCAO;
               row23.DATA_INGRESSO_ORGAO = row15.DATA_INGRESSO_ORGAO;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.id_pessoa = row23.CPF.substring(4, 11) + "-" + row23.NOME ;
Var.id_funcao = row23.SIGLA_FUNCAO + row23.NIVEL_FUNCAO ;// ###############################
        // ###############################
        // # Output tables

servidor_funcao = null;
funcao = null;
atividade = null;


// # Output table : 'servidor_funcao'
servidor_funcao_tmp.id_pessoa = Var.id_pessoa ;
servidor_funcao_tmp.id_funcao = Var.id_funcao ;
servidor_funcao_tmp.id_atividade = row23.CODIGO_ATIVIDADE ;
servidor_funcao_tmp.id_org = row23.COD_ORG_EXERCICIO ;
servidor_funcao_tmp.data_inicio = (row23.DATA_INGRESSO_CARGOFUNCAO.trim().equals(""))?null:
new SimpleDateFormat("dd/MM/yyyy").parse(
row23.DATA_INGRESSO_CARGOFUNCAO) ;
servidor_funcao_tmp.data_fim = null;
servidor_funcao_tmp.data_arquivo = new SimpleDateFormat("yyyyMMdd").parse(
((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).substring(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).lastIndexOf("/") + 1).substring(0, 8)) ;
servidor_funcao_tmp.id_intervalo = null;
servidor_funcao_tmp.id_lotacao = row23.CPF.substring(4, 11) + "-" + row23.NOME+ "-" + row23.MATRICULA.substring(0, 3)+ "-" + row23.COD_ORG_LOTACAO ;
servidor_funcao = servidor_funcao_tmp;

// # Output table : 'funcao'
funcao_tmp.id_funcao = Var.id_funcao ;
funcao_tmp.descricao = row23.FUNCAO ;
funcao = funcao_tmp;

// # Output table : 'atividade'
atividade_tmp.id_atividade = row23.CODIGO_ATIVIDADE ;
atividade_tmp.descricao = row23.ATIVIDADE ;
atividade_tmp.id_org = row23.COD_ORG_LOTACAO ;
atividade = atividade_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
// Start of branch "servidor_funcao"
if(servidor_funcao != null) { 



	
	/**
	 * [tMysqlOutput_9 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_9";

	

			//servidor_funcao
			//servidor_funcao


			
				if(execStat){
					runStat.updateStatOnConnection("servidor_funcao"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_9 = false;
                    if(servidor_funcao.id_pessoa == null) {
pstmt_tMysqlOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(1, servidor_funcao.id_pessoa);
}

                    if(servidor_funcao.id_funcao == null) {
pstmt_tMysqlOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(2, servidor_funcao.id_funcao);
}

                    if(servidor_funcao.id_atividade == null) {
pstmt_tMysqlOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(3, servidor_funcao.id_atividade);
}

                    pstmt_tMysqlOutput_9.setInt(4, servidor_funcao.id_org);

                    if(servidor_funcao.data_inicio != null) {
date_tMysqlOutput_9 = servidor_funcao.data_inicio.getTime();
if(date_tMysqlOutput_9 < year1_tMysqlOutput_9 || date_tMysqlOutput_9 >= year10000_tMysqlOutput_9) {
pstmt_tMysqlOutput_9.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_9.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_9));
}
} else {
pstmt_tMysqlOutput_9.setNull(5, java.sql.Types.DATE);
}

                    if(servidor_funcao.data_fim != null) {
date_tMysqlOutput_9 = servidor_funcao.data_fim.getTime();
if(date_tMysqlOutput_9 < year1_tMysqlOutput_9 || date_tMysqlOutput_9 >= year10000_tMysqlOutput_9) {
pstmt_tMysqlOutput_9.setString(6, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_9.setTimestamp(6, new java.sql.Timestamp(date_tMysqlOutput_9));
}
} else {
pstmt_tMysqlOutput_9.setNull(6, java.sql.Types.DATE);
}

                    if(servidor_funcao.data_arquivo != null) {
date_tMysqlOutput_9 = servidor_funcao.data_arquivo.getTime();
if(date_tMysqlOutput_9 < year1_tMysqlOutput_9 || date_tMysqlOutput_9 >= year10000_tMysqlOutput_9) {
pstmt_tMysqlOutput_9.setString(7, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_9.setTimestamp(7, new java.sql.Timestamp(date_tMysqlOutput_9));
}
} else {
pstmt_tMysqlOutput_9.setNull(7, java.sql.Types.DATE);
}

                    if(servidor_funcao.id_intervalo == null) {
pstmt_tMysqlOutput_9.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(8, servidor_funcao.id_intervalo);
}

                    if(servidor_funcao.id_lotacao == null) {
pstmt_tMysqlOutput_9.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(9, servidor_funcao.id_lotacao);
}

                    if(servidor_funcao.data_fim != null) {
date_tMysqlOutput_9 = servidor_funcao.data_fim.getTime();
if(date_tMysqlOutput_9 < year1_tMysqlOutput_9 || date_tMysqlOutput_9 >= year10000_tMysqlOutput_9) {
pstmt_tMysqlOutput_9.setString(10, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_9.setTimestamp(10, new java.sql.Timestamp(date_tMysqlOutput_9));
}
} else {
pstmt_tMysqlOutput_9.setNull(10, java.sql.Types.DATE);
}

                    if(servidor_funcao.data_arquivo != null) {
date_tMysqlOutput_9 = servidor_funcao.data_arquivo.getTime();
if(date_tMysqlOutput_9 < year1_tMysqlOutput_9 || date_tMysqlOutput_9 >= year10000_tMysqlOutput_9) {
pstmt_tMysqlOutput_9.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_9.setTimestamp(11, new java.sql.Timestamp(date_tMysqlOutput_9));
}
} else {
pstmt_tMysqlOutput_9.setNull(11, java.sql.Types.DATE);
}

                    if(servidor_funcao.id_intervalo == null) {
pstmt_tMysqlOutput_9.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(12, servidor_funcao.id_intervalo);
}

                    if(servidor_funcao.id_lotacao == null) {
pstmt_tMysqlOutput_9.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_9.setString(13, servidor_funcao.id_lotacao);
}

            int count_on_duplicate_key_tMysqlOutput_9 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_9 = pstmt_tMysqlOutput_9.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_9 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_9 == 1) {
                insertedCount_tMysqlOutput_9 += count_on_duplicate_key_tMysqlOutput_9;
            } else {
                insertedCount_tMysqlOutput_9 += 1;
                updatedCount_tMysqlOutput_9 += count_on_duplicate_key_tMysqlOutput_9 - 1;
            }

 


	tos_count_tMysqlOutput_9++;

/**
 * [tMysqlOutput_9 main ] stop
 */

} // End of branch "servidor_funcao"




// Start of branch "funcao"
if(funcao != null) { 



	
	/**
	 * [tMysqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

			//funcao
			//funcao


			
				if(execStat){
					runStat.updateStatOnConnection("funcao"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_6 = false;
                    if(funcao.id_funcao == null) {
pstmt_tMysqlOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_6.setString(1, funcao.id_funcao);
}

                    if(funcao.descricao == null) {
pstmt_tMysqlOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_6.setString(2, funcao.descricao);
}

                    if(funcao.descricao == null) {
pstmt_tMysqlOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_6.setString(3, funcao.descricao);
}

            int count_on_duplicate_key_tMysqlOutput_6 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_6 = pstmt_tMysqlOutput_6.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_6 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_6 == 1) {
                insertedCount_tMysqlOutput_6 += count_on_duplicate_key_tMysqlOutput_6;
            } else {
                insertedCount_tMysqlOutput_6 += 1;
                updatedCount_tMysqlOutput_6 += count_on_duplicate_key_tMysqlOutput_6 - 1;
            }

 


	tos_count_tMysqlOutput_6++;

/**
 * [tMysqlOutput_6 main ] stop
 */

} // End of branch "funcao"




// Start of branch "atividade"
if(atividade != null) { 



	
	/**
	 * [tMysqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

			//atividade
			//atividade


			
				if(execStat){
					runStat.updateStatOnConnection("atividade"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_7 = false;
                    if(atividade.id_atividade == null) {
pstmt_tMysqlOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_7.setString(1, atividade.id_atividade);
}

                    if(atividade.descricao == null) {
pstmt_tMysqlOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_7.setString(2, atividade.descricao);
}

                    if(atividade.id_org == null) {
pstmt_tMysqlOutput_7.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_7.setInt(3, atividade.id_org);
}

                    if(atividade.descricao == null) {
pstmt_tMysqlOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_7.setString(4, atividade.descricao);
}

            int count_on_duplicate_key_tMysqlOutput_7 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_7 = pstmt_tMysqlOutput_7.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_7 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_7 == 1) {
                insertedCount_tMysqlOutput_7 += count_on_duplicate_key_tMysqlOutput_7;
            } else {
                insertedCount_tMysqlOutput_7 += 1;
                updatedCount_tMysqlOutput_7 += count_on_duplicate_key_tMysqlOutput_7 - 1;
            }

 


	tos_count_tMysqlOutput_7++;

/**
 * [tMysqlOutput_7 main ] stop
 */

} // End of branch "atividade"





} // End of branch "row23"







	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_child_job_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMysqlOutput_9 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_9";

	



	

        if(pstmt_tMysqlOutput_9 != null) {
			
				pstmt_tMysqlOutput_9.close();
			
        }


	nb_line_deleted_tMysqlOutput_9=nb_line_deleted_tMysqlOutput_9+ deletedCount_tMysqlOutput_9;
	nb_line_update_tMysqlOutput_9=nb_line_update_tMysqlOutput_9 + updatedCount_tMysqlOutput_9;
	nb_line_inserted_tMysqlOutput_9=nb_line_inserted_tMysqlOutput_9 + insertedCount_tMysqlOutput_9;
	nb_line_rejected_tMysqlOutput_9=nb_line_rejected_tMysqlOutput_9 + rejectedCount_tMysqlOutput_9;
	
        globalMap.put("tMysqlOutput_9_NB_LINE",nb_line_tMysqlOutput_9);
        globalMap.put("tMysqlOutput_9_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_9);
        globalMap.put("tMysqlOutput_9_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_9);
        globalMap.put("tMysqlOutput_9_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_9);
        globalMap.put("tMysqlOutput_9_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_9);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("servidor_funcao"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_9", true);
end_Hash.put("tMysqlOutput_9", System.currentTimeMillis());




/**
 * [tMysqlOutput_9 end ] stop
 */




	
	/**
	 * [tMysqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



	

        if(pstmt_tMysqlOutput_6 != null) {
			
				pstmt_tMysqlOutput_6.close();
			
        }


	nb_line_deleted_tMysqlOutput_6=nb_line_deleted_tMysqlOutput_6+ deletedCount_tMysqlOutput_6;
	nb_line_update_tMysqlOutput_6=nb_line_update_tMysqlOutput_6 + updatedCount_tMysqlOutput_6;
	nb_line_inserted_tMysqlOutput_6=nb_line_inserted_tMysqlOutput_6 + insertedCount_tMysqlOutput_6;
	nb_line_rejected_tMysqlOutput_6=nb_line_rejected_tMysqlOutput_6 + rejectedCount_tMysqlOutput_6;
	
        globalMap.put("tMysqlOutput_6_NB_LINE",nb_line_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_6);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("funcao"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_6", true);
end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());




/**
 * [tMysqlOutput_6 end ] stop
 */




	
	/**
	 * [tMysqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



	

        if(pstmt_tMysqlOutput_7 != null) {
			
				pstmt_tMysqlOutput_7.close();
			
        }


	nb_line_deleted_tMysqlOutput_7=nb_line_deleted_tMysqlOutput_7+ deletedCount_tMysqlOutput_7;
	nb_line_update_tMysqlOutput_7=nb_line_update_tMysqlOutput_7 + updatedCount_tMysqlOutput_7;
	nb_line_inserted_tMysqlOutput_7=nb_line_inserted_tMysqlOutput_7 + insertedCount_tMysqlOutput_7;
	nb_line_rejected_tMysqlOutput_7=nb_line_rejected_tMysqlOutput_7 + rejectedCount_tMysqlOutput_7;
	
        globalMap.put("tMysqlOutput_7_NB_LINE",nb_line_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_7);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("atividade"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_7", true);
end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());




/**
 * [tMysqlOutput_7 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tMysqlCommit_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_9";

	



	

 



/**
 * [tMysqlOutput_9 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



	

 



/**
 * [tMysqlOutput_6 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



	

 



/**
 * [tMysqlOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMysqlCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_2", false);
		start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_2";

	
		int tos_count_tMysqlCommit_2 = 0;
		
    	class BytesLimit65535_tMysqlCommit_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_2().limitLog4jByte();

 



/**
 * [tMysqlCommit_2 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_2";

	

	java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_2 != null && !conn_tMysqlCommit_2.isClosed()) {
	
			
			conn_tMysqlCommit_2.commit();
			
	
}

 


	tos_count_tMysqlCommit_2++;

/**
 * [tMysqlCommit_2 main ] stop
 */
	
	/**
	 * [tMysqlCommit_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_2";

	

 

ok_Hash.put("tMysqlCommit_2", true);
end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());




/**
 * [tMysqlCommit_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlCommit_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tMysqlInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_2";

	

 



/**
 * [tMysqlCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 1);
	}
	


public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_fim;

				public java.util.Date getData_fim () {
					return this.data_fim;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.id_funcao == null) ? 0 : this.id_funcao.hashCode());
					
						result = prime * result + ((this.id_atividade == null) ? 0 : this.id_atividade.hashCode());
					
							result = prime * result + (int) this.id_org;
						
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out8Struct other = (out8Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.id_funcao == null) {
							if (other.id_funcao != null)
								return false;
						
						} else if (!this.id_funcao.equals(other.id_funcao))
						
							return false;
					
						if (this.id_atividade == null) {
							if (other.id_atividade != null)
								return false;
						
						} else if (!this.id_atividade.equals(other.id_atividade))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out8Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_funcao = this.id_funcao;
	            other.id_atividade = this.id_atividade;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_fim = this.data_fim;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(out8Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.id_funcao = this.id_funcao;
	            	other.id_atividade = this.id_atividade;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_funcao = readString(dis);
					
					this.id_atividade = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.data_inicio = readDate(dis);
					
					this.data_fim = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.id_atividade,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_fim,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_funcao="+id_funcao);
		sb.append(",id_atividade="+id_atividade);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_fim="+String.valueOf(data_fim));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_funcao, other.id_funcao);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_atividade, other.id_atividade);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_fim;

				public java.util.Date getData_fim () {
					return this.data_fim;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_funcao = readString(dis);
					
					this.id_atividade = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.data_inicio = readDate(dis);
					
					this.data_fim = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.id_atividade,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_fim,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_funcao="+id_funcao);
		sb.append(",id_atividade="+id_atividade);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_fim="+String.valueOf(data_fim));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
out8Struct out8 = new out8Struct();





	
	/**
	 * [tMysqlOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_12", false);
		start_Hash.put("tMysqlOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_12 = 0;
		
    	class BytesLimit65535_tMysqlOutput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_12().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_12 = 5;
        if(updateKeyCount_tMysqlOutput_12 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_12 = 0;
int nb_line_update_tMysqlOutput_12 = 0;
int nb_line_inserted_tMysqlOutput_12 = 0;
int nb_line_deleted_tMysqlOutput_12 = 0;
int nb_line_rejected_tMysqlOutput_12 = 0;

int deletedCount_tMysqlOutput_12=0;
int updatedCount_tMysqlOutput_12=0;
int insertedCount_tMysqlOutput_12=0;

int rejectedCount_tMysqlOutput_12=0;

String tableName_tMysqlOutput_12 = "cadastro_servidor_funcao";
boolean whetherReject_tMysqlOutput_12 = false;

java.util.Calendar calendar_tMysqlOutput_12 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_12.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_12 = calendar_tMysqlOutput_12.getTime().getTime();
calendar_tMysqlOutput_12.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_12 = calendar_tMysqlOutput_12.getTime().getTime();
long date_tMysqlOutput_12;

java.sql.Connection conn_tMysqlOutput_12 = null;
	conn_tMysqlOutput_12 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	
   int batchSize_tMysqlOutput_12 = 10000;
   int batchSizeCounter_tMysqlOutput_12=0;

int count_tMysqlOutput_12=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_12 = conn_tMysqlOutput_12.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_12 = dbMetaData_tMysqlOutput_12.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_12 = false;
                                while(rsTable_tMysqlOutput_12.next()) {
                                    String table_tMysqlOutput_12 = rsTable_tMysqlOutput_12.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_12.equalsIgnoreCase("cadastro_servidor_funcao")) {
                                        whetherExist_tMysqlOutput_12 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_12.close();
                                if(!whetherExist_tMysqlOutput_12) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_12 = conn_tMysqlOutput_12.createStatement();
                                        stmtCreate_tMysqlOutput_12.execute("CREATE TABLE `" + tableName_tMysqlOutput_12 + "`(`id_pessoa` VARCHAR(255)   not null ,`id_funcao` VARCHAR(255)   not null ,`id_atividade` VARCHAR(255)   not null ,`id_org` INT(10)   not null ,`data_inicio` DATE  not null ,`data_fim` DATE ,`data_arquivo` DATE ,`id_intervalo` VARCHAR(255)  ,`id_lotacao` VARCHAR(255)  ,primary key(`id_pessoa`,`id_funcao`,`id_atividade`,`id_org`,`data_inicio`))");
                                    stmtCreate_tMysqlOutput_12.close();
                                }
	    String update_tMysqlOutput_12 = "UPDATE `" + "cadastro_servidor_funcao" + "` SET `data_fim` = ? WHERE `id_pessoa` = ? AND `id_funcao` = ? AND `id_atividade` = ? AND `id_org` = ? AND `data_inicio` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_12 = conn_tMysqlOutput_12.prepareStatement(update_tMysqlOutput_12);
	    

 



/**
 * [tMysqlOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_12 = 0;
		
    	class BytesLimit65535_tMap_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_12().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
    	class BytesLimit65535_tMysqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
		        conn_tMysqlInput_3 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "SELECT \n  `cadastro_servidor_funcao`.`id_pessoa`, \n  `cadastro_servidor_funcao`.`id_funcao`, \n  `cadastro_servidor_funcao`.`id_atividade`, \n  `cadastro_servidor_funcao`.`id_org`, \n  `cadastro_servidor_funcao`.`data_inicio`, \n  `cadastro_servidor_funcao`.`data_fim`, \n  `cadastro_servidor_funcao`.`data_arquivo`, \n  `cadastro_servidor_funcao`.`id_intervalo`, \n  `cadastro_servidor_funcao`.`id_lotacao`\nFROM `cadastro_servidor_funcao`\nWHERE `cadastro_servidor_funcao`.`data_fim` IS NULL";
			

                       globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);

		    java.sql.ResultSet rs_tMysqlInput_3 = null;
		try{
		    rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								row25.id_pessoa = null;
							} else {
	                         		
        	row25.id_pessoa = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								row25.id_funcao = null;
							} else {
	                         		
        	row25.id_funcao = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 3) {
								row25.id_atividade = null;
							} else {
	                         		
        	row25.id_atividade = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 4) {
								row25.id_org = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(4) != null) {
                row25.id_org = rs_tMysqlInput_3.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 5) {
								row25.data_inicio = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(5) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(5);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row25.data_inicio = rs_tMysqlInput_3.getTimestamp(5);
	            } else {
	                row25.data_inicio = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row25.data_inicio =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 6) {
								row25.data_fim = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(6) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(6);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row25.data_fim = rs_tMysqlInput_3.getTimestamp(6);
	            } else {
	                row25.data_fim = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row25.data_fim =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 7) {
								row25.data_arquivo = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(7) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row25.data_arquivo = rs_tMysqlInput_3.getTimestamp(7);
	            } else {
	                row25.data_arquivo = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row25.data_arquivo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 8) {
								row25.id_intervalo = null;
							} else {
	                         		
        	row25.id_intervalo = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 9) {
								row25.id_lotacao = null;
							} else {
	                         		
        	row25.id_lotacao = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 9, false);
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
// # Filter conditions 
if( 

TalendDate.compareDate(row25.data_arquivo,new SimpleDateFormat("yyyyMMdd").parse(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).substring(((String)globalMap.get("tFileInputTextFlat_1_FILENAME")).lastIndexOf("/") + 1).substring(0, 8)))==-1

 ) {
out8_tmp.id_pessoa = row25.id_pessoa ;
out8_tmp.id_funcao = row25.id_funcao ;
out8_tmp.id_atividade = row25.id_atividade ;
out8_tmp.id_org = row25.id_org ;
out8_tmp.data_inicio = row25.data_inicio ;
out8_tmp.data_fim = row25.data_arquivo ;
out8_tmp.data_arquivo = row25.data_arquivo ;
out8_tmp.id_intervalo = null;
out8_tmp.id_lotacao = null;
out8 = out8_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tMysqlOutput_12 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_12";

	

			//out8
			//out8


			
				if(execStat){
					runStat.updateStatOnConnection("out8"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_12 = false;
                    if(out8.data_fim != null) {
date_tMysqlOutput_12 = out8.data_fim.getTime();
if(date_tMysqlOutput_12 < year1_tMysqlOutput_12 || date_tMysqlOutput_12 >= year10000_tMysqlOutput_12) {
pstmt_tMysqlOutput_12.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_12.setTimestamp(1, new java.sql.Timestamp(date_tMysqlOutput_12));
}
} else {
pstmt_tMysqlOutput_12.setNull(1, java.sql.Types.DATE);
}


                    if(out8.id_pessoa == null) {
pstmt_tMysqlOutput_12.setNull(2 + count_tMysqlOutput_12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_12.setString(2 + count_tMysqlOutput_12, out8.id_pessoa);
}


                    if(out8.id_funcao == null) {
pstmt_tMysqlOutput_12.setNull(3 + count_tMysqlOutput_12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_12.setString(3 + count_tMysqlOutput_12, out8.id_funcao);
}


                    if(out8.id_atividade == null) {
pstmt_tMysqlOutput_12.setNull(4 + count_tMysqlOutput_12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_12.setString(4 + count_tMysqlOutput_12, out8.id_atividade);
}


                    pstmt_tMysqlOutput_12.setInt(5 + count_tMysqlOutput_12, out8.id_org);


                    if(out8.data_inicio != null) {
pstmt_tMysqlOutput_12.setTimestamp(6 + count_tMysqlOutput_12, new java.sql.Timestamp(out8.data_inicio.getTime()));
} else {
pstmt_tMysqlOutput_12.setNull(6 + count_tMysqlOutput_12, java.sql.Types.TIMESTAMP);
}


            pstmt_tMysqlOutput_12.addBatch();
            nb_line_tMysqlOutput_12++;

              batchSizeCounter_tMysqlOutput_12++;
                if ( batchSize_tMysqlOutput_12 <= batchSizeCounter_tMysqlOutput_12) {
                try {
                        int countSum_tMysqlOutput_12 = 0;
                        for(int countEach_tMysqlOutput_12: pstmt_tMysqlOutput_12.executeBatch()) {
                            countSum_tMysqlOutput_12 += (countEach_tMysqlOutput_12 < 0 ? 0 : countEach_tMysqlOutput_12);
                        }
                        updatedCount_tMysqlOutput_12 += countSum_tMysqlOutput_12;
                        batchSizeCounter_tMysqlOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_12 = 0;
                    for(int countEach_tMysqlOutput_12: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_12 += (countEach_tMysqlOutput_12 < 0 ? 0 : countEach_tMysqlOutput_12);
                    }
                    updatedCount_tMysqlOutput_12 += countSum_tMysqlOutput_12;
                    System.err.println(e.getMessage());
                }



                }

 


	tos_count_tMysqlOutput_12++;

/**
 * [tMysqlOutput_12 main ] stop
 */

} // End of branch "out8"







	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if(rs_tMysqlInput_3 !=null){
		rs_tMysqlInput_3.close();
	}
	stmt_tMysqlInput_3.close();
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMysqlOutput_12 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_12";

	



	
    try {
    	if(pstmt_tMysqlOutput_12 != null){
			int countSum_tMysqlOutput_12 = 0;
			
			for(int countEach_tMysqlOutput_12: pstmt_tMysqlOutput_12.executeBatch()) {
				countSum_tMysqlOutput_12 += (countEach_tMysqlOutput_12 < 0 ? 0 : countEach_tMysqlOutput_12);
			}
			
	    	
	    		updatedCount_tMysqlOutput_12 += countSum_tMysqlOutput_12;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_12 = 0;
		for(int countEach_tMysqlOutput_12: e.getUpdateCounts()) {
			countSum_tMysqlOutput_12 += (countEach_tMysqlOutput_12 < 0 ? 0 : countEach_tMysqlOutput_12);
		}
		
    	updatedCount_tMysqlOutput_12 += countSum_tMysqlOutput_12;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_12 != null) {
			
				pstmt_tMysqlOutput_12.close();
			
        }


	nb_line_deleted_tMysqlOutput_12=nb_line_deleted_tMysqlOutput_12+ deletedCount_tMysqlOutput_12;
	nb_line_update_tMysqlOutput_12=nb_line_update_tMysqlOutput_12 + updatedCount_tMysqlOutput_12;
	nb_line_inserted_tMysqlOutput_12=nb_line_inserted_tMysqlOutput_12 + insertedCount_tMysqlOutput_12;
	nb_line_rejected_tMysqlOutput_12=nb_line_rejected_tMysqlOutput_12 + rejectedCount_tMysqlOutput_12;
	
        globalMap.put("tMysqlOutput_12_NB_LINE",nb_line_tMysqlOutput_12);
        globalMap.put("tMysqlOutput_12_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_12);
        globalMap.put("tMysqlOutput_12_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_12);
        globalMap.put("tMysqlOutput_12_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_12);
        globalMap.put("tMysqlOutput_12_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_12);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_12", true);
end_Hash.put("tMysqlOutput_12", System.currentTimeMillis());




/**
 * [tMysqlOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tMysqlCommit_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_12";

	



	

 



/**
 * [tMysqlOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMysqlCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_3", false);
		start_Hash.put("tMysqlCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_3";

	
		int tos_count_tMysqlCommit_3 = 0;
		
    	class BytesLimit65535_tMysqlCommit_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_3().limitLog4jByte();

 



/**
 * [tMysqlCommit_3 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_3";

	

	java.sql.Connection conn_tMysqlCommit_3 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_3 != null && !conn_tMysqlCommit_3.isClosed()) {
	
			
			conn_tMysqlCommit_3.commit();
			
	
}

 


	tos_count_tMysqlCommit_3++;

/**
 * [tMysqlCommit_3 main ] stop
 */
	
	/**
	 * [tMysqlCommit_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_3";

	

 

ok_Hash.put("tMysqlCommit_3", true);
end_Hash.put("tMysqlCommit_3", System.currentTimeMillis());




/**
 * [tMysqlCommit_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlCommit_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMysqlInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_3";

	

 



/**
 * [tMysqlCommit_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_3_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public java.util.Date inicio;

				public java.util.Date getInicio () {
					return this.inicio;
				}
				
			    public java.util.Date fim;

				public java.util.Date getFim () {
					return this.fim;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_intervalo == null) ? 0 : this.id_intervalo.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.id_intervalo == null) {
							if (other.id_intervalo != null)
								return false;
						
						} else if (!this.id_intervalo.equals(other.id_intervalo))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.id_intervalo = this.id_intervalo;
	            other.inicio = this.inicio;
	            other.fim = this.fim;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.id_intervalo = this.id_intervalo;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_intervalo = readString(dis);
					
					this.inicio = readDate(dis);
					
					this.fim = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_intervalo,dos);
					
					// java.util.Date
				
						writeDate(this.inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fim,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_intervalo="+id_intervalo);
		sb.append(",inicio="+String.valueOf(inicio));
		sb.append(",fim="+String.valueOf(fim));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_intervalo, other.id_intervalo);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_fim;

				public java.util.Date getData_fim () {
					return this.data_fim;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.id_funcao == null) ? 0 : this.id_funcao.hashCode());
					
						result = prime * result + ((this.id_atividade == null) ? 0 : this.id_atividade.hashCode());
					
							result = prime * result + (int) this.id_org;
						
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out12Struct other = (out12Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.id_funcao == null) {
							if (other.id_funcao != null)
								return false;
						
						} else if (!this.id_funcao.equals(other.id_funcao))
						
							return false;
					
						if (this.id_atividade == null) {
							if (other.id_atividade != null)
								return false;
						
						} else if (!this.id_atividade.equals(other.id_atividade))
						
							return false;
					
						if (this.id_org != other.id_org)
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out12Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.id_funcao = this.id_funcao;
	            other.id_atividade = this.id_atividade;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_fim = this.data_fim;
	            other.data_arquivo = this.data_arquivo;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(out12Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.id_funcao = this.id_funcao;
	            	other.id_atividade = this.id_atividade;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_funcao = readString(dis);
					
					this.id_atividade = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.data_inicio = readDate(dis);
					
					this.data_fim = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.id_atividade,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_fim,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_funcao="+id_funcao);
		sb.append(",id_atividade="+id_atividade);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_fim="+String.valueOf(data_fim));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_funcao, other.id_funcao);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_atividade, other.id_atividade);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String id_funcao;

				public String getId_funcao () {
					return this.id_funcao;
				}
				
			    public String id_atividade;

				public String getId_atividade () {
					return this.id_atividade;
				}
				
			    public int id_org;

				public int getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_fim;

				public java.util.Date getData_fim () {
					return this.data_fim;
				}
				
			    public java.util.Date data_arquivo;

				public java.util.Date getData_arquivo () {
					return this.data_arquivo;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.id_funcao = readString(dis);
					
					this.id_atividade = readString(dis);
					
			        this.id_org = dis.readInt();
					
					this.data_inicio = readDate(dis);
					
					this.data_fim = readDate(dis);
					
					this.data_arquivo = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.id_funcao,dos);
					
					// String
				
						writeString(this.id_atividade,dos);
					
					// int
				
		            	dos.writeInt(this.id_org);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_fim,dos);
					
					// java.util.Date
				
						writeDate(this.data_arquivo,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",id_funcao="+id_funcao);
		sb.append(",id_atividade="+id_atividade);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_fim="+String.valueOf(data_fim));
		sb.append(",data_arquivo="+String.valueOf(data_arquivo));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out2Struct out2 = new out2Struct();
out12Struct out12 = new out12Struct();





	
	/**
	 * [tMysqlOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_13", false);
		start_Hash.put("tMysqlOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_13 = 0;
		
    	class BytesLimit65535_tMysqlOutput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_13().limitLog4jByte();






int nb_line_tMysqlOutput_13 = 0;
int nb_line_update_tMysqlOutput_13 = 0;
int nb_line_inserted_tMysqlOutput_13 = 0;
int nb_line_deleted_tMysqlOutput_13 = 0;
int nb_line_rejected_tMysqlOutput_13 = 0;

int deletedCount_tMysqlOutput_13=0;
int updatedCount_tMysqlOutput_13=0;
int insertedCount_tMysqlOutput_13=0;

int rejectedCount_tMysqlOutput_13=0;

String tableName_tMysqlOutput_13 = "cadastro_intervalo";
boolean whetherReject_tMysqlOutput_13 = false;

java.util.Calendar calendar_tMysqlOutput_13 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_13.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_13 = calendar_tMysqlOutput_13.getTime().getTime();
calendar_tMysqlOutput_13.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_13 = calendar_tMysqlOutput_13.getTime().getTime();
long date_tMysqlOutput_13;

java.sql.Connection conn_tMysqlOutput_13 = null;
	conn_tMysqlOutput_13 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_13=0;
    	
	    String insert_tMysqlOutput_13 = "INSERT IGNORE INTO `" + "cadastro_intervalo" + "` (`id_intervalo`,`inicio`,`fim`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmt_tMysqlOutput_13 = conn_tMysqlOutput_13.prepareStatement(insert_tMysqlOutput_13);
	    

 



/**
 * [tMysqlOutput_13 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_2", false);
		start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_2 = 0;
		
    	class BytesLimit65535_tMysqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_2().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_2 = 5;
        if(updateKeyCount_tMysqlOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_2 = 0;
int nb_line_update_tMysqlOutput_2 = 0;
int nb_line_inserted_tMysqlOutput_2 = 0;
int nb_line_deleted_tMysqlOutput_2 = 0;
int nb_line_rejected_tMysqlOutput_2 = 0;

int deletedCount_tMysqlOutput_2=0;
int updatedCount_tMysqlOutput_2=0;
int insertedCount_tMysqlOutput_2=0;

int rejectedCount_tMysqlOutput_2=0;

String tableName_tMysqlOutput_2 = "cadastro_servidor_funcao";
boolean whetherReject_tMysqlOutput_2 = false;

java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
long date_tMysqlOutput_2;

java.sql.Connection conn_tMysqlOutput_2 = null;
	conn_tMysqlOutput_2 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	
   int batchSize_tMysqlOutput_2 = 10000;
   int batchSizeCounter_tMysqlOutput_2=0;

int count_tMysqlOutput_2=0;
    	
	    String update_tMysqlOutput_2 = "UPDATE `" + "cadastro_servidor_funcao" + "` SET `id_intervalo` = ? WHERE `id_pessoa` = ? AND `id_funcao` = ? AND `id_atividade` = ? AND `id_org` = ? AND `data_inicio` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2.prepareStatement(update_tMysqlOutput_2);
	    

 



/**
 * [tMysqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
out12Struct out12_tmp = new out12Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_5", false);
		start_Hash.put("tMysqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_5";

	
		int tos_count_tMysqlInput_5 = 0;
		
    	class BytesLimit65535_tMysqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_5().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5.getTime();
		    int nb_line_tMysqlInput_5 = 0;
		    java.sql.Connection conn_tMysqlInput_5 = null;
		        conn_tMysqlInput_5 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5.createStatement();

		    String dbquery_tMysqlInput_5 = "SELECT \n  `cadastro_servidor_funcao`.`id_pessoa`, \n  `cadastro_servidor_funcao`.`id_funcao`, \n  `cadastro_servidor_funcao`.`id_atividade`, \n  `cadastro_servidor_funcao`.`id_org`, \n  `cadastro_servidor_funcao`.`data_inicio`, \n  `cadastro_servidor_funcao`.`data_fim`, \n  `cadastro_servidor_funcao`.`data_arquivo`, \n  `cadastro_servidor_funcao`.`id_intervalo`, \n  `cadastro_servidor_funcao`.`id_lotacao`\nFROM `cadastro_servidor_funcao`";
			

                       globalMap.put("tMysqlInput_5_QUERY",dbquery_tMysqlInput_5);

		    java.sql.ResultSet rs_tMysqlInput_5 = null;
		try{
		    rs_tMysqlInput_5 = stmt_tMysqlInput_5.executeQuery(dbquery_tMysqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5.getMetaData();
		    int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5.getColumnCount();

		    String tmpContent_tMysqlInput_5 = null;
		    
		    
		    while (rs_tMysqlInput_5.next()) {
		        nb_line_tMysqlInput_5++;
		        
							if(colQtyInRs_tMysqlInput_5 < 1) {
								row5.id_pessoa = null;
							} else {
	                         		
        	row5.id_pessoa = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 2) {
								row5.id_funcao = null;
							} else {
	                         		
        	row5.id_funcao = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 3) {
								row5.id_atividade = null;
							} else {
	                         		
        	row5.id_atividade = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 4) {
								row5.id_org = 0;
							} else {
		                          
            if(rs_tMysqlInput_5.getObject(4) != null) {
                row5.id_org = rs_tMysqlInput_5.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_5 < 5) {
								row5.data_inicio = null;
							} else {
										
	        if(rs_tMysqlInput_5.getString(5) != null) {
	            String dateString_tMysqlInput_5 = rs_tMysqlInput_5.getString(5);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_5) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_5)) {
	                row5.data_inicio = rs_tMysqlInput_5.getTimestamp(5);
	            } else {
	                row5.data_inicio = (java.util.Date) year0_tMysqlInput_5.clone();
	            }
	        } else {
	            row5.data_inicio =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_5 < 6) {
								row5.data_fim = null;
							} else {
										
	        if(rs_tMysqlInput_5.getString(6) != null) {
	            String dateString_tMysqlInput_5 = rs_tMysqlInput_5.getString(6);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_5) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_5)) {
	                row5.data_fim = rs_tMysqlInput_5.getTimestamp(6);
	            } else {
	                row5.data_fim = (java.util.Date) year0_tMysqlInput_5.clone();
	            }
	        } else {
	            row5.data_fim =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_5 < 7) {
								row5.data_arquivo = null;
							} else {
										
	        if(rs_tMysqlInput_5.getString(7) != null) {
	            String dateString_tMysqlInput_5 = rs_tMysqlInput_5.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_5) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_5)) {
	                row5.data_arquivo = rs_tMysqlInput_5.getTimestamp(7);
	            } else {
	                row5.data_arquivo = (java.util.Date) year0_tMysqlInput_5.clone();
	            }
	        } else {
	            row5.data_arquivo =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_5 < 8) {
								row5.id_intervalo = null;
							} else {
	                         		
        	row5.id_intervalo = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 9) {
								row5.id_lotacao = null;
							} else {
	                         		
        	row5.id_lotacao = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 9, false);
		                    }
					

 



/**
 * [tMysqlInput_5 begin ] stop
 */
	
	/**
	 * [tMysqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 


	tos_count_tMysqlInput_5++;

/**
 * [tMysqlInput_5 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;
out12 = null;


// # Output table : 'out2'
out2_tmp.id_intervalo = ((row5.data_inicio == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row5.data_inicio)) + "-" + ((row5.data_fim == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row5.data_fim)) ;
out2_tmp.inicio = (row5.data_inicio == null) ? null : row5.data_inicio ;
out2_tmp.fim = (row5.data_fim == null) ? null : row5.data_fim ;
out2 = out2_tmp;

// # Output table : 'out12'
out12_tmp.id_pessoa = row5.id_pessoa ;
out12_tmp.id_funcao = row5.id_funcao ;
out12_tmp.id_atividade = row5.id_atividade ;
out12_tmp.id_org = row5.id_org ;
out12_tmp.data_inicio = row5.data_inicio ;
out12_tmp.data_fim = null;
out12_tmp.data_arquivo = null;
out12_tmp.id_intervalo = ((row5.data_inicio == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row5.data_inicio)) + "-" + ((row5.data_fim == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row5.data_fim)) ;
out12_tmp.id_lotacao = null;
out12 = out12_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMysqlOutput_13 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_13";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_13 = false;
                        if(out2.id_intervalo == null) {
pstmt_tMysqlOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_13.setString(1, out2.id_intervalo);
}

                        if(out2.inicio != null) {
date_tMysqlOutput_13 = out2.inicio.getTime();
if(date_tMysqlOutput_13 < year1_tMysqlOutput_13 || date_tMysqlOutput_13 >= year10000_tMysqlOutput_13) {
pstmt_tMysqlOutput_13.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_13.setTimestamp(2, new java.sql.Timestamp(date_tMysqlOutput_13));
}
} else {
pstmt_tMysqlOutput_13.setNull(2, java.sql.Types.DATE);
}

                        if(out2.fim != null) {
date_tMysqlOutput_13 = out2.fim.getTime();
if(date_tMysqlOutput_13 < year1_tMysqlOutput_13 || date_tMysqlOutput_13 >= year10000_tMysqlOutput_13) {
pstmt_tMysqlOutput_13.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_13.setTimestamp(3, new java.sql.Timestamp(date_tMysqlOutput_13));
}
} else {
pstmt_tMysqlOutput_13.setNull(3, java.sql.Types.DATE);
}

                try {
                    nb_line_tMysqlOutput_13++;
                    insertedCount_tMysqlOutput_13 = insertedCount_tMysqlOutput_13 + pstmt_tMysqlOutput_13.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_13 = true;
                            System.err.print(e.getMessage());
                }

 


	tos_count_tMysqlOutput_13++;

/**
 * [tMysqlOutput_13 main ] stop
 */

} // End of branch "out2"




// Start of branch "out12"
if(out12 != null) { 



	
	/**
	 * [tMysqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

			//out12
			//out12


			
				if(execStat){
					runStat.updateStatOnConnection("out12"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_2 = false;
                    if(out12.id_intervalo == null) {
pstmt_tMysqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(1, out12.id_intervalo);
}


                    if(out12.id_pessoa == null) {
pstmt_tMysqlOutput_2.setNull(2 + count_tMysqlOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(2 + count_tMysqlOutput_2, out12.id_pessoa);
}


                    if(out12.id_funcao == null) {
pstmt_tMysqlOutput_2.setNull(3 + count_tMysqlOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(3 + count_tMysqlOutput_2, out12.id_funcao);
}


                    if(out12.id_atividade == null) {
pstmt_tMysqlOutput_2.setNull(4 + count_tMysqlOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(4 + count_tMysqlOutput_2, out12.id_atividade);
}


                    pstmt_tMysqlOutput_2.setInt(5 + count_tMysqlOutput_2, out12.id_org);


                    if(out12.data_inicio != null) {
pstmt_tMysqlOutput_2.setTimestamp(6 + count_tMysqlOutput_2, new java.sql.Timestamp(out12.data_inicio.getTime()));
} else {
pstmt_tMysqlOutput_2.setNull(6 + count_tMysqlOutput_2, java.sql.Types.TIMESTAMP);
}


            pstmt_tMysqlOutput_2.addBatch();
            nb_line_tMysqlOutput_2++;

              batchSizeCounter_tMysqlOutput_2++;
                if ( batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                        }
                        updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                        batchSizeCounter_tMysqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());
                }



                }

 


	tos_count_tMysqlOutput_2++;

/**
 * [tMysqlOutput_2 main ] stop
 */

} // End of branch "out12"







	
	/**
	 * [tMysqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

	}
}finally{
	if(rs_tMysqlInput_5 !=null){
		rs_tMysqlInput_5.close();
	}
	stmt_tMysqlInput_5.close();
}

		   globalMap.put("tMysqlInput_5_NB_LINE",nb_line_tMysqlInput_5);
		


 

ok_Hash.put("tMysqlInput_5", true);
end_Hash.put("tMysqlInput_5", System.currentTimeMillis());




/**
 * [tMysqlInput_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlOutput_13 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_13";

	



	

        if(pstmt_tMysqlOutput_13 != null) {
			
				pstmt_tMysqlOutput_13.close();
			
        }


	nb_line_deleted_tMysqlOutput_13=nb_line_deleted_tMysqlOutput_13+ deletedCount_tMysqlOutput_13;
	nb_line_update_tMysqlOutput_13=nb_line_update_tMysqlOutput_13 + updatedCount_tMysqlOutput_13;
	nb_line_inserted_tMysqlOutput_13=nb_line_inserted_tMysqlOutput_13 + insertedCount_tMysqlOutput_13;
	nb_line_rejected_tMysqlOutput_13=nb_line_rejected_tMysqlOutput_13 + rejectedCount_tMysqlOutput_13;
	
        globalMap.put("tMysqlOutput_13_NB_LINE",nb_line_tMysqlOutput_13);
        globalMap.put("tMysqlOutput_13_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_13);
        globalMap.put("tMysqlOutput_13_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_13);
        globalMap.put("tMysqlOutput_13_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_13);
        globalMap.put("tMysqlOutput_13_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_13);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_13", true);
end_Hash.put("tMysqlOutput_13", System.currentTimeMillis());




/**
 * [tMysqlOutput_13 end ] stop
 */




	
	/**
	 * [tMysqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	
    try {
    	if(pstmt_tMysqlOutput_2 != null){
			int countSum_tMysqlOutput_2 = 0;
			
			for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
				countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
			}
			
	    	
	    		updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_2 = 0;
		for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
			countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
		}
		
    	updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_2 != null) {
			
				pstmt_tMysqlOutput_2.close();
			
        }


	nb_line_deleted_tMysqlOutput_2=nb_line_deleted_tMysqlOutput_2+ deletedCount_tMysqlOutput_2;
	nb_line_update_tMysqlOutput_2=nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
	nb_line_inserted_tMysqlOutput_2=nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
	nb_line_rejected_tMysqlOutput_2=nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;
	
        globalMap.put("tMysqlOutput_2_NB_LINE",nb_line_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_2", true);
end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());




/**
 * [tMysqlOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tMysqlCommit_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_13";

	



	

 



/**
 * [tMysqlOutput_13 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	

 



/**
 * [tMysqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlCommit_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_6", false);
		start_Hash.put("tMysqlCommit_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_6";

	
		int tos_count_tMysqlCommit_6 = 0;
		
    	class BytesLimit65535_tMysqlCommit_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_6().limitLog4jByte();

 



/**
 * [tMysqlCommit_6 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_6";

	

	java.sql.Connection conn_tMysqlCommit_6 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_6 != null && !conn_tMysqlCommit_6.isClosed()) {
	
			
			conn_tMysqlCommit_6.commit();
			
	
}

 


	tos_count_tMysqlCommit_6++;

/**
 * [tMysqlCommit_6 main ] stop
 */
	
	/**
	 * [tMysqlCommit_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_6";

	

 

ok_Hash.put("tMysqlCommit_6", true);
end_Hash.put("tMysqlCommit_6", System.currentTimeMillis());




/**
 * [tMysqlCommit_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_6";

	

 



/**
 * [tMysqlCommit_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_6_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				
			    public BigDecimal gratificacao_natalina;

				public BigDecimal getGratificacao_natalina () {
					return this.gratificacao_natalina;
				}
				
			    public BigDecimal remuneracao_basica_bruta;

				public BigDecimal getRemuneracao_basica_bruta () {
					return this.remuneracao_basica_bruta;
				}
				
			    public BigDecimal ferias;

				public BigDecimal getFerias () {
					return this.ferias;
				}
				
			    public BigDecimal outras_remuneracoes;

				public BigDecimal getOutras_remuneracoes () {
					return this.outras_remuneracoes;
				}
				
			    public BigDecimal irrf;

				public BigDecimal getIrrf () {
					return this.irrf;
				}
				
			    public BigDecimal pss_rpgs;

				public BigDecimal getPss_rpgs () {
					return this.pss_rpgs;
				}
				
			    public BigDecimal fundo_saude;

				public BigDecimal getFundo_saude () {
					return this.fundo_saude;
				}
				
			    public BigDecimal outras_deducoes;

				public BigDecimal getOutras_deducoes () {
					return this.outras_deducoes;
				}
				
			    public BigDecimal verbas_indenizatorias;

				public BigDecimal getVerbas_indenizatorias () {
					return this.verbas_indenizatorias;
				}
				
			    public java.util.Date data_remuneracao;

				public java.util.Date getData_remuneracao () {
					return this.data_remuneracao;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
					this.id_cargo = readString(dis);
					
						this.id_org = readInteger(dis);
					
						this.gratificacao_natalina = (BigDecimal) dis.readObject();
					
						this.remuneracao_basica_bruta = (BigDecimal) dis.readObject();
					
						this.ferias = (BigDecimal) dis.readObject();
					
						this.outras_remuneracoes = (BigDecimal) dis.readObject();
					
						this.irrf = (BigDecimal) dis.readObject();
					
						this.pss_rpgs = (BigDecimal) dis.readObject();
					
						this.fundo_saude = (BigDecimal) dis.readObject();
					
						this.outras_deducoes = (BigDecimal) dis.readObject();
					
						this.verbas_indenizatorias = (BigDecimal) dis.readObject();
					
					this.data_remuneracao = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gratificacao_natalina);
					
					// BigDecimal
				
       			    	dos.writeObject(this.remuneracao_basica_bruta);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ferias);
					
					// BigDecimal
				
       			    	dos.writeObject(this.outras_remuneracoes);
					
					// BigDecimal
				
       			    	dos.writeObject(this.irrf);
					
					// BigDecimal
				
       			    	dos.writeObject(this.pss_rpgs);
					
					// BigDecimal
				
       			    	dos.writeObject(this.fundo_saude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.outras_deducoes);
					
					// BigDecimal
				
       			    	dos.writeObject(this.verbas_indenizatorias);
					
					// java.util.Date
				
						writeDate(this.data_remuneracao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",gratificacao_natalina="+String.valueOf(gratificacao_natalina));
		sb.append(",remuneracao_basica_bruta="+String.valueOf(remuneracao_basica_bruta));
		sb.append(",ferias="+String.valueOf(ferias));
		sb.append(",outras_remuneracoes="+String.valueOf(outras_remuneracoes));
		sb.append(",irrf="+String.valueOf(irrf));
		sb.append(",pss_rpgs="+String.valueOf(pss_rpgs));
		sb.append(",fundo_saude="+String.valueOf(fundo_saude));
		sb.append(",outras_deducoes="+String.valueOf(outras_deducoes));
		sb.append(",verbas_indenizatorias="+String.valueOf(verbas_indenizatorias));
		sb.append(",data_remuneracao="+String.valueOf(data_remuneracao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputTextFlat_2Process(globalMap);

		row6Struct row6 = new row6Struct();
row8Struct row8 = new row8Struct();
out4Struct out4 = new out4Struct();






	
	/**
	 * [tMysqlOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_14", false);
		start_Hash.put("tMysqlOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_14 = 0;
		
    	class BytesLimit65535_tMysqlOutput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_14().limitLog4jByte();






int nb_line_tMysqlOutput_14 = 0;
int nb_line_update_tMysqlOutput_14 = 0;
int nb_line_inserted_tMysqlOutput_14 = 0;
int nb_line_deleted_tMysqlOutput_14 = 0;
int nb_line_rejected_tMysqlOutput_14 = 0;

int deletedCount_tMysqlOutput_14=0;
int updatedCount_tMysqlOutput_14=0;
int insertedCount_tMysqlOutput_14=0;

int rejectedCount_tMysqlOutput_14=0;

String tableName_tMysqlOutput_14 = "cadastro_remuneracao";
boolean whetherReject_tMysqlOutput_14 = false;

java.util.Calendar calendar_tMysqlOutput_14 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_14.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_14 = calendar_tMysqlOutput_14.getTime().getTime();
calendar_tMysqlOutput_14.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_14 = calendar_tMysqlOutput_14.getTime().getTime();
long date_tMysqlOutput_14;

java.sql.Connection conn_tMysqlOutput_14 = null;
	conn_tMysqlOutput_14 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_14=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_14 = conn_tMysqlOutput_14.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_14 = dbMetaData_tMysqlOutput_14.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_14 = false;
                                while(rsTable_tMysqlOutput_14.next()) {
                                    String table_tMysqlOutput_14 = rsTable_tMysqlOutput_14.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_14.equalsIgnoreCase("cadastro_remuneracao")) {
                                        whetherExist_tMysqlOutput_14 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_14.close();
                                if(!whetherExist_tMysqlOutput_14) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_14 = conn_tMysqlOutput_14.createStatement();
                                        stmtCreate_tMysqlOutput_14.execute("CREATE TABLE `" + tableName_tMysqlOutput_14 + "`(`id_pessoa` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)   not null ,`id_cargo` VARCHAR(255)  ,`id_org` INT(10)  ,`gratificacao_natalina` DECIMAL(20,2)  ,`remuneracao_basica_bruta` DECIMAL(20,2)  ,`ferias` DECIMAL(20,2)  ,`outras_remuneracoes` DECIMAL(20,2)  ,`irrf` DECIMAL(20,2)  ,`pss_rpgs` DECIMAL(20,2)  ,`fundo_saude` DECIMAL(20,2)  ,`outras_deducoes` DECIMAL(20,2)  ,`verbas_indenizatorias` DECIMAL(20,2)  ,`data_remuneracao` DATETIME )");
                                    stmtCreate_tMysqlOutput_14.close();
                                }

				String insert_tMysqlOutput_14 = "INSERT INTO `" + "cadastro_remuneracao" + "` (`id_pessoa`,`matricula_reduzida`,`id_cargo`,`id_org`,`gratificacao_natalina`,`remuneracao_basica_bruta`,`ferias`,`outras_remuneracoes`,`irrf`,`pss_rpgs`,`fundo_saude`,`outras_deducoes`,`verbas_indenizatorias`,`data_remuneracao`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_14 = 100;
	   			int batchSizeCounter_tMysqlOutput_14=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_14 = conn_tMysqlOutput_14.prepareStatement(insert_tMysqlOutput_14);


 



/**
 * [tMysqlOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	String id_pessoa;
	String id_cargo;
	String matricula_reduzida;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_3 = 0;
		
    	class BytesLimit65535_tFilterRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_3().limitLog4jByte();
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		
    	class BytesLimit65535_tHashInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_1().limitLog4jByte();


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_child_job_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row13Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row13Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.Id_SERVIDOR_PORTAL = next_tHashInput_1.Id_SERVIDOR_PORTAL;
	row6.NOME = next_tHashInput_1.NOME;
	row6.CPF = next_tHashInput_1.CPF;
	row6.MATRICULA = next_tHashInput_1.MATRICULA;
	row6.DESCRICAO_CARGO = next_tHashInput_1.DESCRICAO_CARGO;
	row6.CLASSE_CARGO = next_tHashInput_1.CLASSE_CARGO;
	row6.REFERENCIA_CARGO = next_tHashInput_1.REFERENCIA_CARGO;
	row6.PADRAO_CARGO = next_tHashInput_1.PADRAO_CARGO;
	row6.NIVEL_CARGO = next_tHashInput_1.NIVEL_CARGO;
	row6.SIGLA_FUNCAO = next_tHashInput_1.SIGLA_FUNCAO;
	row6.NIVEL_FUNCAO = next_tHashInput_1.NIVEL_FUNCAO;
	row6.FUNCAO = next_tHashInput_1.FUNCAO;
	row6.CODIGO_ATIVIDADE = next_tHashInput_1.CODIGO_ATIVIDADE;
	row6.ATIVIDADE = next_tHashInput_1.ATIVIDADE;
	row6.COD_ORG_LOTACAO = next_tHashInput_1.COD_ORG_LOTACAO;
	row6.ORG_LOTACAO = next_tHashInput_1.ORG_LOTACAO;
	row6.COD_ORG_EXERCICIO = next_tHashInput_1.COD_ORG_EXERCICIO;
	row6.TIPO_VINCULO = next_tHashInput_1.TIPO_VINCULO;
	row6.SITUACAO_VINCULO = next_tHashInput_1.SITUACAO_VINCULO;
	row6.DATA_INICIO_AFASTAMENTO = next_tHashInput_1.DATA_INICIO_AFASTAMENTO;
	row6.DATA_TERMINO_AFASTAMENTO = next_tHashInput_1.DATA_TERMINO_AFASTAMENTO;
	row6.REGIME_JURIDICO = next_tHashInput_1.REGIME_JURIDICO;
	row6.JORNADA_DE_TRABALHO = next_tHashInput_1.JORNADA_DE_TRABALHO;
	row6.DATA_INGRESSO_CARGOFUNCAO = next_tHashInput_1.DATA_INGRESSO_CARGOFUNCAO;
	row6.DATA_INGRESSO_ORGAO = next_tHashInput_1.DATA_INGRESSO_ORGAO;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */

	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

          row8 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((row6.TIPO_VINCULO == null? false : row6.TIPO_VINCULO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(2))) == 0)
                           , "TIPO_VINCULO.compareTo(2) == 0 failed");
		 	
      ope_tFilterRow_3.matches((// code sample : use row6 to define the condition.
// row6.columnName1.equals("foo") ||!(row6.columnName2.equals("bar"))
// replace the following expression by your own filter condition
(row6.SITUACAO_VINCULO.equals("CONT.PROF.SUBSTITUTO") || row6.SITUACAO_VINCULO.equals("ATIVO PERMANENTE")) && row6.COD_ORG_LOTACAO.equals(row6.COD_ORG_EXERCICIO)
), "advanced condition failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row8 == null){ 
                row8 = new row8Struct();
              }
               row8.Id_SERVIDOR_PORTAL = row6.Id_SERVIDOR_PORTAL;
               row8.NOME = row6.NOME;
               row8.CPF = row6.CPF;
               row8.MATRICULA = row6.MATRICULA;
               row8.DESCRICAO_CARGO = row6.DESCRICAO_CARGO;
               row8.CLASSE_CARGO = row6.CLASSE_CARGO;
               row8.REFERENCIA_CARGO = row6.REFERENCIA_CARGO;
               row8.PADRAO_CARGO = row6.PADRAO_CARGO;
               row8.NIVEL_CARGO = row6.NIVEL_CARGO;
               row8.SIGLA_FUNCAO = row6.SIGLA_FUNCAO;
               row8.NIVEL_FUNCAO = row6.NIVEL_FUNCAO;
               row8.FUNCAO = row6.FUNCAO;
               row8.CODIGO_ATIVIDADE = row6.CODIGO_ATIVIDADE;
               row8.ATIVIDADE = row6.ATIVIDADE;
               row8.COD_ORG_LOTACAO = row6.COD_ORG_LOTACAO;
               row8.ORG_LOTACAO = row6.ORG_LOTACAO;
               row8.COD_ORG_EXERCICIO = row6.COD_ORG_EXERCICIO;
               row8.TIPO_VINCULO = row6.TIPO_VINCULO;
               row8.SITUACAO_VINCULO = row6.SITUACAO_VINCULO;
               row8.DATA_INICIO_AFASTAMENTO = row6.DATA_INICIO_AFASTAMENTO;
               row8.DATA_TERMINO_AFASTAMENTO = row6.DATA_TERMINO_AFASTAMENTO;
               row8.REGIME_JURIDICO = row6.REGIME_JURIDICO;
               row8.JORNADA_DE_TRABALHO = row6.JORNADA_DE_TRABALHO;
               row8.DATA_INGRESSO_CARGOFUNCAO = row6.DATA_INGRESSO_CARGOFUNCAO;
               row8.DATA_INGRESSO_ORGAO = row6.DATA_INGRESSO_ORGAO;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		row7HashKey.ID_SERVIDOR_PORTAL = row8.Id_SERVIDOR_PORTAL ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							row7Struct row7 = null;
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.id_pessoa = row8.CPF.substring(4, 11) + "-" + row8.NOME ;
Var.id_cargo = row8.DESCRICAO_CARGO+"-"+row8.CLASSE_CARGO ;
Var.matricula_reduzida = row8.MATRICULA.substring(0, 3) ;// ###############################
        // ###############################
        // # Output tables

out4 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out4'
out4_tmp.id_pessoa = Var.id_pessoa ;
out4_tmp.matricula_reduzida = Var.matricula_reduzida ;
out4_tmp.id_cargo = Var.id_cargo ;
out4_tmp.id_org = row8.COD_ORG_LOTACAO ;
out4_tmp.gratificacao_natalina = new BigDecimal(row7.GRATIFICACAO_NATALINA.replace(",", "."));
out4_tmp.remuneracao_basica_bruta = new BigDecimal(row7.REMUNERACAO_BASICA_BRUTA.replace(",", ".")) ;
out4_tmp.ferias = new BigDecimal(row7.FERIAS.replace(",", ".")) ;
out4_tmp.outras_remuneracoes = new BigDecimal(row7.OUTRAS_REMUNERACOES_EVENTUAIS.replace(",", ".")) ;
out4_tmp.irrf = new BigDecimal(row7.IRRF.replace(",", ".")) ;
out4_tmp.pss_rpgs = new BigDecimal(row7.PSS_RPGS.replace(",", ".")) ;
out4_tmp.fundo_saude = new BigDecimal(row7.FUNDO_DE_SAUDE.replace(",", ".")) ;
out4_tmp.outras_deducoes = new BigDecimal(row7.DEMAIS_DEDUCOES.replace(",", ".")) ;
out4_tmp.verbas_indenizatorias = new BigDecimal(row7.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL.replace(",", ".")) ;
out4_tmp.data_remuneracao = TalendDate.parseDate("MM-yyyy",row7.MES+"-"+row7.ANO) ;
out4 = out4_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tMysqlOutput_14 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_14";

	

			//out4
			//out4


			
				if(execStat){
					runStat.updateStatOnConnection("out4"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_14 = false;
                            if(out4.id_pessoa == null) {
pstmt_tMysqlOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_14.setString(1, out4.id_pessoa);
}

                            if(out4.matricula_reduzida == null) {
pstmt_tMysqlOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_14.setString(2, out4.matricula_reduzida);
}

                            if(out4.id_cargo == null) {
pstmt_tMysqlOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_14.setString(3, out4.id_cargo);
}

                            if(out4.id_org == null) {
pstmt_tMysqlOutput_14.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_14.setInt(4, out4.id_org);
}

                            pstmt_tMysqlOutput_14.setBigDecimal(5, out4.gratificacao_natalina);

                            pstmt_tMysqlOutput_14.setBigDecimal(6, out4.remuneracao_basica_bruta);

                            pstmt_tMysqlOutput_14.setBigDecimal(7, out4.ferias);

                            pstmt_tMysqlOutput_14.setBigDecimal(8, out4.outras_remuneracoes);

                            pstmt_tMysqlOutput_14.setBigDecimal(9, out4.irrf);

                            pstmt_tMysqlOutput_14.setBigDecimal(10, out4.pss_rpgs);

                            pstmt_tMysqlOutput_14.setBigDecimal(11, out4.fundo_saude);

                            pstmt_tMysqlOutput_14.setBigDecimal(12, out4.outras_deducoes);

                            pstmt_tMysqlOutput_14.setBigDecimal(13, out4.verbas_indenizatorias);

                            if(out4.data_remuneracao != null) {
date_tMysqlOutput_14 = out4.data_remuneracao.getTime();
if(date_tMysqlOutput_14 < year1_tMysqlOutput_14 || date_tMysqlOutput_14 >= year10000_tMysqlOutput_14) {
pstmt_tMysqlOutput_14.setString(14, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_14.setTimestamp(14, new java.sql.Timestamp(date_tMysqlOutput_14));
}
} else {
pstmt_tMysqlOutput_14.setNull(14, java.sql.Types.DATE);
}

                    pstmt_tMysqlOutput_14.addBatch();
                    nb_line_tMysqlOutput_14++;

                      batchSizeCounter_tMysqlOutput_14++;
                if ( batchSize_tMysqlOutput_14 <= batchSizeCounter_tMysqlOutput_14) {
                try {
                        int countSum_tMysqlOutput_14 = 0;
                        for(int countEach_tMysqlOutput_14: pstmt_tMysqlOutput_14.executeBatch()) {
                            countSum_tMysqlOutput_14 += (countEach_tMysqlOutput_14 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_14 += countSum_tMysqlOutput_14;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_14 = 0;
                    for(int countEach_tMysqlOutput_14: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_14 += (countEach_tMysqlOutput_14 < 0 ? 0 : countEach_tMysqlOutput_14);
                    }
                    insertedCount_tMysqlOutput_14 += countSum_tMysqlOutput_14;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_14 = 0;
            }

 


	tos_count_tMysqlOutput_14++;

/**
 * [tMysqlOutput_14 main ] stop
 */

} // End of branch "out4"



	
		} // close loop of lookup 'row7' // G_TM_M_043
	

} // End of branch "row8"







	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_child_job_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMysqlOutput_14 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_14";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_14 != 0) {
							int countSum_tMysqlOutput_14 = 0;
							
							for(int countEach_tMysqlOutput_14: pstmt_tMysqlOutput_14.executeBatch()) {
								countSum_tMysqlOutput_14 += (countEach_tMysqlOutput_14 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_14 += countSum_tMysqlOutput_14;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_14 = 0;
					for(int countEach_tMysqlOutput_14: e.getUpdateCounts()) {
						countSum_tMysqlOutput_14 += (countEach_tMysqlOutput_14 < 0 ? 0 : countEach_tMysqlOutput_14);
					}
					
            	    insertedCount_tMysqlOutput_14 += countSum_tMysqlOutput_14;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_14 = 0;
    		
	

        if(pstmt_tMysqlOutput_14 != null) {
			
				pstmt_tMysqlOutput_14.close();
			
        }


	nb_line_deleted_tMysqlOutput_14=nb_line_deleted_tMysqlOutput_14+ deletedCount_tMysqlOutput_14;
	nb_line_update_tMysqlOutput_14=nb_line_update_tMysqlOutput_14 + updatedCount_tMysqlOutput_14;
	nb_line_inserted_tMysqlOutput_14=nb_line_inserted_tMysqlOutput_14 + insertedCount_tMysqlOutput_14;
	nb_line_rejected_tMysqlOutput_14=nb_line_rejected_tMysqlOutput_14 + rejectedCount_tMysqlOutput_14;
	
        globalMap.put("tMysqlOutput_14_NB_LINE",nb_line_tMysqlOutput_14);
        globalMap.put("tMysqlOutput_14_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_14);
        globalMap.put("tMysqlOutput_14_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_14);
        globalMap.put("tMysqlOutput_14_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_14);
        globalMap.put("tMysqlOutput_14_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_14);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_14", true);
end_Hash.put("tMysqlOutput_14", System.currentTimeMillis());




/**
 * [tMysqlOutput_14 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tMysqlCommit_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_14";

	



	

 



/**
 * [tMysqlOutput_14 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlCommit_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_7", false);
		start_Hash.put("tMysqlCommit_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_7";

	
		int tos_count_tMysqlCommit_7 = 0;
		
    	class BytesLimit65535_tMysqlCommit_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_7().limitLog4jByte();

 



/**
 * [tMysqlCommit_7 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_7";

	

	java.sql.Connection conn_tMysqlCommit_7 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_7 != null && !conn_tMysqlCommit_7.isClosed()) {
	
			
			conn_tMysqlCommit_7.commit();
			
	
}

 


	tos_count_tMysqlCommit_7++;

/**
 * [tMysqlCommit_7 main ] stop
 */
	
	/**
	 * [tMysqlCommit_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_7";

	

 

ok_Hash.put("tMysqlCommit_7", true);
end_Hash.put("tMysqlCommit_7", System.currentTimeMillis());




/**
 * [tMysqlCommit_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_7";

	

 



/**
 * [tMysqlCommit_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_7_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		
    	class BytesLimit65535_tFileExist_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExist_1().limitLog4jByte();

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.afastamento_file);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.afastamento_file);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tHashInput_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class out15Struct implements routines.system.IPersistableRow<out15Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_termino;

				public java.util.Date getData_termino () {
					return this.data_termino;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
						result = prime * result + ((this.id_org == null) ? 0 : this.id_org.hashCode());
					
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
						result = prime * result + ((this.data_termino == null) ? 0 : this.data_termino.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out15Struct other = (out15Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org == null) {
							if (other.id_org != null)
								return false;
						
						} else if (!this.id_org.equals(other.id_org))
						
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					
						if (this.data_termino == null) {
							if (other.data_termino != null)
								return false;
						
						} else if (!this.data_termino.equals(other.data_termino))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out15Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_cargo = this.id_cargo;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_termino = this.data_termino;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(out15Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	other.data_termino = this.data_termino;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
					this.id_cargo = readString(dis);
					
						this.id_org = readInteger(dis);
					
					this.data_inicio = readDate(dis);
					
					this.data_termino = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_termino="+String.valueOf(data_termino));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_termino, other.data_termino);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public Integer Id_SERVIDOR_PORTAL;

				public Integer getId_SERVIDOR_PORTAL () {
					return this.Id_SERVIDOR_PORTAL;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String MATRICULA;

				public String getMATRICULA () {
					return this.MATRICULA;
				}
				
			    public String DESCRICAO_CARGO;

				public String getDESCRICAO_CARGO () {
					return this.DESCRICAO_CARGO;
				}
				
			    public String CLASSE_CARGO;

				public String getCLASSE_CARGO () {
					return this.CLASSE_CARGO;
				}
				
			    public String REFERENCIA_CARGO;

				public String getREFERENCIA_CARGO () {
					return this.REFERENCIA_CARGO;
				}
				
			    public String PADRAO_CARGO;

				public String getPADRAO_CARGO () {
					return this.PADRAO_CARGO;
				}
				
			    public String NIVEL_CARGO;

				public String getNIVEL_CARGO () {
					return this.NIVEL_CARGO;
				}
				
			    public String SIGLA_FUNCAO;

				public String getSIGLA_FUNCAO () {
					return this.SIGLA_FUNCAO;
				}
				
			    public String NIVEL_FUNCAO;

				public String getNIVEL_FUNCAO () {
					return this.NIVEL_FUNCAO;
				}
				
			    public String FUNCAO;

				public String getFUNCAO () {
					return this.FUNCAO;
				}
				
			    public String CODIGO_ATIVIDADE;

				public String getCODIGO_ATIVIDADE () {
					return this.CODIGO_ATIVIDADE;
				}
				
			    public String ATIVIDADE;

				public String getATIVIDADE () {
					return this.ATIVIDADE;
				}
				
			    public Integer COD_ORG_LOTACAO;

				public Integer getCOD_ORG_LOTACAO () {
					return this.COD_ORG_LOTACAO;
				}
				
			    public String ORG_LOTACAO;

				public String getORG_LOTACAO () {
					return this.ORG_LOTACAO;
				}
				
			    public Integer COD_ORG_EXERCICIO;

				public Integer getCOD_ORG_EXERCICIO () {
					return this.COD_ORG_EXERCICIO;
				}
				
			    public Integer TIPO_VINCULO;

				public Integer getTIPO_VINCULO () {
					return this.TIPO_VINCULO;
				}
				
			    public String SITUACAO_VINCULO;

				public String getSITUACAO_VINCULO () {
					return this.SITUACAO_VINCULO;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_TERMINO_AFASTAMENTO;

				public String getDATA_TERMINO_AFASTAMENTO () {
					return this.DATA_TERMINO_AFASTAMENTO;
				}
				
			    public String REGIME_JURIDICO;

				public String getREGIME_JURIDICO () {
					return this.REGIME_JURIDICO;
				}
				
			    public String JORNADA_DE_TRABALHO;

				public String getJORNADA_DE_TRABALHO () {
					return this.JORNADA_DE_TRABALHO;
				}
				
			    public String DATA_INGRESSO_CARGOFUNCAO;

				public String getDATA_INGRESSO_CARGOFUNCAO () {
					return this.DATA_INGRESSO_CARGOFUNCAO;
				}
				
			    public String DATA_INGRESSO_ORGAO;

				public String getDATA_INGRESSO_ORGAO () {
					return this.DATA_INGRESSO_ORGAO;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.Id_SERVIDOR_PORTAL = readInteger(dis);
					
					this.NOME = readString(dis);
					
					this.CPF = readString(dis);
					
					this.MATRICULA = readString(dis);
					
					this.DESCRICAO_CARGO = readString(dis);
					
					this.CLASSE_CARGO = readString(dis);
					
					this.REFERENCIA_CARGO = readString(dis);
					
					this.PADRAO_CARGO = readString(dis);
					
					this.NIVEL_CARGO = readString(dis);
					
					this.SIGLA_FUNCAO = readString(dis);
					
					this.NIVEL_FUNCAO = readString(dis);
					
					this.FUNCAO = readString(dis);
					
					this.CODIGO_ATIVIDADE = readString(dis);
					
					this.ATIVIDADE = readString(dis);
					
						this.COD_ORG_LOTACAO = readInteger(dis);
					
					this.ORG_LOTACAO = readString(dis);
					
						this.COD_ORG_EXERCICIO = readInteger(dis);
					
						this.TIPO_VINCULO = readInteger(dis);
					
					this.SITUACAO_VINCULO = readString(dis);
					
					this.DATA_INICIO_AFASTAMENTO = readString(dis);
					
					this.DATA_TERMINO_AFASTAMENTO = readString(dis);
					
					this.REGIME_JURIDICO = readString(dis);
					
					this.JORNADA_DE_TRABALHO = readString(dis);
					
					this.DATA_INGRESSO_CARGOFUNCAO = readString(dis);
					
					this.DATA_INGRESSO_ORGAO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_SERVIDOR_PORTAL,dos);
					
					// String
				
						writeString(this.NOME,dos);
					
					// String
				
						writeString(this.CPF,dos);
					
					// String
				
						writeString(this.MATRICULA,dos);
					
					// String
				
						writeString(this.DESCRICAO_CARGO,dos);
					
					// String
				
						writeString(this.CLASSE_CARGO,dos);
					
					// String
				
						writeString(this.REFERENCIA_CARGO,dos);
					
					// String
				
						writeString(this.PADRAO_CARGO,dos);
					
					// String
				
						writeString(this.NIVEL_CARGO,dos);
					
					// String
				
						writeString(this.SIGLA_FUNCAO,dos);
					
					// String
				
						writeString(this.NIVEL_FUNCAO,dos);
					
					// String
				
						writeString(this.FUNCAO,dos);
					
					// String
				
						writeString(this.CODIGO_ATIVIDADE,dos);
					
					// String
				
						writeString(this.ATIVIDADE,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_LOTACAO,dos);
					
					// String
				
						writeString(this.ORG_LOTACAO,dos);
					
					// Integer
				
						writeInteger(this.COD_ORG_EXERCICIO,dos);
					
					// Integer
				
						writeInteger(this.TIPO_VINCULO,dos);
					
					// String
				
						writeString(this.SITUACAO_VINCULO,dos);
					
					// String
				
						writeString(this.DATA_INICIO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.DATA_TERMINO_AFASTAMENTO,dos);
					
					// String
				
						writeString(this.REGIME_JURIDICO,dos);
					
					// String
				
						writeString(this.JORNADA_DE_TRABALHO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_CARGOFUNCAO,dos);
					
					// String
				
						writeString(this.DATA_INGRESSO_ORGAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_SERVIDOR_PORTAL="+String.valueOf(Id_SERVIDOR_PORTAL));
		sb.append(",NOME="+NOME);
		sb.append(",CPF="+CPF);
		sb.append(",MATRICULA="+MATRICULA);
		sb.append(",DESCRICAO_CARGO="+DESCRICAO_CARGO);
		sb.append(",CLASSE_CARGO="+CLASSE_CARGO);
		sb.append(",REFERENCIA_CARGO="+REFERENCIA_CARGO);
		sb.append(",PADRAO_CARGO="+PADRAO_CARGO);
		sb.append(",NIVEL_CARGO="+NIVEL_CARGO);
		sb.append(",SIGLA_FUNCAO="+SIGLA_FUNCAO);
		sb.append(",NIVEL_FUNCAO="+NIVEL_FUNCAO);
		sb.append(",FUNCAO="+FUNCAO);
		sb.append(",CODIGO_ATIVIDADE="+CODIGO_ATIVIDADE);
		sb.append(",ATIVIDADE="+ATIVIDADE);
		sb.append(",COD_ORG_LOTACAO="+String.valueOf(COD_ORG_LOTACAO));
		sb.append(",ORG_LOTACAO="+ORG_LOTACAO);
		sb.append(",COD_ORG_EXERCICIO="+String.valueOf(COD_ORG_EXERCICIO));
		sb.append(",TIPO_VINCULO="+String.valueOf(TIPO_VINCULO));
		sb.append(",SITUACAO_VINCULO="+SITUACAO_VINCULO);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_TERMINO_AFASTAMENTO="+DATA_TERMINO_AFASTAMENTO);
		sb.append(",REGIME_JURIDICO="+REGIME_JURIDICO);
		sb.append(",JORNADA_DE_TRABALHO="+JORNADA_DE_TRABALHO);
		sb.append(",DATA_INGRESSO_CARGOFUNCAO="+DATA_INGRESSO_CARGOFUNCAO);
		sb.append(",DATA_INGRESSO_ORGAO="+DATA_INGRESSO_ORGAO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputTextFlat_3Process(globalMap);

		row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();
out15Struct out15 = new out15Struct();






	
	/**
	 * [tMysqlOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_16", false);
		start_Hash.put("tMysqlOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_16 = 0;
		
    	class BytesLimit65535_tMysqlOutput_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_16().limitLog4jByte();






int nb_line_tMysqlOutput_16 = 0;
int nb_line_update_tMysqlOutput_16 = 0;
int nb_line_inserted_tMysqlOutput_16 = 0;
int nb_line_deleted_tMysqlOutput_16 = 0;
int nb_line_rejected_tMysqlOutput_16 = 0;

int deletedCount_tMysqlOutput_16=0;
int updatedCount_tMysqlOutput_16=0;
int insertedCount_tMysqlOutput_16=0;

int rejectedCount_tMysqlOutput_16=0;

String tableName_tMysqlOutput_16 = "cadastro_afastamento";
boolean whetherReject_tMysqlOutput_16 = false;

java.util.Calendar calendar_tMysqlOutput_16 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_16.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_16 = calendar_tMysqlOutput_16.getTime().getTime();
calendar_tMysqlOutput_16.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_16 = calendar_tMysqlOutput_16.getTime().getTime();
long date_tMysqlOutput_16;

java.sql.Connection conn_tMysqlOutput_16 = null;
	conn_tMysqlOutput_16 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_16=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_16 = conn_tMysqlOutput_16.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_16 = dbMetaData_tMysqlOutput_16.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_16 = false;
                                while(rsTable_tMysqlOutput_16.next()) {
                                    String table_tMysqlOutput_16 = rsTable_tMysqlOutput_16.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_16.equalsIgnoreCase("cadastro_afastamento")) {
                                        whetherExist_tMysqlOutput_16 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_16.close();
                                if(!whetherExist_tMysqlOutput_16) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_16 = conn_tMysqlOutput_16.createStatement();
                                        stmtCreate_tMysqlOutput_16.execute("CREATE TABLE `" + tableName_tMysqlOutput_16 + "`(`id_pessoa` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)  ,`id_cargo` VARCHAR(255)  ,`id_org` INT(10)  ,`data_inicio` DATETIME  not null ,`data_termino` DATETIME  not null ,`id_intervalo` VARCHAR(255)  ,`id_lotacao` VARCHAR(255)  ,primary key(`id_pessoa`,`matricula_reduzida`,`id_org`,`data_inicio`,`data_termino`))");
                                    stmtCreate_tMysqlOutput_16.close();
                                }
	    String insertIgnore_tMysqlOutput_16 = "INSERT IGNORE INTO `" + "cadastro_afastamento" + "` (`id_pessoa`,`matricula_reduzida`,`id_cargo`,`id_org`,`data_inicio`,`data_termino`,`id_intervalo`,`id_lotacao`) VALUES (?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `id_cargo` = ?,`id_intervalo` = ?,`id_lotacao` = ?";
	    java.sql.PreparedStatement pstmt_tMysqlOutput_16 = conn_tMysqlOutput_16.prepareStatement(insertIgnore_tMysqlOutput_16);
	    

 



/**
 * [tMysqlOutput_16 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out15Struct out15_tmp = new out15Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_5 = 0;
		
    	class BytesLimit65535_tFilterRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_5().limitLog4jByte();
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		
    	class BytesLimit65535_tHashInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_2().limitLog4jByte();


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_child_job_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row13Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row13Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row9.Id_SERVIDOR_PORTAL = next_tHashInput_2.Id_SERVIDOR_PORTAL;
	row9.NOME = next_tHashInput_2.NOME;
	row9.CPF = next_tHashInput_2.CPF;
	row9.MATRICULA = next_tHashInput_2.MATRICULA;
	row9.DESCRICAO_CARGO = next_tHashInput_2.DESCRICAO_CARGO;
	row9.CLASSE_CARGO = next_tHashInput_2.CLASSE_CARGO;
	row9.REFERENCIA_CARGO = next_tHashInput_2.REFERENCIA_CARGO;
	row9.PADRAO_CARGO = next_tHashInput_2.PADRAO_CARGO;
	row9.NIVEL_CARGO = next_tHashInput_2.NIVEL_CARGO;
	row9.SIGLA_FUNCAO = next_tHashInput_2.SIGLA_FUNCAO;
	row9.NIVEL_FUNCAO = next_tHashInput_2.NIVEL_FUNCAO;
	row9.FUNCAO = next_tHashInput_2.FUNCAO;
	row9.CODIGO_ATIVIDADE = next_tHashInput_2.CODIGO_ATIVIDADE;
	row9.ATIVIDADE = next_tHashInput_2.ATIVIDADE;
	row9.COD_ORG_LOTACAO = next_tHashInput_2.COD_ORG_LOTACAO;
	row9.ORG_LOTACAO = next_tHashInput_2.ORG_LOTACAO;
	row9.COD_ORG_EXERCICIO = next_tHashInput_2.COD_ORG_EXERCICIO;
	row9.TIPO_VINCULO = next_tHashInput_2.TIPO_VINCULO;
	row9.SITUACAO_VINCULO = next_tHashInput_2.SITUACAO_VINCULO;
	row9.DATA_INICIO_AFASTAMENTO = next_tHashInput_2.DATA_INICIO_AFASTAMENTO;
	row9.DATA_TERMINO_AFASTAMENTO = next_tHashInput_2.DATA_TERMINO_AFASTAMENTO;
	row9.REGIME_JURIDICO = next_tHashInput_2.REGIME_JURIDICO;
	row9.JORNADA_DE_TRABALHO = next_tHashInput_2.JORNADA_DE_TRABALHO;
	row9.DATA_INGRESSO_CARGOFUNCAO = next_tHashInput_2.DATA_INGRESSO_CARGOFUNCAO;
	row9.DATA_INGRESSO_ORGAO = next_tHashInput_2.DATA_INGRESSO_ORGAO;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */

	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

          row10 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((row9.TIPO_VINCULO == null? false : row9.TIPO_VINCULO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(2))) == 0)
                           , "TIPO_VINCULO.compareTo(2) == 0 failed");
		 	
      ope_tFilterRow_5.matches((// code sample : use row9 to define the condition.
// row9.columnName1.equals("foo") ||!(row9.columnName2.equals("bar"))
// replace the following expression by your own filter condition
(row9.SITUACAO_VINCULO.equals("CONT.PROF.SUBSTITUTO") || row9.SITUACAO_VINCULO.equals("ATIVO PERMANENTE")) && row9.COD_ORG_LOTACAO.equals(row9.COD_ORG_EXERCICIO)
), "advanced condition failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.Id_SERVIDOR_PORTAL = row9.Id_SERVIDOR_PORTAL;
               row10.NOME = row9.NOME;
               row10.CPF = row9.CPF;
               row10.MATRICULA = row9.MATRICULA;
               row10.DESCRICAO_CARGO = row9.DESCRICAO_CARGO;
               row10.CLASSE_CARGO = row9.CLASSE_CARGO;
               row10.REFERENCIA_CARGO = row9.REFERENCIA_CARGO;
               row10.PADRAO_CARGO = row9.PADRAO_CARGO;
               row10.NIVEL_CARGO = row9.NIVEL_CARGO;
               row10.SIGLA_FUNCAO = row9.SIGLA_FUNCAO;
               row10.NIVEL_FUNCAO = row9.NIVEL_FUNCAO;
               row10.FUNCAO = row9.FUNCAO;
               row10.CODIGO_ATIVIDADE = row9.CODIGO_ATIVIDADE;
               row10.ATIVIDADE = row9.ATIVIDADE;
               row10.COD_ORG_LOTACAO = row9.COD_ORG_LOTACAO;
               row10.ORG_LOTACAO = row9.ORG_LOTACAO;
               row10.COD_ORG_EXERCICIO = row9.COD_ORG_EXERCICIO;
               row10.TIPO_VINCULO = row9.TIPO_VINCULO;
               row10.SITUACAO_VINCULO = row9.SITUACAO_VINCULO;
               row10.DATA_INICIO_AFASTAMENTO = row9.DATA_INICIO_AFASTAMENTO;
               row10.DATA_TERMINO_AFASTAMENTO = row9.DATA_TERMINO_AFASTAMENTO;
               row10.REGIME_JURIDICO = row9.REGIME_JURIDICO;
               row10.JORNADA_DE_TRABALHO = row9.JORNADA_DE_TRABALHO;
               row10.DATA_INGRESSO_CARGOFUNCAO = row9.DATA_INGRESSO_CARGOFUNCAO;
               row10.DATA_INGRESSO_ORGAO = row9.DATA_INGRESSO_ORGAO;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		row12HashKey.ID_SERVIDOR_PORTAL = row10.Id_SERVIDOR_PORTAL ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
	
		  								forceLooprow12 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow12 = true;
			           		  	} // G 21
                    		  	
                    		

							row12Struct row12 = null;
                    		  	 
							

								while ((tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) || forceLooprow12) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row12'
									
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								
								if(!forceLooprow12) { // G 46
								
							
								 
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_6 && 
									
									!(
										
										!row12.DATA_INICIO_AFASTAMENTO.equals("Não informada") && !row12.DATA_FIM_AFASTAMENTO.equals("Não informada")
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row12 = null;
									row12 = row12Default;
                    		  	  		  		
									
									
										rejectedInnerJoin_tMap_6 = true;
													
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow12 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out15 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'out15'
out15_tmp.id_pessoa = row12.CPF.substring(4, 11) + "-" + row12.NOME ;
out15_tmp.matricula_reduzida = row10.MATRICULA.substring(0, 3) ;
out15_tmp.id_cargo = row10.DESCRICAO_CARGO+"-"+row10.CLASSE_CARGO ;
out15_tmp.id_org = row10.COD_ORG_LOTACAO ;
out15_tmp.data_inicio = TalendDate.parseDate("dd/MM/yyyy", row12.DATA_INICIO_AFASTAMENTO) ;
out15_tmp.data_termino = TalendDate.parseDate("dd/MM/yyyy", row12.DATA_FIM_AFASTAMENTO) ;
out15_tmp.id_intervalo = null;
out15_tmp.id_lotacao = row10.CPF.substring(4, 11) + "-" + row10.NOME+ "-" + row10.MATRICULA.substring(0, 3)+ "-" + row10.COD_ORG_LOTACAO ;
out15 = out15_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
// Start of branch "out15"
if(out15 != null) { 



	
	/**
	 * [tMysqlOutput_16 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_16";

	

			//out15
			//out15


			
				if(execStat){
					runStat.updateStatOnConnection("out15"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_16 = false;
                    if(out15.id_pessoa == null) {
pstmt_tMysqlOutput_16.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(1, out15.id_pessoa);
}

                    if(out15.matricula_reduzida == null) {
pstmt_tMysqlOutput_16.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(2, out15.matricula_reduzida);
}

                    if(out15.id_cargo == null) {
pstmt_tMysqlOutput_16.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(3, out15.id_cargo);
}

                    if(out15.id_org == null) {
pstmt_tMysqlOutput_16.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_16.setInt(4, out15.id_org);
}

                    if(out15.data_inicio != null) {
date_tMysqlOutput_16 = out15.data_inicio.getTime();
if(date_tMysqlOutput_16 < year1_tMysqlOutput_16 || date_tMysqlOutput_16 >= year10000_tMysqlOutput_16) {
pstmt_tMysqlOutput_16.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_16.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_16));
}
} else {
pstmt_tMysqlOutput_16.setNull(5, java.sql.Types.DATE);
}

                    if(out15.data_termino != null) {
date_tMysqlOutput_16 = out15.data_termino.getTime();
if(date_tMysqlOutput_16 < year1_tMysqlOutput_16 || date_tMysqlOutput_16 >= year10000_tMysqlOutput_16) {
pstmt_tMysqlOutput_16.setString(6, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_16.setTimestamp(6, new java.sql.Timestamp(date_tMysqlOutput_16));
}
} else {
pstmt_tMysqlOutput_16.setNull(6, java.sql.Types.DATE);
}

                    if(out15.id_intervalo == null) {
pstmt_tMysqlOutput_16.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(7, out15.id_intervalo);
}

                    if(out15.id_lotacao == null) {
pstmt_tMysqlOutput_16.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(8, out15.id_lotacao);
}

                    if(out15.id_cargo == null) {
pstmt_tMysqlOutput_16.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(9, out15.id_cargo);
}

                    if(out15.id_intervalo == null) {
pstmt_tMysqlOutput_16.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(10, out15.id_intervalo);
}

                    if(out15.id_lotacao == null) {
pstmt_tMysqlOutput_16.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_16.setString(11, out15.id_lotacao);
}

            int count_on_duplicate_key_tMysqlOutput_16 = 0;
            try {
                count_on_duplicate_key_tMysqlOutput_16 = pstmt_tMysqlOutput_16.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tMysqlOutput_16 = true;
                        System.err.print(e.getMessage());
            }
            if(count_on_duplicate_key_tMysqlOutput_16 == 1) {
                insertedCount_tMysqlOutput_16 += count_on_duplicate_key_tMysqlOutput_16;
            } else {
                insertedCount_tMysqlOutput_16 += 1;
                updatedCount_tMysqlOutput_16 += count_on_duplicate_key_tMysqlOutput_16 - 1;
            }
            if(!whetherReject_tMysqlOutput_16) {
            }

 


	tos_count_tMysqlOutput_16++;

/**
 * [tMysqlOutput_16 main ] stop
 */

} // End of branch "out15"



	
		} // close loop of lookup 'row12' // G_TM_M_043
	

} // End of branch "row10"







	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_child_job_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMysqlOutput_16 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_16";

	



	

        if(pstmt_tMysqlOutput_16 != null) {
			
				pstmt_tMysqlOutput_16.close();
			
        }


	nb_line_deleted_tMysqlOutput_16=nb_line_deleted_tMysqlOutput_16+ deletedCount_tMysqlOutput_16;
	nb_line_update_tMysqlOutput_16=nb_line_update_tMysqlOutput_16 + updatedCount_tMysqlOutput_16;
	nb_line_inserted_tMysqlOutput_16=nb_line_inserted_tMysqlOutput_16 + insertedCount_tMysqlOutput_16;
	nb_line_rejected_tMysqlOutput_16=nb_line_rejected_tMysqlOutput_16 + rejectedCount_tMysqlOutput_16;
	
        globalMap.put("tMysqlOutput_16_NB_LINE",nb_line_tMysqlOutput_16);
        globalMap.put("tMysqlOutput_16_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_16);
        globalMap.put("tMysqlOutput_16_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_16);
        globalMap.put("tMysqlOutput_16_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_16);
        globalMap.put("tMysqlOutput_16_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_16);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_16", true);
end_Hash.put("tMysqlOutput_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlCommit_9Process(globalMap);



/**
 * [tMysqlOutput_16 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_16";

	



	

 



/**
 * [tMysqlOutput_16 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlCommit_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_9", false);
		start_Hash.put("tMysqlCommit_9", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_9";

	
		int tos_count_tMysqlCommit_9 = 0;
		
    	class BytesLimit65535_tMysqlCommit_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_9().limitLog4jByte();

 



/**
 * [tMysqlCommit_9 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_9 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_9";

	

	java.sql.Connection conn_tMysqlCommit_9 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_9 != null && !conn_tMysqlCommit_9.isClosed()) {
	
			
			conn_tMysqlCommit_9.commit();
			
	
}

 


	tos_count_tMysqlCommit_9++;

/**
 * [tMysqlCommit_9 main ] stop
 */
	
	/**
	 * [tMysqlCommit_9 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_9";

	

 

ok_Hash.put("tMysqlCommit_9", true);
end_Hash.put("tMysqlCommit_9", System.currentTimeMillis());




/**
 * [tMysqlCommit_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_9 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_9";

	

 



/**
 * [tMysqlCommit_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_9_SUBPROCESS_STATE", 1);
	}
	


public static class out16Struct implements routines.system.IPersistableRow<out16Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_termino;

				public java.util.Date getData_termino () {
					return this.data_termino;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_pessoa == null) ? 0 : this.id_pessoa.hashCode());
					
						result = prime * result + ((this.matricula_reduzida == null) ? 0 : this.matricula_reduzida.hashCode());
					
						result = prime * result + ((this.id_org == null) ? 0 : this.id_org.hashCode());
					
						result = prime * result + ((this.data_inicio == null) ? 0 : this.data_inicio.hashCode());
					
						result = prime * result + ((this.data_termino == null) ? 0 : this.data_termino.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out16Struct other = (out16Struct) obj;
		
						if (this.id_pessoa == null) {
							if (other.id_pessoa != null)
								return false;
						
						} else if (!this.id_pessoa.equals(other.id_pessoa))
						
							return false;
					
						if (this.matricula_reduzida == null) {
							if (other.matricula_reduzida != null)
								return false;
						
						} else if (!this.matricula_reduzida.equals(other.matricula_reduzida))
						
							return false;
					
						if (this.id_org == null) {
							if (other.id_org != null)
								return false;
						
						} else if (!this.id_org.equals(other.id_org))
						
							return false;
					
						if (this.data_inicio == null) {
							if (other.data_inicio != null)
								return false;
						
						} else if (!this.data_inicio.equals(other.data_inicio))
						
							return false;
					
						if (this.data_termino == null) {
							if (other.data_termino != null)
								return false;
						
						} else if (!this.data_termino.equals(other.data_termino))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out16Struct other) {

		other.id_pessoa = this.id_pessoa;
	            other.matricula_reduzida = this.matricula_reduzida;
	            other.id_cargo = this.id_cargo;
	            other.id_org = this.id_org;
	            other.data_inicio = this.data_inicio;
	            other.data_termino = this.data_termino;
	            other.id_intervalo = this.id_intervalo;
	            other.id_lotacao = this.id_lotacao;
	            
	}

	public void copyKeysDataTo(out16Struct other) {

		other.id_pessoa = this.id_pessoa;
	            	other.matricula_reduzida = this.matricula_reduzida;
	            	other.id_org = this.id_org;
	            	other.data_inicio = this.data_inicio;
	            	other.data_termino = this.data_termino;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
					this.id_cargo = readString(dis);
					
						this.id_org = readInteger(dis);
					
					this.data_inicio = readDate(dis);
					
					this.data_termino = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_termino="+String.valueOf(data_termino));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pessoa, other.id_pessoa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matricula_reduzida, other.matricula_reduzida);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.id_org, other.id_org);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_inicio, other.data_inicio);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_termino, other.data_termino);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out17Struct implements routines.system.IPersistableRow<out17Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public java.util.Date inicio;

				public java.util.Date getInicio () {
					return this.inicio;
				}
				
			    public java.util.Date fim;

				public java.util.Date getFim () {
					return this.fim;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_intervalo == null) ? 0 : this.id_intervalo.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out17Struct other = (out17Struct) obj;
		
						if (this.id_intervalo == null) {
							if (other.id_intervalo != null)
								return false;
						
						} else if (!this.id_intervalo.equals(other.id_intervalo))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out17Struct other) {

		other.id_intervalo = this.id_intervalo;
	            other.inicio = this.inicio;
	            other.fim = this.fim;
	            
	}

	public void copyKeysDataTo(out17Struct other) {

		other.id_intervalo = this.id_intervalo;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_intervalo = readString(dis);
					
					this.inicio = readDate(dis);
					
					this.fim = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_intervalo,dos);
					
					// java.util.Date
				
						writeDate(this.inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fim,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_intervalo="+id_intervalo);
		sb.append(",inicio="+String.valueOf(inicio));
		sb.append(",fim="+String.valueOf(fim));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_intervalo, other.id_intervalo);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];

	
			    public String id_pessoa;

				public String getId_pessoa () {
					return this.id_pessoa;
				}
				
			    public String matricula_reduzida;

				public String getMatricula_reduzida () {
					return this.matricula_reduzida;
				}
				
			    public String id_cargo;

				public String getId_cargo () {
					return this.id_cargo;
				}
				
			    public Integer id_org;

				public Integer getId_org () {
					return this.id_org;
				}
				
			    public java.util.Date data_inicio;

				public java.util.Date getData_inicio () {
					return this.data_inicio;
				}
				
			    public java.util.Date data_termino;

				public java.util.Date getData_termino () {
					return this.data_termino;
				}
				
			    public String id_intervalo;

				public String getId_intervalo () {
					return this.id_intervalo;
				}
				
			    public String id_lotacao;

				public String getId_lotacao () {
					return this.id_lotacao;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MESTRADO_child_job.length) {
				if(length < 1024 && commonByteArray_MESTRADO_child_job.length == 0) {
   					commonByteArray_MESTRADO_child_job = new byte[1024];
				} else {
   					commonByteArray_MESTRADO_child_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MESTRADO_child_job, 0, length);
			strReturn = new String(commonByteArray_MESTRADO_child_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
					this.id_pessoa = readString(dis);
					
					this.matricula_reduzida = readString(dis);
					
					this.id_cargo = readString(dis);
					
						this.id_org = readInteger(dis);
					
					this.data_inicio = readDate(dis);
					
					this.data_termino = readDate(dis);
					
					this.id_intervalo = readString(dis);
					
					this.id_lotacao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_pessoa,dos);
					
					// String
				
						writeString(this.matricula_reduzida,dos);
					
					// String
				
						writeString(this.id_cargo,dos);
					
					// Integer
				
						writeInteger(this.id_org,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino,dos);
					
					// String
				
						writeString(this.id_intervalo,dos);
					
					// String
				
						writeString(this.id_lotacao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pessoa="+id_pessoa);
		sb.append(",matricula_reduzida="+matricula_reduzida);
		sb.append(",id_cargo="+id_cargo);
		sb.append(",id_org="+String.valueOf(id_org));
		sb.append(",data_inicio="+String.valueOf(data_inicio));
		sb.append(",data_termino="+String.valueOf(data_termino));
		sb.append(",id_intervalo="+id_intervalo);
		sb.append(",id_lotacao="+id_lotacao);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
out16Struct out16 = new out16Struct();
out17Struct out17 = new out17Struct();





	
	/**
	 * [tMysqlOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_17", false);
		start_Hash.put("tMysqlOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_17 = 0;
		
    	class BytesLimit65535_tMysqlOutput_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_17().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_17 = 5;
        if(updateKeyCount_tMysqlOutput_17 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_17 = 0;
int nb_line_update_tMysqlOutput_17 = 0;
int nb_line_inserted_tMysqlOutput_17 = 0;
int nb_line_deleted_tMysqlOutput_17 = 0;
int nb_line_rejected_tMysqlOutput_17 = 0;

int deletedCount_tMysqlOutput_17=0;
int updatedCount_tMysqlOutput_17=0;
int insertedCount_tMysqlOutput_17=0;

int rejectedCount_tMysqlOutput_17=0;

String tableName_tMysqlOutput_17 = "cadastro_afastamento";
boolean whetherReject_tMysqlOutput_17 = false;

java.util.Calendar calendar_tMysqlOutput_17 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_17.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_17 = calendar_tMysqlOutput_17.getTime().getTime();
calendar_tMysqlOutput_17.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_17 = calendar_tMysqlOutput_17.getTime().getTime();
long date_tMysqlOutput_17;

java.sql.Connection conn_tMysqlOutput_17 = null;
	conn_tMysqlOutput_17 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_17=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_17 = conn_tMysqlOutput_17.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_17 = dbMetaData_tMysqlOutput_17.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_17 = false;
                                while(rsTable_tMysqlOutput_17.next()) {
                                    String table_tMysqlOutput_17 = rsTable_tMysqlOutput_17.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_17.equalsIgnoreCase("cadastro_afastamento")) {
                                        whetherExist_tMysqlOutput_17 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_17.close();
                                if(!whetherExist_tMysqlOutput_17) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_17 = conn_tMysqlOutput_17.createStatement();
                                        stmtCreate_tMysqlOutput_17.execute("CREATE TABLE `" + tableName_tMysqlOutput_17 + "`(`id_pessoa` VARCHAR(255)   not null ,`matricula_reduzida` VARCHAR(255)  ,`id_cargo` VARCHAR(255)  ,`id_org` INT(10)  ,`data_inicio` DATETIME  not null ,`data_termino` DATETIME  not null ,`id_intervalo` VARCHAR(255)  ,`id_lotacao` VARCHAR(255)  ,primary key(`id_pessoa`,`matricula_reduzida`,`id_org`,`data_inicio`,`data_termino`))");
                                    stmtCreate_tMysqlOutput_17.close();
                                }
	    java.sql.PreparedStatement pstmt_tMysqlOutput_17 = conn_tMysqlOutput_17.prepareStatement("SELECT COUNT(1) FROM `" + "cadastro_afastamento" + "` WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ? AND `data_inicio` = ? AND `data_termino` = ?");
	    String insert_tMysqlOutput_17 = "INSERT INTO `" + "cadastro_afastamento" + "` () VALUES ()";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_17 = conn_tMysqlOutput_17.prepareStatement(insert_tMysqlOutput_17);
	    String update_tMysqlOutput_17 = "UPDATE `" + "cadastro_afastamento" + "` SET `id_intervalo` = ? WHERE `id_pessoa` = ? AND `matricula_reduzida` = ? AND `id_org` = ? AND `data_inicio` = ? AND `data_termino` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_17 = conn_tMysqlOutput_17.prepareStatement(update_tMysqlOutput_17);
	    

 



/**
 * [tMysqlOutput_17 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_18", false);
		start_Hash.put("tMysqlOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_18";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_18 = 0;
		
    	class BytesLimit65535_tMysqlOutput_18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_18().limitLog4jByte();






int nb_line_tMysqlOutput_18 = 0;
int nb_line_update_tMysqlOutput_18 = 0;
int nb_line_inserted_tMysqlOutput_18 = 0;
int nb_line_deleted_tMysqlOutput_18 = 0;
int nb_line_rejected_tMysqlOutput_18 = 0;

int deletedCount_tMysqlOutput_18=0;
int updatedCount_tMysqlOutput_18=0;
int insertedCount_tMysqlOutput_18=0;

int rejectedCount_tMysqlOutput_18=0;

String tableName_tMysqlOutput_18 = "cadastro_intervalo";
boolean whetherReject_tMysqlOutput_18 = false;

java.util.Calendar calendar_tMysqlOutput_18 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_18.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_18 = calendar_tMysqlOutput_18.getTime().getTime();
calendar_tMysqlOutput_18.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_18 = calendar_tMysqlOutput_18.getTime().getTime();
long date_tMysqlOutput_18;

java.sql.Connection conn_tMysqlOutput_18 = null;
	conn_tMysqlOutput_18 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_18=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_18 = conn_tMysqlOutput_18.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_18 = dbMetaData_tMysqlOutput_18.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_18 = false;
                                while(rsTable_tMysqlOutput_18.next()) {
                                    String table_tMysqlOutput_18 = rsTable_tMysqlOutput_18.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_18.equalsIgnoreCase("cadastro_intervalo")) {
                                        whetherExist_tMysqlOutput_18 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_18.close();
                                if(!whetherExist_tMysqlOutput_18) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_18 = conn_tMysqlOutput_18.createStatement();
                                        stmtCreate_tMysqlOutput_18.execute("CREATE TABLE `" + tableName_tMysqlOutput_18 + "`(`id_intervalo` VARCHAR(255)   not null ,`inicio` DATETIME ,`fim` DATETIME ,primary key(`id_intervalo`))");
                                    stmtCreate_tMysqlOutput_18.close();
                                }
	    String insert_tMysqlOutput_18 = "INSERT IGNORE INTO `" + "cadastro_intervalo" + "` (`id_intervalo`,`inicio`,`fim`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmt_tMysqlOutput_18 = conn_tMysqlOutput_18.prepareStatement(insert_tMysqlOutput_18);
	    

 



/**
 * [tMysqlOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		
    	class BytesLimit65535_tMap_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_7().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out16Struct out16_tmp = new out16Struct();
out17Struct out17_tmp = new out17Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMysqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_6", false);
		start_Hash.put("tMysqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_6";

	
		int tos_count_tMysqlInput_6 = 0;
		
    	class BytesLimit65535_tMysqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_6().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6.getTime();
		    int nb_line_tMysqlInput_6 = 0;
		    java.sql.Connection conn_tMysqlInput_6 = null;
		        conn_tMysqlInput_6 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6.createStatement();

		    String dbquery_tMysqlInput_6 = "SELECT \n  `cadastro_afastamento`.`id_pessoa`, \n  `cadastro_afastamento`.`matricula_reduzida`, \n  `cadastro_afastamento`.`id_cargo`, \n  `cadastro_afastamento`.`id_org`, \n  `cadastro_afastamento`.`data_inicio`, \n  `cadastro_afastamento`.`data_termino`, \n  `cadastro_afastamento`.`id_intervalo`, \n  `cadastro_afastamento`.`id_lotacao`\nFROM `cadastro_afastamento`";
			

                       globalMap.put("tMysqlInput_6_QUERY",dbquery_tMysqlInput_6);

		    java.sql.ResultSet rs_tMysqlInput_6 = null;
		try{
		    rs_tMysqlInput_6 = stmt_tMysqlInput_6.executeQuery(dbquery_tMysqlInput_6);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6.getMetaData();
		    int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6.getColumnCount();

		    String tmpContent_tMysqlInput_6 = null;
		    
		    
		    while (rs_tMysqlInput_6.next()) {
		        nb_line_tMysqlInput_6++;
		        
							if(colQtyInRs_tMysqlInput_6 < 1) {
								row14.id_pessoa = null;
							} else {
	                         		
        	row14.id_pessoa = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 2) {
								row14.matricula_reduzida = null;
							} else {
	                         		
        	row14.matricula_reduzida = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 3) {
								row14.id_cargo = null;
							} else {
	                         		
        	row14.id_cargo = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 4) {
								row14.id_org = null;
							} else {
		                          
            if(rs_tMysqlInput_6.getObject(4) != null) {
                row14.id_org = rs_tMysqlInput_6.getInt(4);
            } else {
                    row14.id_org = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_6 < 5) {
								row14.data_inicio = null;
							} else {
										
	        if(rs_tMysqlInput_6.getString(5) != null) {
	            String dateString_tMysqlInput_6 = rs_tMysqlInput_6.getString(5);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_6) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_6)) {
	                row14.data_inicio = rs_tMysqlInput_6.getTimestamp(5);
	            } else {
	                row14.data_inicio = (java.util.Date) year0_tMysqlInput_6.clone();
	            }
	        } else {
	            row14.data_inicio =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_6 < 6) {
								row14.data_termino = null;
							} else {
										
	        if(rs_tMysqlInput_6.getString(6) != null) {
	            String dateString_tMysqlInput_6 = rs_tMysqlInput_6.getString(6);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_6) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_6)) {
	                row14.data_termino = rs_tMysqlInput_6.getTimestamp(6);
	            } else {
	                row14.data_termino = (java.util.Date) year0_tMysqlInput_6.clone();
	            }
	        } else {
	            row14.data_termino =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_6 < 7) {
								row14.id_intervalo = null;
							} else {
	                         		
        	row14.id_intervalo = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 8) {
								row14.id_lotacao = null;
							} else {
	                         		
        	row14.id_lotacao = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 8, false);
		                    }
					

 



/**
 * [tMysqlInput_6 begin ] stop
 */
	
	/**
	 * [tMysqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 


	tos_count_tMysqlInput_6++;

/**
 * [tMysqlInput_6 main ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out16 = null;
out17 = null;


// # Output table : 'out16'
out16_tmp.id_pessoa = row14.id_pessoa ;
out16_tmp.matricula_reduzida = row14.matricula_reduzida ;
out16_tmp.id_cargo = null;
out16_tmp.id_org = row14.id_org ;
out16_tmp.data_inicio = row14.data_inicio ;
out16_tmp.data_termino = row14.data_termino ;
out16_tmp.id_intervalo = ((row14.data_inicio == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row14.data_inicio)) + "-" + ((row14.data_termino == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row14.data_termino)) ;
out16_tmp.id_lotacao = null;
out16 = out16_tmp;

// # Output table : 'out17'
out17_tmp.id_intervalo = ((row14.data_inicio == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row14.data_inicio)) + "-" + ((row14.data_termino == null) ? "null" :
TalendDate.formatDate("yyyyMMdd",row14.data_termino)) ;
out17_tmp.inicio = row14.data_inicio ;
out17_tmp.fim = row14.data_termino ;
out17 = out17_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
// Start of branch "out16"
if(out16 != null) { 



	
	/**
	 * [tMysqlOutput_17 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_17";

	

			//out16
			//out16


			
				if(execStat){
					runStat.updateStatOnConnection("out16"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_17 = false;
                    if(out16.id_pessoa == null) {
pstmt_tMysqlOutput_17.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_17.setString(1, out16.id_pessoa);
}

                    if(out16.matricula_reduzida == null) {
pstmt_tMysqlOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_17.setString(2, out16.matricula_reduzida);
}

                    if(out16.id_org == null) {
pstmt_tMysqlOutput_17.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_17.setInt(3, out16.id_org);
}

                    if(out16.data_inicio != null) {
date_tMysqlOutput_17 = out16.data_inicio.getTime();
if(date_tMysqlOutput_17 < year1_tMysqlOutput_17 || date_tMysqlOutput_17 >= year10000_tMysqlOutput_17) {
pstmt_tMysqlOutput_17.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_17.setTimestamp(4, new java.sql.Timestamp(date_tMysqlOutput_17));
}
} else {
pstmt_tMysqlOutput_17.setNull(4, java.sql.Types.DATE);
}

                    if(out16.data_termino != null) {
date_tMysqlOutput_17 = out16.data_termino.getTime();
if(date_tMysqlOutput_17 < year1_tMysqlOutput_17 || date_tMysqlOutput_17 >= year10000_tMysqlOutput_17) {
pstmt_tMysqlOutput_17.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_17.setTimestamp(5, new java.sql.Timestamp(date_tMysqlOutput_17));
}
} else {
pstmt_tMysqlOutput_17.setNull(5, java.sql.Types.DATE);
}


            java.sql.ResultSet rs_tMysqlOutput_17 = pstmt_tMysqlOutput_17.executeQuery();
            int checkCount_tMysqlOutput_17 = -1;
            while(rs_tMysqlOutput_17.next()) {
                checkCount_tMysqlOutput_17 = rs_tMysqlOutput_17.getInt(1);
            }
            if(checkCount_tMysqlOutput_17 > 0) {
                        if(out16.id_intervalo == null) {
pstmtUpdate_tMysqlOutput_17.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_17.setString(1, out16.id_intervalo);
}

                        if(out16.id_pessoa == null) {
pstmtUpdate_tMysqlOutput_17.setNull(2 + count_tMysqlOutput_17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_17.setString(2 + count_tMysqlOutput_17, out16.id_pessoa);
}

                        if(out16.matricula_reduzida == null) {
pstmtUpdate_tMysqlOutput_17.setNull(3 + count_tMysqlOutput_17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_17.setString(3 + count_tMysqlOutput_17, out16.matricula_reduzida);
}

                        if(out16.id_org == null) {
pstmtUpdate_tMysqlOutput_17.setNull(4 + count_tMysqlOutput_17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_17.setInt(4 + count_tMysqlOutput_17, out16.id_org);
}

                        if(out16.data_inicio != null) {
pstmtUpdate_tMysqlOutput_17.setTimestamp(5 + count_tMysqlOutput_17, new java.sql.Timestamp(out16.data_inicio.getTime()));
} else {
pstmtUpdate_tMysqlOutput_17.setNull(5 + count_tMysqlOutput_17, java.sql.Types.TIMESTAMP);
}

                        if(out16.data_termino != null) {
pstmtUpdate_tMysqlOutput_17.setTimestamp(6 + count_tMysqlOutput_17, new java.sql.Timestamp(out16.data_termino.getTime()));
} else {
pstmtUpdate_tMysqlOutput_17.setNull(6 + count_tMysqlOutput_17, java.sql.Types.TIMESTAMP);
}

                try {
                    updatedCount_tMysqlOutput_17 = updatedCount_tMysqlOutput_17 + pstmtUpdate_tMysqlOutput_17.executeUpdate();
                    nb_line_tMysqlOutput_17++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_17 = true;
                        nb_line_tMysqlOutput_17++;
                            System.err.print(e.getMessage());
                }
            } else {
                try {
                    insertedCount_tMysqlOutput_17 = insertedCount_tMysqlOutput_17 + pstmtInsert_tMysqlOutput_17.executeUpdate();
                    nb_line_tMysqlOutput_17++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_17 = true;
                        nb_line_tMysqlOutput_17++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tMysqlOutput_17++;

/**
 * [tMysqlOutput_17 main ] stop
 */

} // End of branch "out16"




// Start of branch "out17"
if(out17 != null) { 



	
	/**
	 * [tMysqlOutput_18 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_18";

	

			//out17
			//out17


			
				if(execStat){
					runStat.updateStatOnConnection("out17"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_18 = false;
                        if(out17.id_intervalo == null) {
pstmt_tMysqlOutput_18.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_18.setString(1, out17.id_intervalo);
}

                        if(out17.inicio != null) {
date_tMysqlOutput_18 = out17.inicio.getTime();
if(date_tMysqlOutput_18 < year1_tMysqlOutput_18 || date_tMysqlOutput_18 >= year10000_tMysqlOutput_18) {
pstmt_tMysqlOutput_18.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_18.setTimestamp(2, new java.sql.Timestamp(date_tMysqlOutput_18));
}
} else {
pstmt_tMysqlOutput_18.setNull(2, java.sql.Types.DATE);
}

                        if(out17.fim != null) {
date_tMysqlOutput_18 = out17.fim.getTime();
if(date_tMysqlOutput_18 < year1_tMysqlOutput_18 || date_tMysqlOutput_18 >= year10000_tMysqlOutput_18) {
pstmt_tMysqlOutput_18.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_18.setTimestamp(3, new java.sql.Timestamp(date_tMysqlOutput_18));
}
} else {
pstmt_tMysqlOutput_18.setNull(3, java.sql.Types.DATE);
}

                try {
                    nb_line_tMysqlOutput_18++;
                    insertedCount_tMysqlOutput_18 = insertedCount_tMysqlOutput_18 + pstmt_tMysqlOutput_18.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_18 = true;
                            System.err.print(e.getMessage());
                }

 


	tos_count_tMysqlOutput_18++;

/**
 * [tMysqlOutput_18 main ] stop
 */

} // End of branch "out17"







	
	/**
	 * [tMysqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

	}
}finally{
	if(rs_tMysqlInput_6 !=null){
		rs_tMysqlInput_6.close();
	}
	stmt_tMysqlInput_6.close();
}

		   globalMap.put("tMysqlInput_6_NB_LINE",nb_line_tMysqlInput_6);
		


 

ok_Hash.put("tMysqlInput_6", true);
end_Hash.put("tMysqlInput_6", System.currentTimeMillis());




/**
 * [tMysqlInput_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMysqlOutput_17 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_17";

	



        if(pstmtUpdate_tMysqlOutput_17 != null){

            pstmtUpdate_tMysqlOutput_17.close();

        }
        if(pstmtInsert_tMysqlOutput_17 != null){

            pstmtInsert_tMysqlOutput_17.close();

        }
        if(pstmt_tMysqlOutput_17 != null) {

            pstmt_tMysqlOutput_17.close();

        }


	nb_line_deleted_tMysqlOutput_17=nb_line_deleted_tMysqlOutput_17+ deletedCount_tMysqlOutput_17;
	nb_line_update_tMysqlOutput_17=nb_line_update_tMysqlOutput_17 + updatedCount_tMysqlOutput_17;
	nb_line_inserted_tMysqlOutput_17=nb_line_inserted_tMysqlOutput_17 + insertedCount_tMysqlOutput_17;
	nb_line_rejected_tMysqlOutput_17=nb_line_rejected_tMysqlOutput_17 + rejectedCount_tMysqlOutput_17;
	
        globalMap.put("tMysqlOutput_17_NB_LINE",nb_line_tMysqlOutput_17);
        globalMap.put("tMysqlOutput_17_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_17);
        globalMap.put("tMysqlOutput_17_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_17);
        globalMap.put("tMysqlOutput_17_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_17);
        globalMap.put("tMysqlOutput_17_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_17);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_17", true);
end_Hash.put("tMysqlOutput_17", System.currentTimeMillis());




/**
 * [tMysqlOutput_17 end ] stop
 */




	
	/**
	 * [tMysqlOutput_18 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_18";

	



	

        if(pstmt_tMysqlOutput_18 != null) {
			
				pstmt_tMysqlOutput_18.close();
			
        }


	nb_line_deleted_tMysqlOutput_18=nb_line_deleted_tMysqlOutput_18+ deletedCount_tMysqlOutput_18;
	nb_line_update_tMysqlOutput_18=nb_line_update_tMysqlOutput_18 + updatedCount_tMysqlOutput_18;
	nb_line_inserted_tMysqlOutput_18=nb_line_inserted_tMysqlOutput_18 + insertedCount_tMysqlOutput_18;
	nb_line_rejected_tMysqlOutput_18=nb_line_rejected_tMysqlOutput_18 + rejectedCount_tMysqlOutput_18;
	
        globalMap.put("tMysqlOutput_18_NB_LINE",nb_line_tMysqlOutput_18);
        globalMap.put("tMysqlOutput_18_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_18);
        globalMap.put("tMysqlOutput_18_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_18);
        globalMap.put("tMysqlOutput_18_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_18);
        globalMap.put("tMysqlOutput_18_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_18);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_18", true);
end_Hash.put("tMysqlOutput_18", System.currentTimeMillis());




/**
 * [tMysqlOutput_18 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMysqlInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
								} 
							
							tMysqlCommit_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_17";

	



	

 



/**
 * [tMysqlOutput_17 finally ] stop
 */




	
	/**
	 * [tMysqlOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_18";

	



	

 



/**
 * [tMysqlOutput_18 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlCommit_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlCommit_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlCommit_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlCommit_8", false);
		start_Hash.put("tMysqlCommit_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlCommit_8";

	
		int tos_count_tMysqlCommit_8 = 0;
		
    	class BytesLimit65535_tMysqlCommit_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlCommit_8().limitLog4jByte();

 



/**
 * [tMysqlCommit_8 begin ] stop
 */
	
	/**
	 * [tMysqlCommit_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_8";

	

	java.sql.Connection conn_tMysqlCommit_8 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

if(conn_tMysqlCommit_8 != null && !conn_tMysqlCommit_8.isClosed()) {
	
		try{
	
			
			conn_tMysqlCommit_8.commit();
			
	
		}finally{
			
			conn_tMysqlCommit_8.close();
			
	    }
	
}

 


	tos_count_tMysqlCommit_8++;

/**
 * [tMysqlCommit_8 main ] stop
 */
	
	/**
	 * [tMysqlCommit_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_8";

	

 

ok_Hash.put("tMysqlCommit_8", true);
end_Hash.put("tMysqlCommit_8", System.currentTimeMillis());




/**
 * [tMysqlCommit_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlCommit_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlCommit_8";

	

 



/**
 * [tMysqlCommit_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlCommit_8_SUBPROCESS_STATE", 1);
	}
	

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		
    	class BytesLimit65535_tHashInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_3().limitLog4jByte();


int nb_line_tHashInput_3 = 0;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}
				
			    public Integer MES;

				public Integer getMES () {
					return this.MES;
				}
				
			    public Integer ID_SERVIDOR_PORTAL;

				public Integer getID_SERVIDOR_PORTAL () {
					return this.ID_SERVIDOR_PORTAL;
				}
				
			    public String REMUNERACAO_BASICA_BRUTA;

				public String getREMUNERACAO_BASICA_BRUTA () {
					return this.REMUNERACAO_BASICA_BRUTA;
				}
				
			    public String GRATIFICACAO_NATALINA;

				public String getGRATIFICACAO_NATALINA () {
					return this.GRATIFICACAO_NATALINA;
				}
				
			    public String FERIAS;

				public String getFERIAS () {
					return this.FERIAS;
				}
				
			    public String OUTRAS_REMUNERACOES_EVENTUAIS;

				public String getOUTRAS_REMUNERACOES_EVENTUAIS () {
					return this.OUTRAS_REMUNERACOES_EVENTUAIS;
				}
				
			    public String IRRF;

				public String getIRRF () {
					return this.IRRF;
				}
				
			    public String PSS_RPGS;

				public String getPSS_RPGS () {
					return this.PSS_RPGS;
				}
				
			    public String FUNDO_DE_SAUDE;

				public String getFUNDO_DE_SAUDE () {
					return this.FUNDO_DE_SAUDE;
				}
				
			    public String DEMAIS_DEDUCOES;

				public String getDEMAIS_DEDUCOES () {
					return this.DEMAIS_DEDUCOES;
				}
				
			    public String VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL;

				public String getVERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL () {
					return this.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID_SERVIDOR_PORTAL == null) ? 0 : this.ID_SERVIDOR_PORTAL.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.ID_SERVIDOR_PORTAL == null) {
							if (other.ID_SERVIDOR_PORTAL != null)
								return false;
						
						} else if (!this.ID_SERVIDOR_PORTAL.equals(other.ID_SERVIDOR_PORTAL))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ANO = this.ANO;
	            other.MES = this.MES;
	            other.ID_SERVIDOR_PORTAL = this.ID_SERVIDOR_PORTAL;
	            other.REMUNERACAO_BASICA_BRUTA = this.REMUNERACAO_BASICA_BRUTA;
	            other.GRATIFICACAO_NATALINA = this.GRATIFICACAO_NATALINA;
	            other.FERIAS = this.FERIAS;
	            other.OUTRAS_REMUNERACOES_EVENTUAIS = this.OUTRAS_REMUNERACOES_EVENTUAIS;
	            other.IRRF = this.IRRF;
	            other.PSS_RPGS = this.PSS_RPGS;
	            other.FUNDO_DE_SAUDE = this.FUNDO_DE_SAUDE;
	            other.DEMAIS_DEDUCOES = this.DEMAIS_DEDUCOES;
	            other.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL = this.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.ID_SERVIDOR_PORTAL = this.ID_SERVIDOR_PORTAL;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.ID_SERVIDOR_PORTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_SERVIDOR_PORTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ANO = readInteger(dis,ois);
					
						this.MES = readInteger(dis,ois);
					
						this.REMUNERACAO_BASICA_BRUTA = readString(dis,ois);
					
						this.GRATIFICACAO_NATALINA = readString(dis,ois);
					
						this.FERIAS = readString(dis,ois);
					
						this.OUTRAS_REMUNERACOES_EVENTUAIS = readString(dis,ois);
					
						this.IRRF = readString(dis,ois);
					
						this.PSS_RPGS = readString(dis,ois);
					
						this.FUNDO_DE_SAUDE = readString(dis,ois);
					
						this.DEMAIS_DEDUCOES = readString(dis,ois);
					
						this.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.ANO, dos, oos);
					
					writeInteger(this.MES, dos, oos);
					
						writeString(this.REMUNERACAO_BASICA_BRUTA, dos, oos);
					
						writeString(this.GRATIFICACAO_NATALINA, dos, oos);
					
						writeString(this.FERIAS, dos, oos);
					
						writeString(this.OUTRAS_REMUNERACOES_EVENTUAIS, dos, oos);
					
						writeString(this.IRRF, dos, oos);
					
						writeString(this.PSS_RPGS, dos, oos);
					
						writeString(this.FUNDO_DE_SAUDE, dos, oos);
					
						writeString(this.DEMAIS_DEDUCOES, dos, oos);
					
						writeString(this.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+String.valueOf(MES));
		sb.append(",ID_SERVIDOR_PORTAL="+String.valueOf(ID_SERVIDOR_PORTAL));
		sb.append(",REMUNERACAO_BASICA_BRUTA="+REMUNERACAO_BASICA_BRUTA);
		sb.append(",GRATIFICACAO_NATALINA="+GRATIFICACAO_NATALINA);
		sb.append(",FERIAS="+FERIAS);
		sb.append(",OUTRAS_REMUNERACOES_EVENTUAIS="+OUTRAS_REMUNERACOES_EVENTUAIS);
		sb.append(",IRRF="+IRRF);
		sb.append(",PSS_RPGS="+PSS_RPGS);
		sb.append(",FUNDO_DE_SAUDE="+FUNDO_DE_SAUDE);
		sb.append(",DEMAIS_DEDUCOES="+DEMAIS_DEDUCOES);
		sb.append(",VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL="+VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID_SERVIDOR_PORTAL, other.ID_SERVIDOR_PORTAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputTextFlat_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputTextFlat_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row7().limitLog4jByte();

			   		// connection name:row7
			   		// source node:tFileInputTextFlat_2 - inputs:(after_tHashInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_4 - inputs:(row8,row7) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tFileInputTextFlat_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputTextFlat_2", false);
		start_Hash.put("tFileInputTextFlat_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputTextFlat_2";

	
		int tos_count_tFileInputTextFlat_2 = 0;
		
    	class BytesLimit65535_tFileInputTextFlat_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputTextFlat_2().limitLog4jByte();

    // row7 , 
	de.jlo.talendcomp.flatfileimport.Importer tFileInputTextFlat_2 = new de.jlo.talendcomp.flatfileimport.Importer();
	tFileInputTextFlat_2.setDebug(false);
	tFileInputTextFlat_2.setImportFile(context.remuneracao_file);
	globalMap.put("tFileInputTextFlat_2_FILENAME", tFileInputTextFlat_2.getImportFile()); 
	tFileInputTextFlat_2.skipBOM(true);
	tFileInputTextFlat_2.setSkipEmptyLines(true);
	tFileInputTextFlat_2.setHasHeaderRow(true);
	tFileInputTextFlat_2.setIgnoreNotNullConstraints(false);
    tFileInputTextFlat_2.setRowsToSkip(0);
	tFileInputTextFlat_2.setDelimiter("\t");
	tFileInputTextFlat_2.setFileCharset("Windows-1252");
	// helper to configure fields and get values
	final class ImportHelper_tFileInputTextFlat_2 {
	
		public void configureFields(de.jlo.talendcomp.flatfileimport.Importer importer) {
		
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ANO", // columnName
				"Integer", // type
				true, // nullable 
				0, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"MES", // columnName
				"Integer", // type
				true, // nullable 
				1, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ID_SERVIDOR_PORTAL", // columnName
				"Integer", // type
				true, // nullable 
				2, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"REMUNERAÇÃO BÁSICA BRUTA (R$)", // columnName
				"String", // type
				true, // nullable 
				3, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"GRATIFICAÇÃO NATALINA (R$)", // columnName
				"String", // type
				true, // nullable 
				4, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"FÉRIAS (R$)", // columnName
				"String", // type
				true, // nullable 
				5, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"OUTRAS REMUNERAÇÕES EVENTUAIS (R$)", // columnName
				"String", // type
				true, // nullable 
				6, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"IRRF (R$)", // columnName
				"String", // type
				true, // nullable 
				7, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"PSS/RPGS (R$)", // columnName
				"String", // type
				true, // nullable 
				8, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"FUNDO DE SAÚDE (R$)", // columnName
				"String", // type
				true, // nullable 
				9, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DEMAIS DEDUÇÕES (R$)", // columnName
				"String", // type
				true, // nullable 
				10, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"VERBAS INDENIZATÓRIAS REGISTRADAS EM SISTEMAS DE PESSOAL - CIVIL (R$)(*)", // columnName
				"String", // type
				true, // nullable 
				11, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative    
		} // end of configureFields
		
		public void fillOutputFlow(de.jlo.talendcomp.flatfileimport.Importer importer, row7Struct flow) throws Exception {
				flow.ANO = importer.getIntegerAt(0, true); 	
				flow.MES = importer.getIntegerAt(1, true); 	
				flow.ID_SERVIDOR_PORTAL = importer.getIntegerAt(2, true); 	
				flow.REMUNERACAO_BASICA_BRUTA = importer.getStringAt(3, true); 	
				flow.GRATIFICACAO_NATALINA = importer.getStringAt(4, true); 	
				flow.FERIAS = importer.getStringAt(5, true); 	
				flow.OUTRAS_REMUNERACOES_EVENTUAIS = importer.getStringAt(6, true); 	
				flow.IRRF = importer.getStringAt(7, true); 	
				flow.PSS_RPGS = importer.getStringAt(8, true); 	
				flow.FUNDO_DE_SAUDE = importer.getStringAt(9, true); 	
				flow.DEMAIS_DEDUCOES = importer.getStringAt(10, true); 	
				flow.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL = importer.getStringAt(11, true); 	
		} // end of fillOutputFlow
	
	}
	final ImportHelper_tFileInputTextFlat_2 helper_tFileInputTextFlat_2 = new ImportHelper_tFileInputTextFlat_2();
	try {
		helper_tFileInputTextFlat_2.configureFields(tFileInputTextFlat_2);
		globalMap.put("tFileInputTextFlat_2_HEADER_CONFIG_ERROR", false);
	} catch (Exception e) {
		globalMap.put("tFileInputTextFlat_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
    try {
    	tFileInputTextFlat_2.initialize();
        tFileInputTextFlat_2.skipTopRows();
		tFileInputTextFlat_2.skipHeaderRow();
		try {
			// reconfigure fields, will fail if no header line is set
			tFileInputTextFlat_2.setFindHeaderPosByRegex(false);
			tFileInputTextFlat_2.reconfigureFieldDescriptionByHeaderLine();
		} catch (Exception e) {
			globalMap.put("tFileInputTextFlat_2_HEADER_CONFIG_ERROR", true);
			throw e;		
		}
	} catch (Exception e) {
		tFileInputTextFlat_2.close(); // close file handle in case of errors
		globalMap.put("tFileInputTextFlat_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	int countLinesDelivered_tFileInputTextFlat_2 = 0;
	int lineNumber_tFileInputTextFlat_2 = -1;
	int countRejects_tFileInputTextFlat_2 = 0;
	try {
		while (true) { // main loop will be closed in end section
			// retrieve next data set
			lineNumber_tFileInputTextFlat_2++;
			row7 = new row7Struct();
			try {
				if (tFileInputTextFlat_2.nextDataRow() == false) {
					break;
				}
			} catch (Exception e) {
				String message = "nextDataRow failed in line " + countLinesDelivered_tFileInputTextFlat_2 + ":" + e.getMessage();
				globalMap.put("tFileInputTextFlat_2_ERROR_MESSAGE", message);
				row7 = null;
			}
			if (row7 != null) {
				// retrieve values
				try {
					helper_tFileInputTextFlat_2.fillOutputFlow(tFileInputTextFlat_2, row7);
				} catch (Exception e) {
					String message = "fillOutputFlow failed in line " + countLinesDelivered_tFileInputTextFlat_2 + ":" + e.getMessage();
					globalMap.put("tFileInputTextFlat_2_ERROR_MESSAGE", message);
					continue;
				}
			}
			countLinesDelivered_tFileInputTextFlat_2++;
			
 



/**
 * [tFileInputTextFlat_2 begin ] stop
 */
	
	/**
	 * [tFileInputTextFlat_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_2";

	

 


	tos_count_tFileInputTextFlat_2++;

/**
 * [tFileInputTextFlat_2 main ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ANO = row7.ANO;
				
				row7_HashRow.MES = row7.MES;
				
				row7_HashRow.ID_SERVIDOR_PORTAL = row7.ID_SERVIDOR_PORTAL;
				
				row7_HashRow.REMUNERACAO_BASICA_BRUTA = row7.REMUNERACAO_BASICA_BRUTA;
				
				row7_HashRow.GRATIFICACAO_NATALINA = row7.GRATIFICACAO_NATALINA;
				
				row7_HashRow.FERIAS = row7.FERIAS;
				
				row7_HashRow.OUTRAS_REMUNERACOES_EVENTUAIS = row7.OUTRAS_REMUNERACOES_EVENTUAIS;
				
				row7_HashRow.IRRF = row7.IRRF;
				
				row7_HashRow.PSS_RPGS = row7.PSS_RPGS;
				
				row7_HashRow.FUNDO_DE_SAUDE = row7.FUNDO_DE_SAUDE;
				
				row7_HashRow.DEMAIS_DEDUCOES = row7.DEMAIS_DEDUCOES;
				
				row7_HashRow.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL = row7.VERBAS_INDENIZATORIAS_DE_PESSOAL_CIVIL;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputTextFlat_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_2";

	

		} // end of while of tFileInputTextFlat_2
	} finally { // finally from try of tFileInputTextFlat_2
		tFileInputTextFlat_2.close(); // close file handle
	}
	globalMap.put("tFileInputTextFlat_2_NB_LINE", countLinesDelivered_tFileInputTextFlat_2); 
	globalMap.put("tFileInputTextFlat_2_NB_REJECTED", countRejects_tFileInputTextFlat_2); 
	try {
		tFileInputTextFlat_2.saveConfigToFile("/tmp/.importconfig", true);
	} catch (Exception e) {
		globalMap.put("tFileInputTextFlat_2_ERROR_MESSAGE", e.getMessage());
		throw e;	
	} 	
	
 

ok_Hash.put("tFileInputTextFlat_2", true);
end_Hash.put("tFileInputTextFlat_2", System.currentTimeMillis());




/**
 * [tFileInputTextFlat_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputTextFlat_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_2";

	

 



/**
 * [tFileInputTextFlat_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputTextFlat_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_MESTRADO_child_job = new byte[0];
    static byte[] commonByteArray_MESTRADO_child_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ANO;

				public Integer getANO () {
					return this.ANO;
				}
				
			    public String MES;

				public String getMES () {
					return this.MES;
				}
				
			    public Integer ID_SERVIDOR_PORTAL;

				public Integer getID_SERVIDOR_PORTAL () {
					return this.ID_SERVIDOR_PORTAL;
				}
				
			    public String CPF;

				public String getCPF () {
					return this.CPF;
				}
				
			    public String NOME;

				public String getNOME () {
					return this.NOME;
				}
				
			    public String DATA_INICIO_AFASTAMENTO;

				public String getDATA_INICIO_AFASTAMENTO () {
					return this.DATA_INICIO_AFASTAMENTO;
				}
				
			    public String DATA_FIM_AFASTAMENTO;

				public String getDATA_FIM_AFASTAMENTO () {
					return this.DATA_FIM_AFASTAMENTO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID_SERVIDOR_PORTAL == null) ? 0 : this.ID_SERVIDOR_PORTAL.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.ID_SERVIDOR_PORTAL == null) {
							if (other.ID_SERVIDOR_PORTAL != null)
								return false;
						
						} else if (!this.ID_SERVIDOR_PORTAL.equals(other.ID_SERVIDOR_PORTAL))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ANO = this.ANO;
	            other.MES = this.MES;
	            other.ID_SERVIDOR_PORTAL = this.ID_SERVIDOR_PORTAL;
	            other.CPF = this.CPF;
	            other.NOME = this.NOME;
	            other.DATA_INICIO_AFASTAMENTO = this.DATA_INICIO_AFASTAMENTO;
	            other.DATA_FIM_AFASTAMENTO = this.DATA_FIM_AFASTAMENTO;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.ID_SERVIDOR_PORTAL = this.ID_SERVIDOR_PORTAL;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MESTRADO_child_job) {

        	try {

        		int length = 0;
		
						this.ID_SERVIDOR_PORTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID_SERVIDOR_PORTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ANO = readInteger(dis,ois);
					
						this.MES = readString(dis,ois);
					
						this.CPF = readString(dis,ois);
					
						this.NOME = readString(dis,ois);
					
						this.DATA_INICIO_AFASTAMENTO = readString(dis,ois);
					
						this.DATA_FIM_AFASTAMENTO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.ANO, dos, oos);
					
						writeString(this.MES, dos, oos);
					
						writeString(this.CPF, dos, oos);
					
						writeString(this.NOME, dos, oos);
					
						writeString(this.DATA_INICIO_AFASTAMENTO, dos, oos);
					
						writeString(this.DATA_FIM_AFASTAMENTO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANO="+String.valueOf(ANO));
		sb.append(",MES="+MES);
		sb.append(",ID_SERVIDOR_PORTAL="+String.valueOf(ID_SERVIDOR_PORTAL));
		sb.append(",CPF="+CPF);
		sb.append(",NOME="+NOME);
		sb.append(",DATA_INICIO_AFASTAMENTO="+DATA_INICIO_AFASTAMENTO);
		sb.append(",DATA_FIM_AFASTAMENTO="+DATA_FIM_AFASTAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID_SERVIDOR_PORTAL, other.ID_SERVIDOR_PORTAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputTextFlat_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputTextFlat_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row12 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row12().limitLog4jByte();

			   		// connection name:row12
			   		// source node:tFileInputTextFlat_3 - inputs:(after_tHashInput_2) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_6 - inputs:(row10,row12) outputs:(out15)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tFileInputTextFlat_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputTextFlat_3", false);
		start_Hash.put("tFileInputTextFlat_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputTextFlat_3";

	
		int tos_count_tFileInputTextFlat_3 = 0;
		
    	class BytesLimit65535_tFileInputTextFlat_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputTextFlat_3().limitLog4jByte();

    // row12 , 
	de.jlo.talendcomp.flatfileimport.Importer tFileInputTextFlat_3 = new de.jlo.talendcomp.flatfileimport.Importer();
	tFileInputTextFlat_3.setDebug(false);
	tFileInputTextFlat_3.setImportFile(context.afastamento_file);
	globalMap.put("tFileInputTextFlat_3_FILENAME", tFileInputTextFlat_3.getImportFile()); 
	tFileInputTextFlat_3.skipBOM(true);
	tFileInputTextFlat_3.setSkipEmptyLines(true);
	tFileInputTextFlat_3.setHasHeaderRow(true);
	tFileInputTextFlat_3.setIgnoreNotNullConstraints(false);
    tFileInputTextFlat_3.setRowsToSkip(0);
	tFileInputTextFlat_3.setDelimiter("\t");
	tFileInputTextFlat_3.setFileCharset("Windows-1252");
	// helper to configure fields and get values
	final class ImportHelper_tFileInputTextFlat_3 {
	
		public void configureFields(de.jlo.talendcomp.flatfileimport.Importer importer) {
		
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ANO", // columnName
				"Integer", // type
				true, // nullable 
				0, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"MES", // columnName
				"String", // type
				true, // nullable 
				1, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"ID_SERVIDOR_PORTAL", // columnName
				"Integer", // type
				true, // nullable 
				2, // pos
				0, // length
				"en", // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"CPF", // columnName
				"String", // type
				true, // nullable 
				3, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"NOME", // columnName
				"String", // type
				true, // nullable 
				4, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_INICIO_AFASTAMENTO", // columnName
				"String", // type
				true, // nullable 
				5, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative
			importer.addFieldDescription(de.jlo.talendcomp.flatfileimport.FieldDescription.createDelimited(
				"DATA_FIM_AFASTAMENTO", // columnName
				"String", // type
				true, // nullable 
				6, // pos
				0, // length
				null, // pattern
				null, // regex
				true, // trim
				false, // ignoreMissing
				null, // defaultValue
				null)); // alternative    
		} // end of configureFields
		
		public void fillOutputFlow(de.jlo.talendcomp.flatfileimport.Importer importer, row12Struct flow) throws Exception {
				flow.ANO = importer.getIntegerAt(0, true); 	
				flow.MES = importer.getStringAt(1, true); 	
				flow.ID_SERVIDOR_PORTAL = importer.getIntegerAt(2, true); 	
				flow.CPF = importer.getStringAt(3, true); 	
				flow.NOME = importer.getStringAt(4, true); 	
				flow.DATA_INICIO_AFASTAMENTO = importer.getStringAt(5, true); 	
				flow.DATA_FIM_AFASTAMENTO = importer.getStringAt(6, true); 	
		} // end of fillOutputFlow
	
	}
	final ImportHelper_tFileInputTextFlat_3 helper_tFileInputTextFlat_3 = new ImportHelper_tFileInputTextFlat_3();
	try {
		helper_tFileInputTextFlat_3.configureFields(tFileInputTextFlat_3);
		globalMap.put("tFileInputTextFlat_3_HEADER_CONFIG_ERROR", false);
	} catch (Exception e) {
		globalMap.put("tFileInputTextFlat_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
    try {
    	tFileInputTextFlat_3.initialize();
        tFileInputTextFlat_3.skipTopRows();
		tFileInputTextFlat_3.skipHeaderRow();
		try {
			// reconfigure fields, will fail if no header line is set
			tFileInputTextFlat_3.setFindHeaderPosByRegex(false);
			tFileInputTextFlat_3.reconfigureFieldDescriptionByHeaderLine();
		} catch (Exception e) {
			globalMap.put("tFileInputTextFlat_3_HEADER_CONFIG_ERROR", true);
			throw e;		
		}
	} catch (Exception e) {
		tFileInputTextFlat_3.close(); // close file handle in case of errors
		globalMap.put("tFileInputTextFlat_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	int countLinesDelivered_tFileInputTextFlat_3 = 0;
	int lineNumber_tFileInputTextFlat_3 = -1;
	int countRejects_tFileInputTextFlat_3 = 0;
	try {
		while (true) { // main loop will be closed in end section
			// retrieve next data set
			lineNumber_tFileInputTextFlat_3++;
			row12 = new row12Struct();
			try {
				if (tFileInputTextFlat_3.nextDataRow() == false) {
					break;
				}
			} catch (Exception e) {
				String message = "nextDataRow failed in line " + countLinesDelivered_tFileInputTextFlat_3 + ":" + e.getMessage();
				globalMap.put("tFileInputTextFlat_3_ERROR_MESSAGE", message);
				row12 = null;
			}
			if (row12 != null) {
				// retrieve values
				try {
					helper_tFileInputTextFlat_3.fillOutputFlow(tFileInputTextFlat_3, row12);
				} catch (Exception e) {
					String message = "fillOutputFlow failed in line " + countLinesDelivered_tFileInputTextFlat_3 + ":" + e.getMessage();
					globalMap.put("tFileInputTextFlat_3_ERROR_MESSAGE", message);
					continue;
				}
			}
			countLinesDelivered_tFileInputTextFlat_3++;
			
 



/**
 * [tFileInputTextFlat_3 begin ] stop
 */
	
	/**
	 * [tFileInputTextFlat_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_3";

	

 


	tos_count_tFileInputTextFlat_3++;

/**
 * [tFileInputTextFlat_3 main ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ANO = row12.ANO;
				
				row12_HashRow.MES = row12.MES;
				
				row12_HashRow.ID_SERVIDOR_PORTAL = row12.ID_SERVIDOR_PORTAL;
				
				row12_HashRow.CPF = row12.CPF;
				
				row12_HashRow.NOME = row12.NOME;
				
				row12_HashRow.DATA_INICIO_AFASTAMENTO = row12.DATA_INICIO_AFASTAMENTO;
				
				row12_HashRow.DATA_FIM_AFASTAMENTO = row12.DATA_FIM_AFASTAMENTO;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFileInputTextFlat_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_3";

	

		} // end of while of tFileInputTextFlat_3
	} finally { // finally from try of tFileInputTextFlat_3
		tFileInputTextFlat_3.close(); // close file handle
	}
	globalMap.put("tFileInputTextFlat_3_NB_LINE", countLinesDelivered_tFileInputTextFlat_3); 
	globalMap.put("tFileInputTextFlat_3_NB_REJECTED", countRejects_tFileInputTextFlat_3); 	
	
 

ok_Hash.put("tFileInputTextFlat_3", true);
end_Hash.put("tFileInputTextFlat_3", System.currentTimeMillis());




/**
 * [tFileInputTextFlat_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputTextFlat_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputTextFlat_3";

	

 



/**
 * [tFileInputTextFlat_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputTextFlat_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final child_job child_jobClass = new child_job();

        int exitCode = child_jobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = child_job.class.getClassLoader().getResourceAsStream("mestrado/child_job_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("cadastro_file", "id_String");
				
                context.cadastro_file=(String) context.getProperty("cadastro_file");
				    context.setContextType("remuneracao_file", "id_String");
				
                context.remuneracao_file=(String) context.getProperty("remuneracao_file");
				    context.setContextType("afastamento_file", "id_String");
				
                context.afastamento_file=(String) context.getProperty("afastamento_file");
				    context.setContextType("host", "id_String");
				
                context.host=(String) context.getProperty("host");
				    context.setContextType("port", "id_String");
				
                context.port=(String) context.getProperty("port");
				    context.setContextType("database", "id_String");
				
                context.database=(String) context.getProperty("database");
				    context.setContextType("user", "id_String");
				
                context.user=(String) context.getProperty("user");
				    context.setContextType("password", "id_String");
				
                context.password=(String) context.getProperty("password");
				    context.setContextType("if_id", "id_String");
				
                context.if_id=(String) context.getProperty("if_id");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cadastro_file")) {
                context.cadastro_file = (String) parentContextMap.get("cadastro_file");
            }if (parentContextMap.containsKey("remuneracao_file")) {
                context.remuneracao_file = (String) parentContextMap.get("remuneracao_file");
            }if (parentContextMap.containsKey("afastamento_file")) {
                context.afastamento_file = (String) parentContextMap.get("afastamento_file");
            }if (parentContextMap.containsKey("host")) {
                context.host = (String) parentContextMap.get("host");
            }if (parentContextMap.containsKey("port")) {
                context.port = (String) parentContextMap.get("port");
            }if (parentContextMap.containsKey("database")) {
                context.database = (String) parentContextMap.get("database");
            }if (parentContextMap.containsKey("user")) {
                context.user = (String) parentContextMap.get("user");
            }if (parentContextMap.containsKey("password")) {
                context.password = (String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("if_id")) {
                context.if_id = (String) parentContextMap.get("if_id");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlConnection_1) {
globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", -1);

e_tMysqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : child_job");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tMysqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tMysqlConnection_1", globalMap.get("conn_tMysqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     725315 characters generated by Talend Open Studio for Data Integration 
 *     on the 5 de Novembro de 2017 11h59min40s BRST
 ************************************************************************************************/